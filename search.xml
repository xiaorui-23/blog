<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter 集成个推推送-安卓原生篇</title>
      <link href="/2023/04/27/202304271414/"/>
      <url>/2023/04/27/202304271414/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在众多的集成化推送中选择了个推，个推在<code>flutter</code>集成中还是比较简单的，只需要跟着官网一步一步走就可以了。今天这篇文章不涉及到<code>flutter</code>项目个推的集成，只是记录个推离线走安卓厂商时，进行获取一个离线的点击通知数据。</p><p>在个推的官网中提供的例子是<code>java</code>的，不符合我的意向，再加上<code>flutter</code>默认是<code>kotlin</code>的，所以本篇文章也是以<code>kotlin</code>的代码为主。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>项目以集成个推推送并配置好了个推的<code>appId</code>和各方厂商的<code>appId</code>、<code>appKey</code>等。</p><p>在服务端的推送代码配置中需要添加<code>push_channel</code>键值对，可以参考下面的代码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;push_channel&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;android&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ups&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;notification&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;标题&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span><span class="string">&quot;内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;click_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;intent&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 不填</span></span><br><span class="line">                    <span class="attr">&quot;intent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="原生配置说明"><a href="#原生配置说明" class="headerlink" title="原生配置说明"></a>原生配置说明</h1><p><code>intent</code> 已下面这种为参考进行配置。</p><ul><li><code>host</code>: host。这个是自定义的想咋写就咋写。</li><li><code>scheme</code>: 协议方案。这个是自定义的想咋写就咋写。</li><li><code>package</code>: app 包名。</li><li><code>component</code>: 是一个启动的 Activity。</li><li><code>payload</code>: 自定义传递的参数。</li></ul><blockquote><p>intent://host?#Intent;scheme=scheme;launchFlags=0x4000000;package=package;component=component;S.payload=payload;S.gttask=;end</p></blockquote><p>配置好的样子大概就是下面这个样子:</p><blockquote><p>intent://host?#Intent;scheme=scheme;launchFlags=0x4000000;package=package;component=包名/包名.MainActivity;S.payload=payload;S.gttask=;end</p></blockquote><p>我们需要在<code>android/app/src/main/AndroidManifest.xml</code>的<code>activity</code>中找到你配置个推的那块添加下面这样一段代码：</p><ul><li><code>host</code>: 这里的<code>host</code>就是上文中配置的<code>host</code>。</li><li><code>path</code>: 这个可以随便写，根据自己需求来。</li><li><code>scheme</code>: 也是上文中的<code>scheme</code>。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;host&quot;</span> <span class="attr">android:path</span>=<span class="string">&quot;path&quot;</span> <span class="attr">android:scheme</span>=<span class="string">&quot;scheme&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>大概就是下面这个样子的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span> /&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 自定义的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;host&quot;</span> <span class="attr">android:path</span>=<span class="string">&quot;path&quot;</span> <span class="attr">android:scheme</span>=<span class="string">&quot;scheme&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这样就已经配置好了，现在开始来写代码。</p><h1 id="上路"><a href="#上路" class="headerlink" title="上路"></a>上路</h1><p>打开项目的<code>android/app/src/main/kotlin/com/xx/xx/MainActivity.kt</code>文件，引入下面的依赖。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Intent </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodCall</span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.engine.FlutterEngine</span><br></pre></td></tr></table></figure><p>然后在<code>MainActivity</code>类中申明通道名称和payload。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通道名称</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">var</span> channel: String = <span class="string">&quot;通道名称&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取推送，发给flutter</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">var</span> payLoad: String? = <span class="literal">null</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写原生kotlin代码"><a href="#编写原生kotlin代码" class="headerlink" title="编写原生kotlin代码"></a>编写原生<code>kotlin</code>代码</h2><p>我们需要重写<code>onCreate</code>、<code>onNewIntent</code>、<code>configureFlutterEngine</code>这三个方法，我们自己进行重新就可以了，在创建的项目代码中是没有这三个方法的。</p><h3 id="一、onCreate"><a href="#一、onCreate" class="headerlink" title="一、onCreate"></a>一、<code>onCreate</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取自定义透传参数值</span></span><br><span class="line">    <span class="keyword">val</span> intent: Intent? = getIntent()</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != intent) &#123;</span><br><span class="line">        payLoad = intent.getStringExtra(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、onNewIntent"><a href="#二、onNewIntent" class="headerlink" title="二、onNewIntent"></a>二、<code>onNewIntent</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNewIntent</span><span class="params">(intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onNewIntent(intent)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取自定义透传参数值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != intent) &#123;</span><br><span class="line">        payLoad = intent.getStringExtra(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、configureFlutterEngine"><a href="#三、configureFlutterEngine" class="headerlink" title="三、configureFlutterEngine"></a>三、<code>configureFlutterEngine</code></h3><p>这里我们设置一个名为<code>getIntentData</code>的方法名，并进行判断是否是传递的这个方法名，并进行相关处理。我们后面获取数据全靠它。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">configureFlutterEngine</span><span class="params">(flutterEngine: <span class="type">FlutterEngine</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.configureFlutterEngine(flutterEngine)</span><br><span class="line"></span><br><span class="line">    payLoad = intent.getStringExtra(<span class="string">&quot;payload&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过MethodChannel调用通知flutter开启参数</span></span><br><span class="line">        MethodChannel(</span><br><span class="line">                flutterEngine.dartExecutor.binaryMessenger,</span><br><span class="line">                channel</span><br><span class="line">        ).setMethodCallHandler &#123; call: MethodCall, result: MethodChannel.Result -&gt; </span><br><span class="line">            <span class="keyword">if</span> (call.method == <span class="string">&quot;getIntentData&quot;</span>) &#123;</span><br><span class="line">                result.success(<span class="string">&quot;<span class="variable">$payLoad</span>&quot;</span>)</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err: Exception) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写dart代码"><a href="#编写dart代码" class="headerlink" title="编写dart代码"></a>编写<code>dart</code>代码</h2><p>现在我们回到<code>flutter</code>层面，开始写<code>dart</code>的代码，并进行与我们写的通道进行通信。</p><p>申明一个<code>getIntent</code>的<code>Future</code>的异步函数，并创建通道。这里的通道名称一定要和上面我们写的原生通道名称一致，不然没法调用通信。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getIntent() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 设置通道名称</span></span><br><span class="line">    <span class="keyword">const</span> MethodChannel channel = MethodChannel(<span class="string">&quot;通道名称&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>invokeMethod</code>的形式去调用我们在原生方面外露的方法名。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> result = <span class="keyword">await</span> channel.invokeMethod(<span class="string">&quot;getIntentData&quot;</span>);</span><br></pre></td></tr></table></figure><p>接下来判断<code>result</code>是否是正确的值，因为我这边在原生那边通信的时候是将它转成了一个字符串，所以我们判断的是否要以字符串的形式去判断。像下面这样。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="string">&#x27;null&#x27;</span>].contains(result))&#123;&#125;</span><br></pre></td></tr></table></figure><p>当我们拿到合规正确的值过后就可以全程在<code>flutter</code>层面进行调用使用了。由于他是一个字符串，我需要将他转成<code>Map</code>的形式来方便使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">Map</span> data = json.decode(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> Exception(<span class="string">&#x27;from-&gt; <span class="subst">$result</span> to Map fail, incorrect format&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>我这里在服务端传递<code>payload</code>的数据时是一个被<code>json</code>化了的字符串，如果朋友你不是这种的字符串记得加处理哦。</p><p>如果不知道什么是被<code>json</code>化了的字符串，可以看下面这个：</p><blockquote><p>“{a: 1}”</p></blockquote><p>这个我们就写完啦。这个不能边跑边调试，需要每次以离线跑进行调试，还是稍微有点麻烦。只能以冷启动进行调试。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><strong>原生代码：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.android.FlutterActivity</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodCall</span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.engine.FlutterEngine</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span>: <span class="type">FlutterActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通道名称</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">var</span> channel: String = <span class="string">&quot;通道名称&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取推送，发给flutter</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">var</span> payLoad: String? = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取自定义透传参数值</span></span><br><span class="line">        <span class="keyword">val</span> intent: Intent? = getIntent()</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != intent) &#123;</span><br><span class="line">            payLoad = intent.getStringExtra(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNewIntent</span><span class="params">(intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onNewIntent(intent)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取自定义透传参数值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != intent) &#123;</span><br><span class="line">            payLoad = intent.getStringExtra(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">configureFlutterEngine</span><span class="params">(flutterEngine: <span class="type">FlutterEngine</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.configureFlutterEngine(flutterEngine)</span><br><span class="line"></span><br><span class="line">        payLoad = intent.getStringExtra(<span class="string">&quot;payload&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过MethodChannel调用通知flutter开启参数</span></span><br><span class="line">            MethodChannel(</span><br><span class="line">                    flutterEngine.dartExecutor.binaryMessenger,</span><br><span class="line">                    channel</span><br><span class="line">            ).setMethodCallHandler &#123; call: MethodCall, result: MethodChannel.Result -&gt; </span><br><span class="line">                <span class="keyword">if</span> (call.method == <span class="string">&quot;getIntentData&quot;</span>) &#123;</span><br><span class="line">                    result.success(<span class="string">&quot;<span class="variable">$payLoad</span>&quot;</span>)</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err: Exception) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>flutter</code>代码：</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&gt; getIntent() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 设置通道名称</span></span><br><span class="line">    <span class="keyword">const</span> MethodChannel channel = MethodChannel(<span class="string">&quot;通道名称&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span> result = <span class="keyword">await</span> channel.invokeMethod(<span class="string">&quot;getIntentData&quot;</span>);</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; resultData = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&#x27;null&#x27;</span>].contains(result))&#123;</span><br><span class="line">        <span class="keyword">return</span> resultData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">Map</span> data = json.decode(result);</span><br><span class="line">        resultData = data <span class="keyword">as</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exception(<span class="string">&#x27;from-&gt; <span class="subst">$result</span> to Map fail, incorrect format&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> resultData;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>以上就是本篇文章的全部内容，希望对此时此刻的你有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Kotlin </tag>
            
            <tag> 个推推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 chat_flutter 进行聊天记录展示</title>
      <link href="/2023/04/25/202304251430/"/>
      <url>/2023/04/25/202304251430/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近需要实现一个聊天记录的页面展示，在网上发现没有适合自己的，于是自己就造了一个，总体感觉还不赖。</p><p>下面奉上地址、效果图和教程。</p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1a1438c0cb4307842ab5a694ab8650~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90482ce9f8a54399a21c58840edb9d40~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h1><ul><li>github: <a href="https://github.com/xiaorui-23/chat_flutter">https://github.com/xiaorui-23/chat_flutter</a></li><li>gitee: <a href="https://gitee.com/xiaorui-23/flutter_chat">https://gitee.com/xiaorui-23/flutter_chat</a></li><li>pub.dev: <a href="https://pub.dev/packages/chat_flutter">https://pub.dev/packages/chat_flutter</a></li><li>pub.flutter-io.cn: <a href="https://pub.flutter-io.cn/packages/chat_flutter">https://pub.flutter-io.cn/packages/chat_flutter</a> -&gt; 这个是 <code>pub.dev</code>的国内镜像地址。</li></ul><h1 id="上手使用"><a href="#上手使用" class="headerlink" title="上手使用"></a>上手使用</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:chat_flutter/chat_flutter.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> MyApp(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    State&lt;MyApp&gt; createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">    FocusNode? _focusNode;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;ChatViewItem&gt; chatRecordList = [];</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> initState() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initState();</span><br><span class="line">        </span><br><span class="line">        chatRecordList = [</span><br><span class="line">            ChatViewItem(</span><br><span class="line">                itemBody: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            ChatViewItem(</span><br><span class="line">                senderRight: <span class="keyword">false</span>,</span><br><span class="line">                itemBody: <span class="string">&quot;Hi&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> MaterialApp(</span><br><span class="line">            home: Scaffold(</span><br><span class="line">                appBar: AppBar(</span><br><span class="line">                    centerTitle: <span class="keyword">true</span>,</span><br><span class="line">                    <span class="comment">// title: const Text(&#x27;chat_flutter 插件展示案例&#x27;),</span></span><br><span class="line">                ),</span><br><span class="line">                backgroundColor: <span class="keyword">const</span> Color.fromARGB(<span class="number">255</span>, <span class="number">239</span>, <span class="number">238</span>, <span class="number">234</span>),</span><br><span class="line">                body: GestureDetector(</span><br><span class="line">                    onTap: () &#123;</span><br><span class="line">                        <span class="keyword">if</span> (_focusNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">                            _focusNode!.unfocus();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    child: Column(</span><br><span class="line">                        children: [</span><br><span class="line">                            Expanded(</span><br><span class="line">                                child: ChatViewWidget(</span><br><span class="line">                                    isNeedScrollBottom: <span class="keyword">true</span>,</span><br><span class="line">                                    children: chatRecordList,</span><br><span class="line">                                    onCreated: (chatViewWidgetController) &#123;&#125;,</span><br><span class="line">                                )</span><br><span class="line">                            ),</span><br><span class="line">                        ],</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h1><p>我觉得这个东西没有单独写一个文档并部署的必要，所以我就全程写在了上面地址中的<code>README.md</code>中。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这个没有涉及到的原生的代码，全程都是 <code>dart</code>的代码，所以实现其他还是非常简单的。只需要将写好的代码打包发布到<code>pub.dev</code>上就可以了。</p><p>目前只支持<code>text</code>、<code>file</code>、<code>image</code>、<code>audio</code>类型的记录内容展示，后期可能会实现相关的功能。</p><p>以上就是通过<code>chat_flutter</code>插件展示聊天记录的简单全过程啦，各位友友在使用本插件有任何问题都可以联系我，或者在 <code>github</code>、<code>gitee</code> 的仓库上发布<code>issue</code>这些都是没有问题的哦。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 聊天 </tag>
            
            <tag> chat_flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css box-shadow 画图之带有质感的盒子</title>
      <link href="/2023/02/27/202302271246/"/>
      <url>/2023/02/27/202302271246/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>css</code> 众所周知可以做很多的事情，比如：界面效果、特效、独特的样式等。今天给各位朋友带来的是以<code>box-shadow</code>来画一个很有质感效果的一个盒子。</p><p>之前在网上冲浪的时候，发现了这样的一个效果，所以来记录一下。</p><p>下面是实现后的效果图。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8da2317b4824374a87716c1ecf3120f~tplv-k3u1fbpfcp-zoom-1.image" alt="20230226184250.png"></p><p>看着还是不错吧，各位铁子。让我一起往文章下面看看他的实现过程吧。</p><h1 id="box-shadow-主角描述"><a href="#box-shadow-主角描述" class="headerlink" title="box-shadow 主角描述"></a><code>box-shadow</code> 主角描述</h1><h3 id="什么是box-shadow？"><a href="#什么是box-shadow？" class="headerlink" title="什么是box-shadow？"></a>什么是<code>box-shadow</code>？</h3><p>属性用于在元素的框架上添加阴影效果。你可以在同一个元素上设置多个阴影效果，并用逗号将他们分隔开。该属性可设置的值包括阴影的 X 轴偏移量、Y 轴偏移量、模糊半径、扩散半径和颜色。</p><h3 id="box-shadow-属性使用说明"><a href="#box-shadow-属性使用说明" class="headerlink" title="box-shadow 属性使用说明"></a><code>box-shadow</code> 属性使用说明</h3><p> <code>box-shadow</code> 接收 6 个属性值，当存在多个阴影时则每条阴影以<code>,</code>分割，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: 属性A 属性B 属性C 属性D 属性E 属性F,</span><br><span class="line">            属性A 属性B 属性C 属性D 属性E 属性F;</span><br></pre></td></tr></table></figure><p><strong>属性值说明</strong></p><ul><li>A：值为：<code>inset</code>，表示阴影的扩散状态，不填则 向外扩散，常称 外阴影；当存在值并且为<code>inset</code>时，则向内扩散， 常称 内阴影。</li><li>B：X 轴偏移量， 可为 负数。</li><li>C：Y 轴偏移量， 可为 负数。</li><li>D：模糊半径， 可为 负数。</li><li>E：扩散半径， 可为 负数。</li><li>F：阴影颜色。</li></ul><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>全程实现方案以 <code>box-shadow</code> 实现。</p><h2 id="搭建基础布局"><a href="#搭建基础布局" class="headerlink" title="搭建基础布局"></a>搭建基础布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> * &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">171</span>, <span class="number">189</span>, <span class="number">207</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">201</span>, <span class="number">212</span>, <span class="number">223</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3328c17be49440eaaae053c5cd9b16b9~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="添加阴影"><a href="#添加阴影" class="headerlink" title="添加阴影"></a>添加阴影</h2><h3 id="这里我们先添加一条-外阴影"><a href="#这里我们先添加一条-外阴影" class="headerlink" title="这里我们先添加一条 外阴影"></a>这里我们先添加一条 外阴影</h3><p>其 x、y 轴坐标为 15 个像素，然后我们设置它的 模糊半径 为 30 个像素，扩散半径 为 -10 个像素。</p><p>大概成效位置图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7eea1b917634219b70d81970e14b65b~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">201</span>, <span class="number">212</span>, <span class="number">223</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">30px</span> -<span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81d8be7c664344a2bc56d8c2defe74b8~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>扩散半径 为负数时 说明：</p><p>当 扩散半径 为负数的时候，它会根据设定的 值 往回收一定的范围。</p><h3 id="添加一条-白色-内阴影，像-一束光一样照在我们的盒子上"><a href="#添加一条-白色-内阴影，像-一束光一样照在我们的盒子上" class="headerlink" title="添加一条 白色 内阴影，像 一束光一样照在我们的盒子上"></a>添加一条 白色 内阴影，像 一束光一样照在我们的盒子上</h3><p>其 x、y 轴坐标为 20 个像素，然后我们设置它的 模糊半径 为 15 个像素。</p><p>大概成效位置图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1044a04706fe45a68f8ad70b535e4704~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">201</span>, <span class="number">212</span>, <span class="number">223</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">30px</span> -<span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>),</span><br><span class="line">                inset <span class="number">20px</span> <span class="number">20px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>)</span><br><span class="line">                ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe43135ad29e442e8aba1d4a186215cc~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="添加一条-白色-外阴影，来-散射-我们的-光"><a href="#添加一条-白色-外阴影，来-散射-我们的-光" class="headerlink" title="添加一条 白色 外阴影，来 散射 我们的 光"></a>添加一条 白色 外阴影，来 散射 我们的 光</h3><p>其 x、y 轴坐标为 -15 个像素，然后我们设置它的 模糊半径 为 35 个像素。</p><p>大概成效位置图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dae71f403d4b4416a47f52b402e3abf9~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">201</span>, <span class="number">212</span>, <span class="number">223</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">30px</span> -<span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>),</span><br><span class="line">                inset <span class="number">20px</span> <span class="number">20px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>),</span><br><span class="line">                -<span class="number">15px</span> -<span class="number">15px</span> <span class="number">35px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>)</span><br><span class="line">                ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfbe36c6d0834c7297854eec30a07b34~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="添加一条-黑色-内阴影，来-凸显我们的盒子-的边界感"><a href="#添加一条-黑色-内阴影，来-凸显我们的盒子-的边界感" class="headerlink" title="添加一条 黑色 内阴影，来 凸显我们的盒子 的边界感"></a>添加一条 黑色 内阴影，来 凸显我们的盒子 的边界感</h3><p>这里我们需要将这条阴影画在 右下角。</p><p>其 x、y 轴坐标为 -1 个像素，然后我们设置它的 模糊半径 为 10个像素。</p><p>大概成效位置图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45fa4a89d2df47158de2516bfebf60ff~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">201</span>, <span class="number">212</span>, <span class="number">223</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">30px</span> -<span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>),</span><br><span class="line">                inset <span class="number">20px</span> <span class="number">20px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>),</span><br><span class="line">                -<span class="number">15px</span> -<span class="number">15px</span> <span class="number">35px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>),</span><br><span class="line">                inset -<span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)</span><br><span class="line">                ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4138eef7284e4c929207bd6d17dd5709~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h1 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">171</span>, <span class="number">189</span>, <span class="number">207</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">201</span>, <span class="number">212</span>, <span class="number">223</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: </span></span><br><span class="line"><span class="language-css">                <span class="number">15px</span> <span class="number">15px</span> <span class="number">30px</span> -<span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>),</span></span><br><span class="line"><span class="language-css">                inset <span class="number">20px</span> <span class="number">20px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>),</span></span><br><span class="line"><span class="language-css">                -<span class="number">15px</span> -<span class="number">15px</span> <span class="number">35px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>),</span></span><br><span class="line"><span class="language-css">                inset -<span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)</span></span><br><span class="line"><span class="language-css">                ;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上就是 <code>css 画图之质感盒子</code> 这篇文章的全部内容。</p><p>若朋友你有更好的建议或者想法，可以评论在下方，一起探讨哦。</p><p>我是 <a href="https://juejin.cn/user/1196739061361437">桃小瑞</a>，公众号 @ 桃小瑞。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js-结合dat.gui实现界面可视化修改及调试</title>
      <link href="/2023/02/11/202302111244/"/>
      <url>/2023/02/11/202302111244/</url>
      
        <content type="html"><![CDATA[<h2 id="gitee-地址"><a href="#gitee-地址" class="headerlink" title="gitee 地址"></a>gitee 地址</h2><p><code>gitee</code>地址： <a href="https://gitee.com/xiaoruil/study-three.js">gittee地址</a></p><h2 id="本篇目标"><a href="#本篇目标" class="headerlink" title="本篇目标"></a>本篇目标</h2><ul><li>结合dat.gui实现界面可视化修改及调试</li></ul><h2 id="下载-dat-gui"><a href="#下载-dat-gui" class="headerlink" title="下载 dat.gui"></a>下载 dat.gui</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i dat.<span class="property">gui</span></span><br></pre></td></tr></table></figure><h2 id="引入及创建"><a href="#引入及创建" class="headerlink" title="引入及创建"></a>引入及创建</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Dat</span> <span class="keyword">from</span> <span class="string">&quot;dat.gui&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 创建 dat</span></span><br><span class="line"><span class="keyword">const</span> dat = <span class="keyword">new</span> <span class="title class_">Dat</span>.<span class="title function_">GUI</span>();</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这里我是装在一个函数里的，但不影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 添加菜单</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addMenuItem</span> () &#123;</span><br><span class="line">    <span class="comment">// x 轴坐标</span></span><br><span class="line">    dat</span><br><span class="line">    .<span class="title function_">add</span>(cube.<span class="property">position</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    .<span class="title function_">max</span>(<span class="number">10</span>)</span><br><span class="line">    .<span class="title function_">min</span>(<span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">step</span>(<span class="number">0.01</span>)</span><br><span class="line">    .<span class="title function_">name</span>(<span class="string">&#x27;移动x轴&#x27;</span>)</span><br><span class="line">    .<span class="title function_">onChange</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是当前正在移动的x轴&#x27;</span>, value);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">onFinishChange</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是当前移动结束的x轴&#x27;</span>, value);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加菜单</span></span><br><span class="line">addMenuItem ()</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc9cdb32b631420da54a4c1ee1524449~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这样我们设置和退出画布全屏的这个功能就做好了。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标：使用 dat.gui 进行 可视化调试</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Dat</span> <span class="keyword">from</span> <span class="string">&quot;dat.gui&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 创建场景</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 创建 dat</span></span><br><span class="line"><span class="keyword">const</span> dat = <span class="keyword">new</span> <span class="title class_">Dat</span>.<span class="title function_">GUI</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 创建相机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )</span></span><br><span class="line"><span class="comment">        fov — 摄像机视锥体垂直视野角度</span></span><br><span class="line"><span class="comment">        aspect — 摄像机视锥体长宽比</span></span><br><span class="line"><span class="comment">        near — 摄像机视锥体近端面</span></span><br><span class="line"><span class="comment">        far — 摄像机视锥体远端面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 透视相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">    <span class="number">75</span>, <span class="comment">// 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50。</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="comment">// 摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）。</span></span><br><span class="line">    <span class="number">0.1</span>, <span class="comment">// 摄像机的近端面，默认值是0.1。</span></span><br><span class="line">    <span class="number">1000</span> <span class="comment">// 摄像机的远端面，默认值 2000</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 设置大小</span></span><br><span class="line">renderer.<span class="title function_">setSize</span>(</span><br><span class="line">    <span class="number">1000</span>, <span class="comment">// 宽度</span></span><br><span class="line">    <span class="number">500</span> <span class="comment">// 高度</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/// 挂载到页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 添加物体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    width:立方体x轴的长度,</span></span><br><span class="line"><span class="comment">    height:立方体y轴的长度,</span></span><br><span class="line"><span class="comment">    depth:立方体z轴的长度也是深度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 添加材质</span></span><br><span class="line"><span class="comment">// const material = new THREE.MeshBasicMaterial(&#123; color: 0xffff0000 &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 添加材质</span></span><br><span class="line"><span class="keyword">const</span> materials = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    materials.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">0x00ff0000</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 添加网格</span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry, materials );</span><br><span class="line">scene.<span class="title function_">add</span>( cube );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置相机位置</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改场景背景颜色</span></span><br><span class="line">scene.<span class="property">background</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xffffcc99</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 添加 三色坐标轴</span></span><br><span class="line"><span class="keyword">const</span> axesHelper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AxesHelper</span>(<span class="number">20</span>)</span><br><span class="line">scene.<span class="title function_">add</span>( axesHelper )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 requestAnimationFrame 执行动画</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改其旋转的度数，让其每次渲染增加0.01的弧段进行渲染</span></span><br><span class="line">    cube.<span class="property">rotation</span>.<span class="property">x</span> += <span class="number">0.01</span>;</span><br><span class="line">cube.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//scene:前面定义的场景,camera:前面定义的相机</span></span><br><span class="line">    <span class="comment">//renderTarget:渲染的目标默认是是渲染到前面定义的render变量中</span></span><br><span class="line">    <span class="comment">//forceClear:每次绘制之前都将画布的内容给清除,即使自动清除标志autoClear为false,也会清除</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/// 添加菜单</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addMenuItem</span> () &#123;</span><br><span class="line">    <span class="comment">// x 轴坐标</span></span><br><span class="line">    dat</span><br><span class="line">    .<span class="title function_">add</span>(cube.<span class="property">position</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    .<span class="title function_">max</span>(<span class="number">10</span>)</span><br><span class="line">    .<span class="title function_">min</span>(<span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">step</span>(<span class="number">0.01</span>)</span><br><span class="line">    .<span class="title function_">name</span>(<span class="string">&#x27;移动x轴&#x27;</span>)</span><br><span class="line">    .<span class="title function_">onChange</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是当前正在移动的x轴&#x27;</span>, value);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">onFinishChange</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是当前移动结束的x轴&#x27;</span>, value);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="title function_">animate</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加菜单</span></span><br><span class="line">addMenuItem ()</span><br></pre></td></tr></table></figure><h2 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h2><p>根据 <code>BufferGeometry</code> 设置的顶点创建几何矩形</p><h2 id="所有操作实现案例均以上传gitee，地址在文章开篇处。"><a href="#所有操作实现案例均以上传gitee，地址在文章开篇处。" class="headerlink" title="所有操作实现案例均以上传gitee，地址在文章开篇处。"></a>所有操作实现案例均以上传gitee，地址在文章开篇处。</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 2 中实现 CustomRef 方式防抖/节流</title>
      <link href="/2023/02/06/202302062138/"/>
      <url>/2023/02/06/202302062138/</url>
      
        <content type="html"><![CDATA[<p>今天给大家带来的是<code>Vue 2 中的实现 CustomRef 方式防抖/节流</code>这篇文章，前几天利用 <code>customRef</code> 实现了在 vue 3 中的极致防抖/节流的新方式。感兴趣的朋友可以点击 👉 <a href="https://juejin.cn/post/7196150790368215077">Vue 3 中的极致防抖/节流（含常见方式防抖/节流）</a> 进行查看。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端的开发过程中，在涉及到与用户交互的过程中是基本上都是需要处理的，常规操作就是在对应位置加上防抖或者节流。</p><p>加上防抖或者节流的作用：一是为了防止用户频繁操作；二是为了节约一定的服务器资源，减少资源浪费的情况。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之所以写这篇文章是因为啥呢？我写完<a href="https://juejin.cn/post/7196150790368215077">Vue 3 中的极致防抖/节流（含常见方式防抖/节流）</a> 这篇文章后，突然萌发的一个问题，心想既然 <code>vue 3</code> 可以通过 <code>customRef</code> 实现，那 <code>vue 2</code> 是不是也可以这样进行照葫芦画瓢呢？然后我就想了一下，是可以的，然后加上今晚上有空，我就写了一下，虽然没 <code>vue 3</code> 自带的那么好，但还是很好用的。所以特此来分享一下。</p><p>有人说 <code>vue 2</code> 没 <code>ref</code> 和 <code>customRef</code> 啊？</p><p>诶，别忘了有 <code>proxy</code> 和 <code>Object.defineProperty</code> 呀。</p><p>我这里实现的方式就采用的是 <code>proxy</code>, 然后实现后的效果和 <code>customRef</code> 差不多，只是在 <code>template</code> 模板中会带个 <code>value</code> 不能去掉。</p><p>开始吧！</p><h1 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h1><p>我这里直接放代码，每行代码我都加了注释的，方便阅读，当然朋友你有疑问或者说没看懂的地方可以评论 + 私信。</p><h2 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="comment">// data 为数据</span></span><br><span class="line"><span class="comment">// delay 为时间。delay = null 则直接不使用 防抖 方案</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounceRef</span> (data, delay = <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="comment">// 定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">const</span> value = &#123;<span class="attr">value</span>: data&#125;</span><br><span class="line">    <span class="comment">// 创建 proxy 实例</span></span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(value, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回当前值</span></span><br><span class="line">            <span class="keyword">return</span> target[property]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// set 参数说明</span></span><br><span class="line">        <span class="comment">// target：目标, property：属性, newValue 值, receiver：接收者</span></span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, property, newValue, receiver</span>) &#123;</span><br><span class="line">            <span class="comment">// 定时器判断，如果存在则清除当前定时器</span></span><br><span class="line">            <span class="keyword">if</span>(timer != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 清除定时器</span></span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                <span class="comment">// 将 timer 恢复默认值</span></span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 赋值并创建定时器</span></span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 修改值</span></span><br><span class="line">                target[property] = newValue</span><br><span class="line">            &#125;, delay)</span><br><span class="line">            <span class="comment">// 让 set 一直返回 true</span></span><br><span class="line">            <span class="comment">// 不返回 true，则会报下列错误： &#x27;set&#x27; on proxy: trap returned falsish for property &#x27;value&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 判断 delay === null，等于则返回未代理的对象，反之</span></span><br><span class="line">    <span class="keyword">return</span> delay === <span class="literal">null</span> ?value : proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> debounceRef <span class="keyword">from</span> <span class="string">&quot;./utils/debounceRef.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="title function_">debounceRef</span>(<span class="number">0</span>, <span class="number">300</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在页面中使用：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// span</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count.value &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// v-model</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;count.value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在函数中使用：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line">addCount () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>.<span class="property">value</span> += <span class="number">1</span>            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="comment">// data 为数据</span></span><br><span class="line"><span class="comment">// delay 为时间。delay = null 则直接不使用 节流 方案</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttleRef</span> (data, delay = <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="comment">// 定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">const</span> value = &#123;<span class="attr">value</span>: data&#125;</span><br><span class="line">    <span class="comment">// 创建 proxy 实例</span></span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(value, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回当前值</span></span><br><span class="line">            <span class="keyword">return</span> target[property]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// set 参数说明</span></span><br><span class="line">        <span class="comment">// target：目标, property：属性, newValue 值, receiver：接收者</span></span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, property, newValue, receiver</span>) &#123;</span><br><span class="line">             <span class="comment">// 定时器判断</span></span><br><span class="line">            <span class="keyword">if</span>(timer === <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 赋值并创建定时器</span></span><br><span class="line">                timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 修改值</span></span><br><span class="line">                    target[property] = newValue</span><br><span class="line">                    <span class="comment">// 清除定时器</span></span><br><span class="line">                    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                    <span class="comment">// 将 timer 恢复默认值</span></span><br><span class="line">                    timer = <span class="literal">null</span></span><br><span class="line">                &#125;, delay)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 让 set 一直返回 true</span></span><br><span class="line">            <span class="comment">// 不返回 true，则会报下列错误： &#x27;set&#x27; on proxy: trap returned falsish for property &#x27;value&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 判断 delay === null，等于则返回未代理的对象，反之</span></span><br><span class="line">    <span class="keyword">return</span> delay === <span class="literal">null</span> ?value : proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> throttleRef <span class="keyword">from</span> <span class="string">&quot;./utils/throttleRef.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="title function_">throttleRef</span>(<span class="number">0</span>, <span class="number">300</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在页面中使用：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// span</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count.value &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// v-model</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;count.value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在函数中使用：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line">addCount () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>.<span class="property">value</span> += <span class="number">1</span>            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是<code>Vue 2 中的实现 CustomRef 方式防抖/节流</code>这篇文章的全部内容。受<a href="https://juejin.cn/post/7196150790368215077">Vue 3 中的极致防抖/节流（含常见方式防抖/节流）</a>中利用 <code>customRef</code>的启发。</p><p>希望本篇文章对朋友你在使用 <code>vue 2</code>的过程中有所帮助。若篇中有不足之处或你有不一样的想法或见解，欢迎在评论区留言 + 关注。</p><p>我是<a href="https://juejin.cn/user/1196739061361437">桃小瑞</a>，公众号 @ 桃小瑞。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 3 中的极致防抖/节流（含常见方式防抖/节流）</title>
      <link href="/2023/02/04/202302041505/"/>
      <url>/2023/02/04/202302041505/</url>
      
        <content type="html"><![CDATA[<p>各位朋友你们好呀。今天是立春，明天就是正月十五元宵节了，这种立春 + 元宵相隔的时候，可是很难遇到的，百年中就只有几次。在这提前祝大家元宵快乐。</p><p>今天给大家带来的是<code>Vue 3 中的极致防抖/节流（含常见方式防抖/节流）</code>这篇文章，文章中不仅会讲述原来使用的防抖或节流方式，还会带来新的一种封装方式，使用起来更简单、更清晰。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端的开发过程中，在涉及到与用户交互的过程中是基本上都是需要处理的，常规操作就是在对应位置加上防抖或者节流。</p><p>加上防抖或者节流的作用：一是为了防止用户频繁操作；二是为了节约一定的服务器资源，减少资源浪费的情况。</p><h1 id="防抖或节流原理"><a href="#防抖或节流原理" class="headerlink" title="防抖或节流原理"></a>防抖或节流原理</h1><h2 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h2><p>如果用户多次频繁操作以最后一次为准，当然也可以以第一次为准，进行数据更新或者网络资源请求，以消除冗余的操作，或者减少一定的请求资源浪费。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span> (fn, delay = <span class="number">300</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args)</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">debounce</span>(<span class="function">()=&gt;</span> count += <span class="number">1</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="节流（throttle-）"><a href="#节流（throttle-）" class="headerlink" title="节流（throttle ）"></a>节流（throttle ）</h2><p>在一定时间范围内，用户触发多次只会执行一次以达到防止用户频繁操作的目的。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span> (fn, delay = <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(timer == <span class="literal">null</span>)&#123;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">throttle</span>(<span class="function">()=&gt;</span> count += <span class="number">1</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul><li>vue 3</li><li>vite</li></ul><h1 id="新封装"><a href="#新封装" class="headerlink" title="新封装"></a>新封装</h1><p>这里我分两个模块来讲述。一个是防抖；另一个是节流。</p><p>虽然这两个差别不是很大，但还是有区别的。上车，兄弟们。🚗🚗🚗</p><h2 id="防抖（debounce）-1"><a href="#防抖（debounce）-1" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h2><p>先看常见封装内容。</p><h3 id="常见封装-1"><a href="#常见封装-1" class="headerlink" title="常见封装-1"></a>常见封装-1</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span> (fn, delay = <span class="number">300</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args)</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addCount = <span class="title function_">debounce</span>(<span class="function">()=&gt;</span> count.<span class="property">value</span> += <span class="number">1</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="常见封装-2"><a href="#常见封装-2" class="headerlink" title="常见封装-2"></a>常见封装-2</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span> (fn, delay = <span class="number">1000</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(timer != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(fn, delay)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params"></span>) =&gt; <span class="title function_">debounce</span>(<span class="function">()=&gt;</span> count.<span class="property">value</span> += <span class="number">1</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="新封装-1"><a href="#新封装-1" class="headerlink" title="新封装"></a>新封装</h3><p>这里我们需要借助 <code>vue 3</code> 中的 <code>customRef</code> 来实现我们的新方式。这里我就不具体写了。我直接在每行代码上面添加注释。我相信朋友你是能看懂的。🌹🌹🌹</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 vue 中引入 customRef 和 ref</span></span><br><span class="line"><span class="keyword">import</span> &#123; customRef, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// data 为创建时的数据</span></span><br><span class="line"><span class="comment">// delay 为防抖时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounceRef</span> (data, delay = <span class="number">300</span>)&#123;</span><br><span class="line">    <span class="comment">// 创建定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 对 delay 进行判断，如果传递的是 null 则不需要使用 防抖方案，直接返回使用 ref 创建的。</span></span><br><span class="line">    <span class="keyword">return</span> delay == <span class="literal">null</span> </span><br><span class="line">        ? </span><br><span class="line">        <span class="comment">// 返回 ref 创建的</span></span><br><span class="line">        <span class="title function_">ref</span>(data)</span><br><span class="line">        : </span><br><span class="line">        <span class="comment">// customRef 中会返回两个函数参数。一个是：track 在获取数据时收集依赖的；一个是：trigger 在修改数据时进行通知派发更新的。</span></span><br><span class="line">        <span class="title function_">customRef</span>(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                get () &#123;</span><br><span class="line">                    <span class="comment">// 收集依赖</span></span><br><span class="line">                    <span class="title function_">track</span>()</span><br><span class="line">                    <span class="comment">// 返回当前数据的值</span></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                &#125;,</span><br><span class="line">                set (value) &#123;</span><br><span class="line">                    <span class="comment">// 清除定时器</span></span><br><span class="line">                    <span class="keyword">if</span>(timer != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                        timer = <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 创建定时器</span></span><br><span class="line">                    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改数据</span></span><br><span class="line">                        data = value;</span><br><span class="line">                        <span class="comment">// 派发更新</span></span><br><span class="line">                        <span class="title function_">trigger</span>()</span><br><span class="line">                    &#125;, delay)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">debounceRef</span>(<span class="number">0</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数中使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  count.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v-model 中使用</span></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;count&quot;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h2><p>我们还是一样，先看常见封装内容。</p><h3 id="常见封装-1-1"><a href="#常见封装-1-1" class="headerlink" title="常见封装-1"></a>常见封装-1</h3><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span> (fn, delay = <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(timer == <span class="literal">null</span>)&#123;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params"></span>) =&gt; <span class="title function_">throttle</span>(<span class="function">()=&gt;</span> count.<span class="property">value</span> += <span class="number">1</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="常见封装-2-1"><a href="#常见封装-2-1" class="headerlink" title="常见封装-2"></a>常见封装-2</h3><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span> (fn, delay = <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer == <span class="literal">null</span>)&#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args)</span><br><span class="line">    </span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-6"><a href="#使用-6" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addCount = <span class="title function_">throttle</span>(<span class="function">()=&gt;</span> count.<span class="property">value</span> += <span class="number">1</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="新封装-2"><a href="#新封装-2" class="headerlink" title="新封装"></a>新封装</h3><p>节流和防抖在封装和使用上大同小异。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data 为创建时的数据</span></span><br><span class="line"><span class="comment">// delay 为节流时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttleRef</span> (data, delay = <span class="number">300</span>)&#123;</span><br><span class="line">    <span class="comment">// 创建定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 对 delay 进行判断，如果传递的是 null 则不需要使用 节流方案，直接返回使用 ref 创建的。</span></span><br><span class="line">    <span class="keyword">return</span> delay == <span class="literal">null</span> </span><br><span class="line">        ? </span><br><span class="line">        <span class="comment">// 返回 ref 创建的</span></span><br><span class="line">        <span class="title function_">ref</span>(data)</span><br><span class="line">        : </span><br><span class="line">        <span class="comment">// customRef 中会返回两个函数参数。一个是：track 在获取数据时收集依赖的；一个是：trigger 在修改数据时进行通知派发更新的。</span></span><br><span class="line">        <span class="title function_">customRef</span>(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                get () &#123;</span><br><span class="line">                    <span class="comment">// 收集依赖</span></span><br><span class="line">                    <span class="title function_">track</span>()</span><br><span class="line">                    <span class="comment">// 返回当前数据的值</span></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                &#125;,</span><br><span class="line">                set (value) &#123;</span><br><span class="line">                    <span class="comment">// 判断</span></span><br><span class="line">                    <span class="keyword">if</span>(timer == <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="comment">// 创建定时器</span></span><br><span class="line">                        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                            <span class="comment">// 修改数据</span></span><br><span class="line">                            data = value;</span><br><span class="line">                            <span class="comment">// 派发更新</span></span><br><span class="line">                            <span class="title function_">trigger</span>()</span><br><span class="line">                            <span class="comment">// 清除定时器</span></span><br><span class="line">                            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                            timer = <span class="literal">null</span></span><br><span class="line">                        &#125;, delay)</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-7"><a href="#使用-7" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">debounceRef</span>(<span class="number">0</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数中使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  count.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v-model 中使用</span></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;count&quot;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上便是<code>Vue 3 中的极致防抖/节流（含常见方式防抖/节流）</code>这篇文章的全部内容，如有不足或朋友你有更好的方式或者其他独到的见解，欢迎评论 + 私信。</p><p>当然朋友你又学到了一招可以点赞 + 关注 + 评论哦。</p><p>希望本篇文章对正在阅读的朋友你有所帮助。</p><p>想了解<code>vue 2</code>中如何实现相同方案的朋友可以点击这里 👉 <a href="https://juejin.cn/post/7197025946918862904">Vue 2 中的实现 CustomRef 方式防抖/节流</a></p><p>我是桃小瑞，公众号 @ 桃小瑞。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发服务器中的 Proxy 代理跨域实现原理解读</title>
      <link href="/2023/02/01/202302012310/"/>
      <url>/2023/02/01/202302012310/</url>
      
        <content type="html"><![CDATA[<p>开启掘金成长之旅！这是我参与「掘金日新计划 · 2 月更文挑战」的第 1 天，<a href="https://juejin.cn/post/7194721470063312933" title="https://juejin.cn/post/7194721470063312933">点击查看活动详情</a></p><p>各位朋友你们好，我是<a href="https://juejin.cn/user/1196739061361437">桃小瑞</a>。在这给大家拜个晚年，祝各位朋友新年快乐。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端的开发过程中，尤其是在浏览器环境下，跨域是个绕不开的话题，相信每个前端都会涉及到这个问题，记住的就直接手敲解决跨域问题，记不住的就只能问度娘了。😂😂</p><p>即将登场的是我们的二号人物，跨域。👇👇👇</p><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="一、什么是跨域？"><a href="#一、什么是跨域？" class="headerlink" title="一、什么是跨域？"></a>一、什么是跨域？</h2><p>跨域是指在浏览器环境中存在的一种<code>资源同源保护策略</code>。当页面使用<code>ajax</code>/<code>fetch</code>进行网络请求或者页面进行资源请求时，<code>网络协议</code>、<code>域名</code>、<code>端口</code>不一致时就会触发浏览器的<code>同源策略保护</code>机制。</p><p>浏览器就会在控制台输出像下面图片中的内容。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e5e22cc90bc48a787f71dafca10c3a9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="二、解决跨域有哪些途径呢？"><a href="#二、解决跨域有哪些途径呢？" class="headerlink" title="二、解决跨域有哪些途径呢？"></a>二、解决跨域有哪些途径呢？</h2><p>见招拆招，有限制就有对策。目前有很多可以解决跨域的问题，各位看官请移步往下看👇👇👇</p><h3 id="常见的解决跨域方式"><a href="#常见的解决跨域方式" class="headerlink" title="常见的解决跨域方式"></a>常见的解决跨域方式</h3><h4 id="1、-JSONP"><a href="#1、-JSONP" class="headerlink" title="1、 JSONP"></a>1、 JSONP</h4><p>利用<code>script</code>标签没有跨域的限制，从而实现跨域。</p><blockquote><p>注：<code>JSONP</code>仅支持<code>get</code>请求，并且需要后端的支持。</p></blockquote><h4 id="2、-CORS（-Cross-Origin-Resource-Sharing-）"><a href="#2、-CORS（-Cross-Origin-Resource-Sharing-）" class="headerlink" title="2、 CORS（ Cross-Origin Resource Sharing ）"></a>2、 CORS（ Cross-Origin Resource Sharing ）</h4><p>利用 <code>CORS</code>实现跨域，后端在请求的响应请求头上添加<code>Access-Control-Allow-Origin</code>属性，并设置指定的站点值，或者设置为<code>*</code>。</p><blockquote><p>注：需要前后端同时支持。</p></blockquote><h4 id="3、-nignx"><a href="#3、-nignx" class="headerlink" title="3、 nignx"></a>3、 nignx</h4><p><code>nignx 反向代理</code></p><h4 id="4、websocket"><a href="#4、websocket" class="headerlink" title="4、websocket"></a>4、websocket</h4><p>利用<code>websocket</code>，实现浏览器与服务器的全双工通信，同时允许跨域通讯。</p><h4 id="5、iframe"><a href="#5、iframe" class="headerlink" title="5、iframe"></a>5、iframe</h4><p>iframe 搭配 <code>document.domain</code>、<code>location.hash</code>、<code>window.name</code>三种方式实现跨域。</p><h4 id="6、node作为中间件代理"><a href="#6、node作为中间件代理" class="headerlink" title="6、node作为中间件代理"></a>6、node作为中间件代理</h4><p>启用一个本地的<code>node</code>服务器充当中间件，进行跨域处理。</p><h3 id="工作中常常用方式"><a href="#工作中常常用方式" class="headerlink" title="工作中常常用方式"></a>工作中常常用方式</h3><p>在工作中常见的跨域使用方式有<code>nignx 反向代理</code>、<code>CROS</code>、<code>node 中间代理</code>。</p><p>为什么说<code>node 中间代理</code>也是常用的方式呢？都没看见使用过呀。来来来，此时此刻就需要涉及到我们今天的主人公了。</p><h2 id="三、跨域疑问"><a href="#三、跨域疑问" class="headerlink" title="三、跨域疑问"></a>三、跨域疑问</h2><h3 id="跨域的时候，请求是否是发出去了的呢？数据我们是否又收到了呢？"><a href="#跨域的时候，请求是否是发出去了的呢？数据我们是否又收到了呢？" class="headerlink" title="跨域的时候，请求是否是发出去了的呢？数据我们是否又收到了呢？"></a>跨域的时候，请求是否是发出去了的呢？数据我们是否又收到了呢？</h3><p>答案：</p><p>跨域的时候，请求是已经发出去了，而且后端已经将数据返给我们了的，只是被浏览器劫持了，我们拿不到而已。</p><p>相信你看完下面的模拟对话就能懂了。</p><ul><li>前端：发送请求给后端。</li><li>后端：收到请求，数据返给你了。</li><li>浏览器：你后端这所在地（<code>指：协议、域名、端口</code>）和我所在地不对呀，肯定不可信，拦截掉，为了不让前端云里雾里的，我给它报个异常吧。</li><li>我们的数据就这样被浏览器所拦截，不给我们了。</li><li>…</li></ul><h1 id="node-中间代理"><a href="#node-中间代理" class="headerlink" title="node 中间代理"></a>node 中间代理</h1><p><code>node 中间代理</code> 它还有另外一个名字，叫 <code>Proxy 代理跨域</code>。主角闪亮登场。👏👏</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>我们一起来回顾一下它的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://locahost:3000&#x27;</span>, <span class="comment">// 目标地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否换源， true 换源</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>), <span class="comment">// 替换</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>我这里使用的环境为：</p><ul><li>vue</li><li>vite</li></ul><p>其他的脚手架等原理都差不多。环境对我们来说都不是事，因为我们需要扒的是它的原理。</p><p>现在我们步入正题。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>我们现在来启动我们的项目。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run dev</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43c3b1279c23468b8258359747cfd407~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们发现，vite 给我们启动了一个本地的 node 服务器，地址为：<a href="http://127.0.0.1:5173/%E3%80%82">http://127.0.0.1:5173/。</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2842a5d5d9484305a628290ea43f1878~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>然后现在我们来发个请求试试。</p><p>我们先把 <code>vite.config.js</code>中的代理关掉。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6d553171ae648f78a32570a1aa6f69b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们在<code>onMounted</code>中添加请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:5888/api&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此刻我们打开我们的控制台，惊喜来了。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f1cdda15e01409fa3ee0effa2d30b65~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h2><p>我们现在放开<code>vite.config.js</code>中的代理注释。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b27ccbf1439d4809b62ae8b22a3fad11~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>再来看看</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69bee9fb0da540cc8eed02655c71152c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f3b511878bc4b39b33c4ecb60815735~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>在 vite 启动的时候，创建了一个开发服务器，然后根据我们进行的开发服务器配置进行 node 中间件代理。vite 根据配置和我们请求的 api 地址去请求对应的 api地址，我们怎么把参数给它的，它就怎么给目标地址；然后目标地址怎么给 vite 的，vite 就原模原样的给我们。可能我说的有点绕，我们一起看一下下面的图。</p><p>下图为 node 开发服务 代理请求流程图。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b8fbec31b424b888e50426c1d492df7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>为什么 node 就可以解决跨域呢？</p><p>因为 node 不是运行在浏览器中的东西，所以没有跨域这种问题。</p><h1 id="温馨提醒"><a href="#温馨提醒" class="headerlink" title="温馨提醒"></a>温馨提醒</h1><p>跨域，也就是同源策略只存在于浏览器环境。如：chrome、ie、浏览器、webview、使用了浏览器内核的环境。在app、小程序等平台中是没有这个的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是<code>前端 Proxy 代理跨域实现原理解读</code>的全部内容。希望本篇文章对你有所帮助。</p><p>如有不足或你有其他的见解欢迎留在评论区。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现高亮划词</title>
      <link href="/2022/12/22/202212221030/"/>
      <url>/2022/12/22/202212221030/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前端实现文字高亮划词。这个功能一般都是一些类似笔记产品上才会出现的一个功能，通过添加指定的关键字进行高亮显示。我这两天也做了一个出来，名字叫<code>ohlight</code>，实现的方式不是网上那些复杂的方式，很简单的一个方式，感兴趣的朋友可以看下方地址。</p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><ul><li>gitee: <a href="https://gitee.com/xiaoruil/o-light">点击前往</a></li><li>github: <a href="https://github.com/xiaoruil/o-light">点击前往</a></li><li>npm: <a href="https://www.npmjs.com/package/ohlight">点击前往</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pnpm </span></span><br><span class="line">pnpm i ohlight</span><br><span class="line"></span><br><span class="line"><span class="comment">// npm</span></span><br><span class="line">npm i ohlight</span><br><span class="line"></span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn add ohlight</span><br></pre></td></tr></table></figure><h1 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h1><p>我们先看看以下使用效果，高亮样式是全场支持自定义的哈，这里我使用的是默认的样式。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5106e6d7a4c48a5b56739c4493cd94e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>采用<code>web Components</code>实现组件，这样就可以直接跨框架、无框架运行了，简直高效一套代码运行任何框架。感兴趣的朋友可以看<a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components">MDN</a>。<br>高亮划词的地方也很简单，不要看文件有点多，实际都是打辅助的，核心的就只有下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> keyword <span class="keyword">of</span> keywords)&#123;</span><br><span class="line">    c = c.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(keyword, <span class="string">&#x27;g&#x27;</span>), <span class="string">`&lt;mark style=&quot;<span class="subst">$&#123;s&#125;</span>&quot;&gt;<span class="subst">$&#123;keyword&#125;</span>&lt;/mark&gt;`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们开始实现这个组件吧，本文将采用和<code>ohlight</code>组件一样的方式。</p><p>本篇文章是基于<code>web Components</code>进行编写，还不了解的朋友可以去看一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components">MDN</a>。</p><p>注：本文会简单实现<code>ohlight</code>组件的亮词功能，其他功能大家可以去<code>gitee</code>和<code>github</code>上看源码。👏欢迎大家star、issue等。</p><h2 id="搭建基础框架"><a href="#搭建基础框架" class="headerlink" title="搭建基础框架"></a>搭建基础框架</h2><p>我们直接新建一个<code>OHLight</code>的类，然后注册，组件内部进行挂载。这里我们写<code>OHLight</code>类的时候需要继承<code>HTMLElement</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OHLight</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;o-hlight&#x27;</span>, <span class="title class_">OHLight</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">OHLight</span></span><br></pre></td></tr></table></figure><p>然后在<code>constructor</code>中需要调用<code>super()</code>，这一步必不可少。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在类中添加一个<code>renderer</code>渲染函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renderer () &#123;&#125;</span><br></pre></td></tr></table></figure><p>我们的基础框架就搭建好了，下面是目前步骤的完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OHLight</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    renderer () &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;o-hlight&#x27;</span>, <span class="title class_">OHLight</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">OHLight</span></span><br></pre></td></tr></table></figure><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>这一步我们需要将我们的组件渲染在页面上。这一步的操作全程都在<code>renderer</code>方法中。</p><p>我们先让我们的组件可以根据<code>dom</code>操作而操作。这里当<code>mode</code>为<code>open</code>是可以操作的，为<code>closed</code>则该<code>dom</code>不可操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">renderer () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建一个<code>div</code>盒子然后并挂载到我们的<code>shadowRoot</code>影子节点上，当然你也可以创建其他的标签；并给他插入内容；然后添加组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">node.<span class="property">innerHTML</span> = <span class="string">&#x27;桃小瑞&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">shadowRoot</span>?.<span class="title function_">appendChild</span>(node)</span><br></pre></td></tr></table></figure><p>可以在<code>constructor</code>中调用我们的<code>renderer</code>方法。</p><p>接下来就到了奇迹的时刻了，我们引入组件，并在页面上使用。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e409fb4ce512489ba13c7640f80b5a70~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/065e6c3b11c84523bbd31029f63a4f9e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>此时的所有的完整代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OHLight</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">renderer</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    renderer () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        node.<span class="property">innerHTML</span> = <span class="string">&#x27;桃小瑞&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">shadowRoot</span>?.<span class="title function_">appendChild</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;o-hlight&#x27;</span>, <span class="title class_">OHLight</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">OHLight</span></span><br></pre></td></tr></table></figure><p>页面上就会出现我们的组件内容。</p><h2 id="获取属性并设置高亮"><a href="#获取属性并设置高亮" class="headerlink" title="获取属性并设置高亮"></a>获取属性并设置高亮</h2><p>这一步我们将获取我们传递的文本内容、关键词进行高亮显示。</p><p>我们以<code>content</code>属性来做我们的文本内容传参。</p><p>我们需要获取我们组件中的<code>content</code>属性。并通过<code>innerHTML</code>将内容插入到页面中去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content = <span class="variable language_">this</span>.<span class="property">attributes</span>.<span class="property">content</span></span><br><span class="line">node.<span class="property">innerHTML</span> = <span class="string">`<span class="subst">$&#123;content.value&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>组件内容：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58dd8afe4a314c83a375fb146551b3d5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>效果图：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70a3170398f54196a83215c0dede26f5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这里我们需要将<code>constructor</code>中调用<code>renderer</code>的方法移动到<code>connectedCallback</code>生命钩子内，不然会拿不到内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">connectedCallback</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">renderer</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面上已经渲染出来了我们的内容。现在我们进行关键词获取 + 渲染。</p><p>跟我们获取内容是一样的方法，我们获取<code>keywords</code>关键词列表。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> keywords = <span class="variable language_">this</span>.<span class="property">attributes</span>.<span class="property">keywords</span></span><br></pre></td></tr></table></figure><p>现在我们已经获取到了关键词列表，我们对内容进行检查和替换。</p><p>声明一个<code>handle</code>的方法，并将文本内容和关键字传进去，用来处理我们的高亮词汇。这个方法返回的内容就是我们已经处理好的文本内容，可以直接插入显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="title function_">handle</span>((content.<span class="property">value</span> || <span class="string">&#x27;&#x27;</span>), (keywords.<span class="property">value</span> || <span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">handle (content, keywords) &#123;</span><br><span class="line">    <span class="keyword">let</span> keywordList = []</span><br><span class="line">    <span class="keyword">if</span>(keywords.<span class="title function_">includes</span>(<span class="string">&#x27;,&#x27;</span>))&#123;</span><br><span class="line">        keywordList = keywords.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        keywordList = [keywords]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们在<code>handle</code>方法中进行了关键词组处理，多个关键词使用<code>(,)逗号</code>隔开，然后进行判断、切割。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> keyword <span class="keyword">of</span> keywordList)&#123;</span><br><span class="line">            c = c.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(keyword, <span class="string">&#x27;g&#x27;</span>), <span class="string">`&lt;mark&gt;<span class="subst">$&#123;keyword&#125;</span>&lt;/mark&gt;`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们对已经处理好的关键词进行循环，在循环的过程中我们使用<code>new RegExp(keyword, &#39;g&#39;)</code>正则进行替换，将获取到的关键字替换为用<code>mark</code>标签装起来的字符串<code>&lt;mark&gt;$&#123;keyword&#125;&lt;/mark&gt;</code>。</p><p>看一下效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1b3e0d7773948e6a49917d6fbf5671f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>组件内容：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/868611ff4cd442f5a494c3e6e80162dd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这样我们就实现好了。</p><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OHLight</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    renderer () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> content = <span class="variable language_">this</span>.<span class="property">attributes</span>.<span class="property">content</span></span><br><span class="line">        <span class="keyword">let</span> keywords = <span class="variable language_">this</span>.<span class="property">attributes</span>.<span class="property">keywords</span></span><br><span class="line"></span><br><span class="line">        node.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="title function_">handle</span>((content.<span class="property">value</span> || <span class="string">&#x27;&#x27;</span>), (keywords.<span class="property">value</span> || <span class="string">&#x27;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">shadowRoot</span>?.<span class="title function_">appendChild</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle (content, keywords) &#123;</span><br><span class="line">        <span class="keyword">let</span> c = content</span><br><span class="line">        <span class="keyword">let</span> keywordList = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(keywords.<span class="title function_">includes</span>(<span class="string">&#x27;,&#x27;</span>))&#123;</span><br><span class="line">            keywordList = keywords.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            keywordList = [keywords]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> keyword <span class="keyword">of</span> keywordList)&#123;</span><br><span class="line">            c = c.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(keyword, <span class="string">&#x27;g&#x27;</span>), <span class="string">`&lt;mark&gt;<span class="subst">$&#123;keyword&#125;</span>&lt;/mark&gt;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当自定义元素第一次被连接到文档 DOM 时被调用</span></span><br><span class="line">    <span class="title function_">connectedCallback</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">renderer</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;o-hlight&#x27;</span>, <span class="title class_">OHLight</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">OHLight</span></span><br></pre></td></tr></table></figure><h2 id="生命钩子说明补充"><a href="#生命钩子说明补充" class="headerlink" title="生命钩子说明补充"></a>生命钩子说明补充</h2><p><code>web components</code> 有四个状态的生命钩子，分别如下：</p><ul><li><code>connectedCallback</code>：当自定义元素第一次被连接到文档 DOM 时被调用；</li><li><code>disconnectedCallback</code>：当自定义元素与文档 DOM 断开连接时被调用；</li><li><code>adoptedCallback</code>：当自定义元素被移动到新文档时被调用；</li><li><code>attributeChangedCallback</code>：当自定义元素的一个属性被增加、移除或更改时被调用。</li></ul><p>我们想实现自定义样式的话直接给<code>mark</code>标签添加样式就可以了。</p><p>关于响应式的问题，<code>ohlight</code>是支持响应式的修改内容/关键字的，这里我是使用的<code>attributeChangedCallback</code>进行监听。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>以上就是前端实现高亮划词的一个文章。</p><p>欢迎大家下载使用<a href="https://www.npmjs.com/package/ohlight"><code>ohlight 高亮划词组件</code></a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Web Components </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 3 中的 setup</title>
      <link href="/2022/12/19/202212191621/"/>
      <url>/2022/12/19/202212191621/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着<code>vue 3</code>的发布，新增和大改了很多的东西，像<code>响应式</code>的修改、<code>option Api</code>改为<code>components Api</code>、<code>setup</code>语法糖等等，<code>vue 3</code>的发布可以说是令人不得不爱❤️，相较于<code>v2</code>我是比较喜欢<code>v3</code>的。言归正传，本文的主人公不是别的，是<code>v3</code>中使用起来超nice的<code>setup</code>语法糖。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://cn.vuejs.org/api/sfc-script-setup.html#script-setup"><code>setup</code></a> 是在<code>单文件组件 (SFC)</code> 中使用<code>组合式 API</code> 的编译时的一个<code>语法糖</code>。当同时使用 <code>SFC</code> 与<code>组合式 API</code> 时该语法是默认推荐。</p><p><strong>优势：</strong></p><ul><li>更少的样板内容，更简洁的代码。</li><li>能够使用纯<code>TypeScript</code>声明<code>props</code>和自定义事件。</li><li>更好的运行时性能 (其模板会被编译成同一作用域内的渲染函数，避免了渲染上下文代理对象)。</li><li>更好的 IDE 类型推导性能 (减少了语言服务器从代码中抽取类型的工作)。</li></ul><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其实在<code>v3</code>刚出来的时候还并不能这样写，他需要像下面这样写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    setup () &#123;</span><br><span class="line">        <span class="keyword">const</span> name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>从<code>3.2</code>的版本开始后我们就可以像最开始那样在<code>SFC</code>但文件中写了。这样写真的超方便，我们不用在<code>return</code>出去我们的方法和变量，但需要注意的是<code>setup</code>这玩意中是没有<code>this</code>这种东西的，为啥呢？我们看一下<code>vue</code>的生命周期图。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4c1cd57ea5e47c1acae394ff964d18a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们从上面的图中可以发现，<code>setup</code>在<code>renderer</code>后就会执行，此时<code>vue</code>还没有进行<code>init Options Api</code>，也就是组件实例未被创建/解析前，所以是不存在<code>this</code>的。</p><h1 id="相关拓展"><a href="#相关拓展" class="headerlink" title="相关拓展"></a>相关拓展</h1><h2 id="Components-注册使用"><a href="#Components-注册使用" class="headerlink" title="Components 注册使用"></a>Components 注册使用</h2><p>在之前的版本我们需要引入组件并且注册后才可以在<code>template</code>模版中使用，但在<code>setup</code>中，我们无需注册，只需要引入就可以使用。但有个弊端就是，无法重命名组件；组件名需要以大驼峰的形式；如果想要重命名组件名字的话只能写两个<code>script</code>标签来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&quot;./components/child.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/501da9b4a6614612ada1163a9a7bb95e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p><code>props</code>这一块和<code>vue2</code>的区别不是很大，父组件还是一样，只是子组件有些变化。我们在子组件中需要通过<code>defineProps</code>来声明我们父组件可以传递的<code>props</code>，然后我们在子组件中进行使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是子组件: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">message</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb1a814ba87a49229ecdf36da00dafa3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这里之所以要声明一个变量来接收<code>defineProps</code>，是因为<code>template</code>模版可以为我们自动解析，但<code>script</code>标签内并不会，如果我们需要在<code>script</code>内使用的话是用不到的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb09e7017d504d969f1a4dab17dad064~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>但我们如果通过接收<code>defineProps</code>的变量来获取是可以获取到的。这里需要注意的是跟<code>v2</code>一样，<code>props</code>里的值子组件不可更改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">message</span>)</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2841402fb3745e99b6d4942c8b3adac~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h2><p><code>emit</code>事件注册。跟<code>props</code>一样，需要通过<code>defineEmits</code>来注册。<code>emit</code> + <code>props</code>是<code>vue</code>中常用的一种父子组件通信方式。</p><p>该方法接受一个事件名的数组，在调用时进行指定事件名和回调参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;init&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;init&#x27;</span>, <span class="number">1222</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">message</span>=<span class="string">&quot;我是父组件传递的 msg 值&quot;</span> @<span class="attr">init</span>=<span class="string">&quot;init&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&quot;./components/child.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params">event</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6279db34e3f04434a225ffbb38267890~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>此<code>ref</code>非彼<code>ref</code>，这里指的是<code>ref(引用)</code>。别搞混了，各位客官。</p><p>通过<code>ref</code>引用我们可以很便捷的操作和获取子组件内的变量或者方法。我们需要像<code>ref</code>响应式一样声明，然后在子组件上挂载使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&quot;myChild&quot;</span> <span class="attr">message</span>=<span class="string">&quot;我是父组件传递的 msg 值&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&quot;./components/child.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> myChild = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>一起猜猜下面代码打印出来的内容是啥。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myChild.<span class="property">value</span>.<span class="property">name</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>到了万众瞩目的时刻了，公布期待已久的结果，看看你有没有猜对。</p><p>答案是：<code>undefined</code>。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0af229b12a4d407ca72477261ca03cda~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>为了让你们死心，给你看看子组件的内容，我是没改过的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是子组件: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">message</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> name = <span class="string">&#x27;我是子组件：张三&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里我们就不得不谈到下面的<code>defineExpose</code>了，各位看官一起往下走起。</p><h2 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h2><p>在<code>vue3</code>中，我们子组件中的东西需要让父组件调用的话，都需要暴露出去，才可以让外部调用，否则就会向上面的那个例子一样。ei，这里需要插一嘴，暴露给<code>template</code>和外部不是同一个东西哦。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">    name</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在我们再来看看，他是否还是<code>undefined</code>了呢？</p><p>叮咚，公布啦！它不再是<code>undefined</code>了。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/432a1ad842e842f2b2ce3489058aa7bb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>下图是写本篇文章的一个环境列举。</p><ul><li><code>vue</code>：<code>3.2.45</code></li><li><code>vite</code>：<code>4.0.2</code></li><li><code>@vitejs/plugin-vue</code>：<code>4.0.0</code></li></ul><p>以上就是<code>vue3</code>中的<code>setup</code>相关的一些描述，若有不足欢迎各位大佬/朋友指正、评论。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别在让你的 await Streaking 了</title>
      <link href="/2022/12/13/202212131656/"/>
      <url>/2022/12/13/202212131656/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们现在在请求接口的过程中，已经习惯了<code>async/await</code>的写法，已经逐渐的代替了<code>promise</code>的写法，但我们在开发的过程中，都是混用的状态，当你体验<code>async/await</code>过的好，就会爱不释手。</p><p><code>async/await</code>我们要拒绝 Streaking，啥叫 Streaking，我们看个代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一旦失败我们控制台就会出现报错，一个接口就是一个红色的。</p><p>此时，你想起我们还有<code>try...catch...</code>，可你知道吗？<code>try...catch...</code>并不是万能的，有时候他捕获不到异步的错误，再有就是每个<code>async/await</code>你都加一个<code>try...catch...</code>，一个项目中，并可能只出现一个借口调用的地方吧，每个都加，就请问你累不累🥱。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="优化async-await"><a href="#优化async-await" class="headerlink" title="优化async/await"></a>优化<code>async/await</code></h2><p>经过上面一说，那我还不如用回<code>promise</code>。当你看到一长串的<code>.then</code>的时候你好维护吗？不烦吗？</p><p>那你说我们应该怎么办？我们需要从源头入手。</p><p>我们现在都会先基于<code>axios/fetch</code>进行二次封装对不？有时候我们还会三次封装对吧？这个封装就是我们的源头。</p><p>我们先看个<code>promise</code>的封装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">option = &#123;&#125;</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">get</span>(option.<span class="property">url</span>).<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(response)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;./demo.json&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p>常见的封装就长上面这样，这样除了方便传参数，和没封有啥区别？</p><p>我的答案是没区别，那我们应该怎么来封装呢？</p><p>看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> =  <span class="keyword">async</span> (<span class="params">option = &#123;&#125;</span>)  =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [<span class="literal">null</span>, <span class="literal">null</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        axios.<span class="title function_">get</span>(option.<span class="property">url</span>).<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            result[<span class="number">0</span>] = response</span><br><span class="line">            <span class="title function_">resolve</span>(response)</span><br><span class="line"></span><br><span class="line">        &#125;).<span class="title function_">catch</span>( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            result[<span class="number">1</span>] = error</span><br><span class="line">            <span class="title function_">resolve</span>(error)</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">const</span> [response, error] = <span class="keyword">await</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;./demo.json&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p>此时此刻，看到上面的封装，有朋友就有疑问了，那么怎么判断呢？</p><p>我们可以通过<code>if()</code>来判断呀，数组第一个为成功，第二个为失败，默认值都是<code>null</code>，我们只需要判断不等于<code>null</code>就可以了呀。像下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 判断请求成功</span></span><br><span class="line"><span class="keyword">if</span>(response !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功内容：-----&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">data</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b57ca8366adc42c6a874351970ac25f7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>失败的话判断，同理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断请求失败</span></span><br><span class="line"><span class="keyword">if</span>(error !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败内容：-----&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8efe69fb451448a9a63c645b7284a61b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>但我更喜欢像下面这样写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">const</span> [response, error] = <span class="keyword">await</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;./demo1.json&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断请求成功</span></span><br><span class="line">    <span class="keyword">if</span>(response !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功内容：-----&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">data</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断请求失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败内容：-----&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="demo-json"><a href="#demo-json" class="headerlink" title="demo.json"></a>demo.json</h4><p>下面为<code>demo.json</code>的内容。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;桃小瑞&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="关于Promise"><a href="#关于Promise" class="headerlink" title="关于Promise"></a>关于<code>Promise</code></h2><p>关于<code>Promise</code>的详细说明及原理，以及手写一款<code>Promise</code>，感兴趣的朋友可以看我的这篇文章<a href="https://juejin.cn/post/7169495903458295845">Promise详解-手写Promise，实现一款自己的简易Promise</a>。</p><p>感兴趣了解<code>Promise</code>的核心之一的<code>链式调用</code>的朋友可以看我这篇文章<a href="https://juejin.cn/post/7169138123182456862">Promise 链式调用原理-精简20行代码</a>。</p><h2 id="关于async-await"><a href="#关于async-await" class="headerlink" title="关于async/await"></a>关于<code>async/await</code></h2><p>关于<code>async/await</code>我们会单独拿一篇文章来说，感兴趣的朋友可以关注我哦，因为当我发布后你可以更快的看到哦。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是我对<code>async/await</code>的一个简单封装。当然你如果有更好的建议或本文中不足的地方可以评论在下方，看到后会第一时间回复的哦。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现登录拼图验证</title>
      <link href="/2022/12/11/202212111722/"/>
      <url>/2022/12/11/202212111722/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知各位朋友现在在<code>web</code>端进行登录的时候有没有注意一个变化，以前登录的时候是直接账号密码通过就可以直接登录，再后来图形验证码，数字结果运算验证，到现在的拼图验证。这一系列的转变都是为了防止机器操作，但对于我们来说，有亿点麻烦，但也没办法呀。</p><p>今天我们也一起来做一个制造亿点麻烦的人，实现一个拼图验证。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>这个实现原理并不复杂，我们只需要一张图作为我们的拼接素材，我们再单独弄一个盒子，然后移动它，到我们的指定位置，到达指定范围内即验证通过，反之验证未通过。</p><p>既然原理我们知道了，那我们就开干吧。</p><h2 id="实现前端登录拼图验证"><a href="#实现前端登录拼图验证" class="headerlink" title="实现前端登录拼图验证"></a>实现前端登录拼图验证</h2><p>本篇文章以 <code>css</code> 为主， <code>javascript</code>为辅实现。</p><h3 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h3><p>我们要实现这个功能，我们需要先搭建出来一个框架。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// css</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.check</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://img0.baidu.com/it/u=2028084904,3939052004&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=889&amp;h=500</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们画出来后，它就长下面图这样。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22595667f2f24d70973422baa982385e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="添加被校验区域及校验区域"><a href="#添加被校验区域及校验区域" class="headerlink" title="添加被校验区域及校验区域"></a>添加被校验区域及校验区域</h3><p>我们需要添加一个被校验的区域及校验区域，用来做我们的校验，像下图这两个东西。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01b8357cacf3473aa0ce10e3d1883932~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这里我们使用伪类来实现这两个区域。</p><p><strong>校验区域</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.check</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">280px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个校验区域就做好了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f15bb010c6a444d9beaaf6fed152c034~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>被校验区域</strong></p><p>这里我们需要使用到<code>background-position</code>根据我们的校验区域大小进行切出我们的被校验区域。</p><p><code>background-image</code>和<code>background-repeat</code>我们直接继承，<code>background-position</code>设置为校验区域的坐标位置（也就是距离<code>top</code>和<code>left</code>的距离），我们将<code>background-size</code>图片大小设为原盒子的大小。这样我们就得到了校验区域的那一片区域，也就是我们的被校验区域了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.check-child</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">background-image</span>: inherit;</span><br><span class="line">        <span class="attribute">background-repeat</span>: inherit;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">400px</span> <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">background-position</span>: -<span class="number">280px</span> -<span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="selector-tag">html</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 被校验区域 --&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;check-child&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff46a87254fe4329aa983cfedc96d5a4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="添加拖动条"><a href="#添加拖动条" class="headerlink" title="添加拖动条"></a>添加拖动条</h3><p>这里我们两个区域都添加完了，我们需要添加一个拖动条。</p><p>我们先添加一个拖动区域。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// css</span><br><span class="line">.drag&#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: #e3e3e3;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/535a9248c5b8401a9733264d2470c1c2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>现在拖动区域有了，我们需要在拖动区域内添加一个可拖动的盒子，及操作说明，不然看起来交互效果不友好。</p><h4 id="添加可拖动的盒子及交互说明"><a href="#添加可拖动的盒子及交互说明" class="headerlink" title="添加可拖动的盒子及交互说明"></a>添加可拖动的盒子及交互说明</h4><p>我们添加一个可以拖动的盒子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// css</span><br><span class="line"></span><br><span class="line">.drag-child&#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">    z-index: 10;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// html</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可拖动的盒子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drag-child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7441002317f149cd9912239abbe13d6f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>为了我们友好的交互，我们在拖动区域内给他添加操作说明。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// css</span><br><span class="line"></span><br><span class="line">.drag-tips&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: end;</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    color: #8a8a8a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// html</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可拖动的盒子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drag-tips&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>按住左边按钮向右拖动完成上方图像验证<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6355c29a78ef40388f31b933d431819b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="拖动条动起来"><a href="#拖动条动起来" class="headerlink" title="拖动条动起来"></a>拖动条动起来</h4><p>这一步我们需要让我们的拖动盒子动起来，让他可以在拖动区域内随意的左右拖动。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素实例</span></span><br><span class="line"><span class="keyword">const</span> drag = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.drag-child&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明鼠标按下事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dragMouseDown</span> = event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 添加鼠标移动事件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, dragMouseMove)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听鼠标移动事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dragMouseMove</span> = event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取当前 x 轴坐标</span></span><br><span class="line">    <span class="keyword">const</span> &#123; offsetX &#125; = event</span><br><span class="line">    <span class="keyword">if</span>(offsetX &lt; <span class="number">0</span> || offsetX &gt; <span class="number">350</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span><br><span class="line">    drag.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;offsetX&#125;</span>px)`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结束鼠标监听事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dragMouseUP</span> = event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 移除鼠标移动事件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, dragMouseMove)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加鼠标按下事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, dragMouseDown)</span><br><span class="line"><span class="comment">// 添加鼠标弹起事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, dragMouseUP)</span><br></pre></td></tr></table></figure><p>现在我们的盒子就可以正常的拖动了，但现在它还有几个问题，我们后面来解决。</p><ol><li>提示文字会被选中；</li><li>在<code>拖动区域</code>内拖动会闪烁；</li></ol><h3 id="联动被校验区域"><a href="#联动被校验区域" class="headerlink" title="联动被校验区域"></a>联动被校验区域</h3><p>我们先让被校验区域跟着我们的拖动动起来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图形校验</span></span><br><span class="line"><span class="keyword">const</span> check = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.check-child&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改被校验区域坐标</span></span><br><span class="line">check.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;offsetX&#125;</span>px`</span></span><br></pre></td></tr></table></figure><p>这样我们的被校验区域就能够跟着动了，我们声明一个方法用来表示，通过校验的回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过校验回调</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">success</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过校验&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听鼠标移动事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dragMouseMove</span> = event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取当前 x 轴坐标</span></span><br><span class="line">    <span class="keyword">const</span> &#123; offsetX &#125; = event</span><br><span class="line">    <span class="keyword">if</span>(offsetX &lt; <span class="number">0</span> || offsetX &gt; <span class="number">350</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span><br><span class="line">    drag.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;offsetX&#125;</span>px)`</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改被校验区域坐标</span></span><br><span class="line">    check.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;offsetX&#125;</span>px)`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(offsetX &gt;= <span class="number">278</span> &amp;&amp; offsetX &lt;= <span class="number">285</span>)&#123;</span><br><span class="line">        <span class="comment">// 执行回调</span></span><br><span class="line">        <span class="title function_">success</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6f90f4a9d8b4cf0a587eea416f037da~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="添加交互动画"><a href="#添加交互动画" class="headerlink" title="添加交互动画"></a>添加交互动画</h3><p>这里我们在鼠标移出监听的时候添加一个动画，当当前未通过校验的时候我们给他还原到初始位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结束鼠标监听事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dragMouseUP</span> = event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 移除鼠标移动事件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, dragMouseMove)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前 x 轴坐标</span></span><br><span class="line">    <span class="keyword">const</span> &#123; offsetX &#125; = event</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(offsetX &lt; <span class="number">278</span> || offsetX &gt; <span class="number">285</span>)&#123;</span><br><span class="line">        <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span><br><span class="line">        drag.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;move 0.5s ease-in-out&#x27;</span></span><br><span class="line">        <span class="comment">// 修改被校验区域坐标</span></span><br><span class="line">        check.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;move 0.5s ease-in-out&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动画结束监听回调</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">animationEnd</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">            <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span><br><span class="line">            drag.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;<span class="number">0</span>&#125;</span>px)`</span></span><br><span class="line">            <span class="comment">// 修改被校验区域坐标</span></span><br><span class="line">            check.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;<span class="number">0</span>&#125;</span>px)`</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清除动画属性</span></span><br><span class="line">            drag.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            check.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="comment">// 移出动画结束监听</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;animationend&quot;</span>, animationEnd)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加动画结束监听</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;animationend&quot;</span>, animationEnd)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们未通过校验，且放开鼠标的时候，它就会自动回到初始位置。</p><h3 id="解决遗留问题"><a href="#解决遗留问题" class="headerlink" title="解决遗留问题"></a>解决遗留问题</h3><h4 id="1、-提示文字会被选中"><a href="#1、-提示文字会被选中" class="headerlink" title="1、 提示文字会被选中"></a>1、 提示文字会被选中</h4><p>我们在提示文字的样式中添加<code>user-select: none;</code>，禁用掉文字选择。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 提示文字说明 */</span></span><br><span class="line"><span class="selector-class">.drag-tips</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: end;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8a8a8a</span>;</span><br><span class="line">    user-select: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、-在拖动区域内拖动会闪烁"><a href="#2、-在拖动区域内拖动会闪烁" class="headerlink" title="2、 在拖动区域内拖动会闪烁"></a>2、 在<code>拖动区域</code>内拖动会闪烁</h4><p>我们将我们刚刚使用的<code>offsetX</code>改为<code>pageX</code>。这里需要注意一下边距偏移量的问题哦。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听鼠标移动事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dragMouseMove</span> = event =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">    <span class="comment">// 获取当前 x 轴坐标</span></span><br><span class="line">    <span class="keyword">const</span> &#123; pageX &#125;  = event</span><br><span class="line">    <span class="keyword">if</span>(pageX &lt; <span class="number">0</span> || pageX &gt; <span class="number">350</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span><br><span class="line">    drag.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;pageX&#125;</span>px)`</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改被校验区域坐标</span></span><br><span class="line">    check.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;pageX&#125;</span>px)`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pageX &gt;= <span class="number">278</span> &amp;&amp; pageX &lt;= <span class="number">285</span>)&#123;</span><br><span class="line">        <span class="comment">// 执行回调</span></span><br><span class="line">        <span class="title function_">success</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结束鼠标监听事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dragMouseUP</span> = event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 移除鼠标移动事件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, dragMouseMove)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前 x 轴坐标</span></span><br><span class="line">    <span class="keyword">const</span> &#123; pageX &#125; = event</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pageX &lt; <span class="number">278</span> || pageX &gt; <span class="number">285</span>)&#123;</span><br><span class="line">        <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span><br><span class="line">        drag.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;move 0.5s ease-in-out&#x27;</span></span><br><span class="line">        <span class="comment">// 修改被校验区域坐标</span></span><br><span class="line">        check.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;move 0.5s ease-in-out&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动画结束监听回调</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">animationEnd</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">            <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span><br><span class="line">            drag.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;<span class="number">0</span>&#125;</span>px)`</span></span><br><span class="line">            <span class="comment">// 修改被校验区域坐标</span></span><br><span class="line">            check.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;<span class="number">0</span>&#125;</span>px)`</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清除动画属性</span></span><br><span class="line">            drag.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            check.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="comment">// 移出动画结束监听</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;animationend&quot;</span>, animationEnd)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加动画结束监听</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;animationend&quot;</span>, animationEnd)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>我们看一下效果图。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9ec22abf2584411a7b2b211d0f3185c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>drag<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 图形拼图验证码 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.check</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://img0.baidu.com/it/u=2028084904,3939052004&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=889&amp;h=500</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.check</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.check-child</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: inherit;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: inherit;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">400px</span> <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: -<span class="number">280px</span> -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 拖动条 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.drag</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#e3e3e3</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 可拖动的盒子 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.drag-child</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 提示文字说明 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.drag-tips</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: end;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">95%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#8a8a8a</span>;</span></span><br><span class="line"><span class="language-css">            user-select: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图形校验区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 被校验区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;check-child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拖动条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drag&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 操作说明 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drag-tips&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>按住左边按钮向右拖动完成上方图像验证<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可拖动的盒子 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drag-child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> drag = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.drag-child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 图形被校验区域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> check = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.check-child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过校验回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">success</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过校验&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明鼠标按下事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">dragMouseDown</span> = event =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加鼠标移动事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, dragMouseMove)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听鼠标移动事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">dragMouseMove</span> = event =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取当前 x 轴坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; pageX &#125;  = event</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(pageX &lt; <span class="number">0</span> || pageX &gt; <span class="number">350</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span></span><br><span class="line"><span class="language-javascript">        drag.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;pageX&#125;</span>px)`</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 修改被校验区域坐标</span></span></span><br><span class="line"><span class="language-javascript">        check.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;pageX&#125;</span>px)`</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(pageX &gt;= <span class="number">278</span> &amp;&amp; pageX &lt;= <span class="number">285</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 执行回调</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">success</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结束鼠标监听事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">dragMouseUP</span> = event =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 移除鼠标移动事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, dragMouseMove)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取当前 x 轴坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; pageX &#125; = event</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(pageX &lt; <span class="number">278</span> || pageX &gt; <span class="number">285</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span></span><br><span class="line"><span class="language-javascript">            drag.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;move 0.5s ease-in-out&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 修改被校验区域坐标</span></span></span><br><span class="line"><span class="language-javascript">            check.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;move 0.5s ease-in-out&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 动画结束监听回调</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">animationEnd</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 修改可移动盒子的 x 轴坐标</span></span></span><br><span class="line"><span class="language-javascript">                drag.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;<span class="number">0</span>&#125;</span>px)`</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 修改被校验区域坐标</span></span></span><br><span class="line"><span class="language-javascript">                check.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;<span class="number">0</span>&#125;</span>px)`</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清除动画属性</span></span></span><br><span class="line"><span class="language-javascript">                drag.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                check.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 移出动画结束监听</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;animationend&quot;</span>, animationEnd)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 添加动画结束监听</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;animationend&quot;</span>, animationEnd)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加鼠标按下事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, dragMouseDown)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加鼠标弹起事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, dragMouseUP)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本篇<code>前端实现登录拼图验证</code>就到此结束了，这个功能一般都是在登录的时候用的。本篇文章的案例可以正常使用。</p><p>本篇实现的代码中存在一个遗留问题，非拖动区域内能拖动。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问：前端中的原型链（Prototype Chain）是何物？</title>
      <link href="/2022/12/09/202212091740/"/>
      <url>/2022/12/09/202212091740/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在项目的开发、面试的过程中，我们都在接触<code>原型</code>及<code>原型链</code>，这里这样说大家没有印象。各位朋友在<code>vue 2</code>中做全局挂载，这个做过吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">protype</span>.<span class="property">$xx</span> = xx</span><br></pre></td></tr></table></figure><p>上面这个代码是不是很熟悉？没错，上面的代码就是我们在<code>vue 2</code>中做全局挂载的一种方式。这个就是一个<code>原型</code>的操作。那这个也只是一个<code>原型操作</code>啊，那什么是<code>原型链</code>，你还是没说啊，ei，让我们往看下面。一起来揭开<code>原型链</code>的神秘面纱。</p><h1 id="什么是原型链（Prototype-chain）？"><a href="#什么是原型链（Prototype-chain）？" class="headerlink" title="什么是原型链（Prototype chain）？"></a>什么是原型链（Prototype chain）？</h1><p>什么是<code>原型链</code>？我们谈<code>原型链</code>的时候，<code>继承</code>它就跑不脱（跑不掉），它跟<code>原型链</code>是挂钩的，二者并存的一个关系。</p><p>我们看一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">MDN</a>的官方解释。</p><blockquote><p>每个实例对象（<code>object</code>）都有一个私有属性（称之为 <code>__proto__</code>）指向它的构造函数的原型对象（<code>prototype</code>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为 <code>null</code>。并作为这个原型链中的最后一个环节。</p></blockquote><p>大白话就是说我们每一个对象都有一个私有属性<code>__proto__</code>，层层向上的一个<code>__proto__</code>的一个链就是<code>原型链</code>。</p><p>我们看张图。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f59bb81dc4244828cf9ecd3c87c4bbf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们再画张图看一下他们的存在关系。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec0583638ed64099a5238e9334ed36a5~tplv-k3u1fbpfcp-watermark.image" alt="未命名.jpg"></p><p>上图中的<code>__proto__</code>的一个<code>继承</code>过程，形成了一个链，而这个链就是常说的<code>原型链</code>。</p><p>那什么又是<code>继承</code>呢？我们看下面。</p><h1 id="什么是继承（inherit）？"><a href="#什么是继承（inherit）？" class="headerlink" title="什么是继承（inherit）？"></a>什么是继承（inherit）？</h1><p><code>继承</code>这个很好解释，我们这里就不用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">MDN</a>的官方解释了。直接上大白话解释。张三将ta的东西传承给ta的儿子张四，这样的一个过程就叫做<code>继承</code>。</p><h1 id="让我们开始来看代码案例"><a href="#让我们开始来看代码案例" class="headerlink" title="让我们开始来看代码案例"></a>让我们开始来看代码案例</h1><p>让我们一起来看代码案例，相信朋友你看完你就懂了，他人再问不再百度/沉思。</p><h2 id="object对象的原型及原型链"><a href="#object对象的原型及原型链" class="headerlink" title="object对象的原型及原型链"></a><code>object</code>对象的原型及原型链</h2><p>我们先来创建一个<code>对象（Object）</code>，看看它自身的<code>原型</code>及<code>原型链</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2604fc8dc0424bd7a12d79589bf15263~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们发现它的<code>原型</code>上有一个<code>__proto__</code>为<code>null</code>，这一个继承自<code>Object</code>，再加上它自己又一个<code>__proto__</code>，所以它的<code>原型链</code>有两层，由此我们得到以下结论。</p><ul><li><code>obj</code>的<code>原型链</code>有两层。</li><li><code>Object</code>为<code>原型链</code>上的顶层。</li></ul><p>那<code>构造函数</code>和<code>class</code>类的原型是不是也是这样呢？下面让我们一起来看看。</p><h2 id="构造函数和class类的原型"><a href="#构造函数和class类的原型" class="headerlink" title="构造函数和class类的原型"></a><code>构造函数</code>和<code>class</code>类的原型</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><code>构造函数</code></h3><p>我们先一起来看<code>构造函数</code>中的<code>原型</code>及<code>原型链</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Prototype</span> () &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="keyword">new</span> <span class="title class_">Prototype</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb894e3f8d5a411080b9f7b78eaef8e0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们根据我们的打印结果和上面的图片发现<code>构造函数</code>它有三层，这是为啥呢？</p><p>解答：</p><p>因为<code>构造函数</code>它本身就存在一个<code>原型实例</code>，然后我们<code>new</code>进行实例的时候，我们得到的是这个被实例化的<code>构造函数</code>，它又继承了<code>构造函数</code>的<code>原型</code>，所以它就存在三层。我们看一下<code>未被实例</code>的<code>构造函数</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Prototype</span> () &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Prototype</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/103cf05438c84f63a98dc6bbefa8f478~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们发现我们打印出来它的原型上，就只存在两层。这就验证了我们刚刚说的话。</p><h3 id="class类"><a href="#class类" class="headerlink" title="class类"></a><code>class</code>类</h3><p>我们看看<code>class</code>类中的<code>原型链</code>长啥样。</p><p><strong>未被<code>new</code>实例化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prototype</span> &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title class_">Prototype</span>.<span class="property"><span class="keyword">prototype</span></span> );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/346ccdb0319f46a297cc2540886f4bf5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong><code>new</code>实例化后的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prototype</span> &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="keyword">new</span> <span class="title class_">Prototype</span> () );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92c082e62b4143749f12266eb3dd74ed~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们发现<code>class</code>和<code>构造函数</code>在未实例化和实例化都是一样的。它俩明明都不是同一个东西，为啥为是一样的呢？</p><p>我们想要搞清楚这个问题，我们就需要知道<code>class</code>是这个啥，为啥原型链都是一样的。</p><p><strong><code>class</code>解读：</strong></p><p><code>class</code>是<code>ES2015/ES6</code>中新增的语法糖，其本质上也是一个<code>构造函数</code>，只是方便我们用<code>class</code>关键字进行使用罢了。</p><h2 id="原型链深入了解及进阶"><a href="#原型链深入了解及进阶" class="headerlink" title="原型链深入了解及进阶"></a>原型链深入了解及进阶</h2><p>下面我们将进行实战使用。系好安全带开始发车了。</p><h3 id="案例一："><a href="#案例一：" class="headerlink" title="案例一："></a>案例一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = &#123;&#125;</span><br><span class="line">info.<span class="property">__proto__</span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> = info.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问：打印出来的<code>obj.name</code>是什么？</strong></p><p><strong>答案：’张三’</strong></p><p>解读：</p><p>这里我们在<code>__proto__</code>的上添加了一个<code>name</code>的键值对，然后我们修改了<code>obj</code>的原型为<code>info</code>的原型。<br>我们并没有在<code>info</code>中创建<code>name</code>的键值对，然后<code>obj</code>在它自身没有找不到，它就去它的上层原型上进行查找，找到了就给我们返回出来，如果没找到就是<code>undefined</code>。我们可以验证一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = &#123;&#125;</span><br><span class="line">info.<span class="property">__proto__</span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> = info.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/635f00fbbadf4c6da90d895cf2e5aff6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="案例二："><a href="#案例二：" class="headerlink" title="案例二："></a>案例二：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问：<code>obj</code>的<code>__proto__</code>是啥？</strong></p><p><strong>答案：Object</strong></p><p>❓❓❓我们刚刚不是对它的<code>__proto__</code>进行更改了吗。它为啥还是<code>Object</code>，你肯定在骗我，我们看图。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32b83dca59224ea286c29726bb52f245~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>解答：</p><p><code>__proto__</code>不允许修改为非<code>对象（Object）</code>。在我们修改的时候就给我们拦截了，所以我们根本就没有修改到。</p><h3 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问：<code>obj</code>的<code>__proto__</code>是啥？</strong></p><p><strong>答案：No properties</strong></p><p>❓❓❓我们刚刚不是对它的<code>__proto__</code>进行更改为<code>null</code>吗。它为啥是<code>No properties</code>，你肯定在骗我，我们看图。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4df3ee96b4cd4ad8afa49f44a580df35~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>解答：</p><p><code>null</code>的类型为<code>object</code>，所以它是可以修改成功的。以至于<code>null</code>的类型为啥是<code>object</code>，这则是因为<code>js</code>遗存下来的一个<code>bug</code>，而<code>null</code>本身是啥也没有的，所以它就会变成图上的那样。</p><h3 id="案例四："><a href="#案例四：" class="headerlink" title="案例四："></a>案例四：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = &#123;&#125;</span><br><span class="line">info.<span class="property">__proto__</span>.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> = info</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问：打印出来的<code>obj.name</code>是什么？</strong></p><p><strong>答案：’李四’</strong></p><p>解读：</p><p>这里的原理和案例一是一样的，我们的<code>info</code>是<code>Object</code>类型，所以可以修改成功。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efee1719f8784165abc65a1740509175~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="原型链的副作用"><a href="#原型链的副作用" class="headerlink" title="原型链的副作用"></a><code>原型链</code>的副作用</h2><p>在我们操作<code>原型</code>及<code>原型链</code>的过程中，如果<code>原型</code>上不存在我们需要的属性，就会一直在<code>原型链</code>上查找该<code>属性</code>，这是一个比较耗时过程，直至找到或者找不到才会结束查找。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在我们更深一步了解<code>javascript</code>的过程中，了解及掌握<code>原型</code>和<code>原型链</code>是一步必走的路。说句题外话，这东西有时候真的好绕😭。</p><p>本篇文章存在错误或不足之处，还请各位朋友指出并进行评论留言。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一款简单的JavaScript打包器</title>
      <link href="/2022/12/08/202212082025/"/>
      <url>/2022/12/08/202212082025/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在现在的前端大环境下，由从前的<code>html</code>、<code>css</code>、<code>js</code>，逐渐衍生出来了前端的工程化，由简到繁，越来越复杂，最复杂的要属我们的<code>webpack</code>了，已经出现了<code>webpack</code>工程师，用来专门配置<code>webpack</code>。</p><p>前端工程化打包工具千千万，谁又是你的<code>NO.One</code>。</p><p>本篇文章实现的是一款简单的<code>javaScript</code>打包工具，不涉及非<code>javaScript</code>的打包，如：<code>css</code>、<code>html</code>、<code>静态文件</code>等。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>我们的电脑上需要配备<code>node</code>环境。</p><h1 id="所需部件工具"><a href="#所需部件工具" class="headerlink" title="所需部件工具"></a>所需部件工具</h1><h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a><code>fs</code></h2><p><code>fs</code>模块是用来操作文件的，该模块只能在<code>node</code>环境中使用，不可以在浏览器中使用。</p><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p><code>path</code>模块是用来处理文件及文件路径的一个模块。</p><h2 id="babel-parser"><a href="#babel-parser" class="headerlink" title="@babel/parser"></a>@babel/parser</h2><p><code>@babel/parser</code>模块用于接收源码，进⾏词法分析、语法分析，⽣成<code>抽象语法树（Abstract Syntax Tree）</code>，简称<code>ast</code>。</p><h2 id="babel-traverse"><a href="#babel-traverse" class="headerlink" title="@babel/traverse"></a>@babel/traverse</h2><p><code>@babel/traverse</code>模块用于遍历更新我们使用<code>@babel/parser</code>生成的<code>AST</code>。对其中特定的节点进行操作。</p><h2 id="babel-core"><a href="#babel-core" class="headerlink" title="@babel/core"></a>@babel/core</h2><p><code>@babel/core</code>模块中的<code>transform</code>用于编译我们的代码，可以转编为第版本的代码，让它的兼容性更强。本文使用的是<code>transformFromAstSync</code>，其效果都是一样的。</p><h2 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="@babel/preset-env"></a>@babel/preset-env</h2><p><code>@babel/preset-env</code>模块是一个智能环境预设的工具模块，允许我们使用最新的<code>es规范</code>进行编写代码，无需对目标环境需要哪些语法转换进行各种繁琐细节的管理。</p><h1 id="编写打包器"><a href="#编写打包器" class="headerlink" title="编写打包器"></a>编写打包器</h1><p>我们将结合上面的工具模块编写出一款自己的<code>js</code>打包工具，如需打包非<code>js</code>内容还需其他模块工具。</p><p>本文实现的仅能打包<code>js</code>，让我们一起动手吧。</p><h5 id="有个小细节提醒下各位朋友"><a href="#有个小细节提醒下各位朋友" class="headerlink" title="有个小细节提醒下各位朋友"></a>有个小细节提醒下各位朋友</h5><p>在<code>mac</code>系统下在<code>终端</code>中打包出来的内容和<code>window</code>终端打印出来是一样的，只是<code>mac</code>下是隐视的。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先我们需要新建一个文件夹，然后执行<code>npm init</code> / <code>pnpm init</code>，生成<code>package.json</code>文件。然乎安装上面的模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//npm</span></span><br><span class="line">npm i @babel/core @babel/parser @babel/preset-env @babel/traverse</span><br><span class="line"></span><br><span class="line"><span class="comment">//pnpm</span></span><br><span class="line">pnpm i @babel/core @babel/parser @babel/preset-env @babel/traverse</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="新建main-js文件"><a href="#新建main-js文件" class="headerlink" title="新建main.js文件"></a>新建<code>main.js</code>文件</h2><p>我们新建一个<code>main.js</code>文件，用来编写我们的代码，当然你也可以使用其他的文件名。</p><h2 id="新建src目录"><a href="#新建src目录" class="headerlink" title="新建src目录"></a>新建<code>src</code>目录</h2><p>这里我们需要新建一个<code>src</code>目录，用来装我们写的代码。</p><p>在<code>src</code>目录里面我们新建两个<code>js</code>文件，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    foo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再新建一个<code>index.js</code>文件，并引入<code>foo.js</code>，并在<code>index.js</code>的方法里面执行<code>foo</code>方法。然后我们执行<code>index</code>防范。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">index</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">foo</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是index&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>])&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">index</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写main-js"><a href="#编写main-js" class="headerlink" title="编写main.js"></a>编写<code>main.js</code></h2><p>现在到了我们来开始编写<code>main.js</code>的内容。</p><p>引入我们刚刚需要的工具模块，这里我们需要使用<code>require</code>的形式进行引用，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;@babel/parser&#x27;</span>)</span><br><span class="line"><span class="comment">// 这里需要添加.default来引入@babel/traverse模块，因为require不支持default的导出，故添加此内容</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&#x27;@babel/traverse&#x27;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;@babel/core&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h3><p>我们添加<code>readFile</code>方法读取我们编写的<code>js</code>文件内容，这里我们使用<code>fs</code>模块中的<code>readFileSync</code>方法，并设置内容格式为<code>utf-8</code>。</p><p>然后我们传入<code>index.js</code>文件的路径并执行该方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">readFile</span> = (<span class="params">fileName</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> content = fs.<span class="title function_">readFileSync</span>(fileName, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./src/index.js&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们在终端执行<code>node main.js</code>。</p><p>我们看到终端打印出来了我们<code>index.js</code>文件中的内容。和我们<code>index.js</code>中的内容一模一样，不一样的地方在于，打印出来的是字符串，里面加了<code>\n</code>换行符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">index</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">foo</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是index&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>])&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">index</span>()</span><br></pre></td></tr></table></figure><h3 id="将拿到的文件内容生成ast语法树"><a href="#将拿到的文件内容生成ast语法树" class="headerlink" title="将拿到的文件内容生成ast语法树"></a>将拿到的文件内容生成<code>ast</code>语法树</h3><p>上面我们已经拿到了我们写的代码，现在我们要通过<code>@babel/parser</code>工具生成我们的<code>ast</code>。</p><p>我们在<code>readFile</code>的方法中添加<code>@babel/parser</code>，并设置<code>sourceType</code>为<code>module</code>。并依旧在终端执行<code>node main.js</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(content, &#123;</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ast);</span><br></pre></td></tr></table></figure><p>打印结果如下，是一个<code>node</code>格式的节点，我们的代码内容在<code>program</code> -&gt; <code>body</code> 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;File&#x27;</span>,</span><br><span class="line">    <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">end</span>: <span class="number">165</span>,</span><br><span class="line">    <span class="attr">loc</span>: <span class="title class_">SourceLocation</span> &#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="title class_">Position</span> &#123; <span class="attr">line</span>: <span class="number">1</span>, <span class="attr">column</span>: <span class="number">0</span>, <span class="attr">index</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        <span class="attr">end</span>: <span class="title class_">Position</span> &#123; <span class="attr">line</span>: <span class="number">12</span>, <span class="attr">column</span>: <span class="number">7</span>, <span class="attr">index</span>: <span class="number">165</span> &#125;,</span><br><span class="line">        <span class="attr">filename</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">identifierName</span>: <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">errors</span>: [],</span><br><span class="line">    <span class="attr">program</span>: <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;Program&#x27;</span>,</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">end</span>: <span class="number">165</span>,</span><br><span class="line">        <span class="attr">loc</span>: <span class="title class_">SourceLocation</span> &#123;</span><br><span class="line">        <span class="attr">start</span>: [<span class="title class_">Position</span>],</span><br><span class="line">        <span class="attr">end</span>: [<span class="title class_">Position</span>],</span><br><span class="line">        <span class="attr">filename</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">identifierName</span>: <span class="literal">undefined</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">        <span class="attr">interpreter</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">body</span>: [ [<span class="title class_">Node</span>], [<span class="title class_">Node</span>], [<span class="title class_">Node</span>] ],</span><br><span class="line">        <span class="attr">directives</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">comments</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-babel-traverse遍历更新我们的ast"><a href="#使用-babel-traverse遍历更新我们的ast" class="headerlink" title="使用@babel/traverse遍历更新我们的ast"></a>使用<code>@babel/traverse</code>遍历更新我们的<code>ast</code></h3><p>这里我们使用<code>@babel/traverse</code>工具遍历我们刚刚生成的<code>ast</code>。</p><p>此环境我们需要新建一个名为<code>dependencies</code>的对象，用来装我们处理好的<code>ast</code>的依赖关系。</p><p>我们将刚刚的<code>ast</code>传进去，并对其<code>option</code>中的<code>ImportDeclaration</code>等于一个函数，添加一个形参接收每个文件的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dependencies = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">    <span class="title class_">ImportDeclaration</span>: <span class="function">(<span class="params">&#123; node &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们通过<code>path</code>模块来处理我们文件的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dirName = path.<span class="title function_">dirname</span>(fileName)</span><br></pre></td></tr></table></figure><p>我们需要对我们的文件名和路径进行进一步的处理。并对其进行正则替换反斜杠。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dir = <span class="string">&#x27;./&#x27;</span> + path.<span class="title function_">join</span>(dirName, node.<span class="property">source</span>.<span class="property">value</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上面代码中的<code>node.source.value</code>就是我们根据<code>ast</code>中获取到的所有的文件名和路径。</p><p>我们将我们拿到的文件路径存入<code>dependencies</code>对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dependencies[node.<span class="property">source</span>.<span class="property">value</span>] = dir</span><br></pre></td></tr></table></figure><p>最终我们在终端执行<code>node main.js</code>并打印我们的<code>dependencies</code>对象。打印内容和我们需要编译的文件路径一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">&#x27;./foo.js&#x27;</span>: <span class="string">&#x27;./src/foo.js&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="使用-babel-core转编我们的代码"><a href="#使用-babel-core转编我们的代码" class="headerlink" title="使用@babel/core转编我们的代码"></a>使用<code>@babel/core</code>转编我们的代码</h3><p>这里我们需要使用<code>@babel/core</code>工具中的<code>transform</code>方案转编我们的代码，让我们的代码在第版本的浏览器中也可以正常运行。</p><p>这里我们使用最新的<code>api</code> <code>transformFromAstSync</code>来转编我们的代码。</p><p><code>transformFromAstSync</code>的作用：将我们刚刚修改的<code>ast</code>转编回我们的代码。</p><p>我们只需要它转换后的代码，其他的我们不需要，所以我们对其结果进行解构，只获取其代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; code &#125; = babel.<span class="title function_">transformFromAstSync</span>(ast, <span class="literal">null</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>我们这里需要使用到<code>@babel/preset-env</code>，对我们的代码进行降级处理，也是就是说我们使用的新版规范编写，我们要转它转回老版本规范。如果这里我们不处理，我们的代码也将不会处理，原模原样的输出。</p><p>所以我们需要给其添加一个<code>presets</code>属性并放入我们的<code>@babel/preset-env</code>工具。这里我们将<code>modules</code>属性设为<code>false</code>，让它输出为<code>esm</code>格式的代码。</p><p>其他属性扩展：<code>commonjs</code>、<code>amd</code>、<code>umd</code>、<code>systemjs</code>、<code>auto</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; code &#125; = babel.<span class="title function_">transformFromAstSync</span>(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">    <span class="attr">presets</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">modules</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们在终端执行<code>node main.js</code>，打印内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> index = <span class="keyword">function</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">foo</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是index&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>, _arr = [<span class="number">1</span>, <span class="number">2</span>]; _i &lt; _arr.<span class="property">length</span>; _i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = _arr[_i];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">index</span>();</span><br></pre></td></tr></table></figure><p><strong>readFile方法完整代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">readFile</span> = (<span class="params">fileName</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> content = fs.<span class="title function_">readFileSync</span>(fileName, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(content, &#123;</span><br><span class="line">        <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dependencies = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">        <span class="title class_">ImportDeclaration</span>: <span class="function">(<span class="params">&#123; node &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> dirName = path.<span class="title function_">dirname</span>(fileName)</span><br><span class="line">            <span class="keyword">const</span> dir = <span class="string">&#x27;./&#x27;</span> + path.<span class="title function_">join</span>(dirName, node.<span class="property">source</span>.<span class="property">value</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            dependencies[node.<span class="property">source</span>.<span class="property">value</span>] = dir</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = babel.<span class="title function_">transformFromAstSync</span>(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">modules</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fileName,</span><br><span class="line">        dependencies,</span><br><span class="line">        code</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它已经成功的对我们的代码进行了降级处理，我们将我们的<code>文件名/文件路径</code>、<code>依赖关系（dependencies）</code>、<code>代码（code）</code>进行<code>return</code>返回出去，方便我们后面使用。</p><h3 id="编写依赖关系生成器"><a href="#编写依赖关系生成器" class="headerlink" title="编写依赖关系生成器"></a>编写依赖关系生成器</h3><p>我们需要新建一个名为<code>createDependciesGraph</code>的方法，用来收集我们的文件依赖关系。添加一个形参接收我们传入的文件名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createDependciesGraph</span> = entry =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>创建一个一个名为<code>graphList</code>的数组，用来装我们的<code>readFile</code>方法<code>return</code>出来的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> graphList = [<span class="title function_">readFile</span>(entry)]</span><br></pre></td></tr></table></figure><p>我们这里需要进行递归处理<code>graphList</code>，防止里面有多重依赖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; graphList.<span class="property">length</span>; i++)&#123;&#125;</span><br></pre></td></tr></table></figure><p>我们需要在循环中暂存每一项，所以我们声明一个<code>item</code>来装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> item = graphList[i]</span><br></pre></td></tr></table></figure><p>我们这里还需要暂存每一项的依赖关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; dependencies &#125; = item</span><br></pre></td></tr></table></figure><p>这里我们需添加一个判断，如果存在依赖关系的，我们继续再次循环它的依赖关系层，并插入<code>graphList</code>中，以此往复的进行递归嵌套循环，并且进行文件内容读取，直至循环结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(dependencies)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> dependencies)&#123;</span><br><span class="line">        graphList.<span class="title function_">push</span>( <span class="title function_">readFile</span>( dependencies[j] ) )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此部分完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createDependciesGraph</span> = entry =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> graphList = [<span class="title function_">readFile</span>(entry)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; graphList.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> item = graphList[i]</span><br><span class="line">        <span class="keyword">const</span> &#123; dependencies &#125; = item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dependencies)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> dependencies)&#123;</span><br><span class="line">                graphList.<span class="title function_">push</span>(</span><br><span class="line">                    <span class="title function_">readFile</span>(dependencies[j])</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(graphList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们打印一下已经处理好的<code>graphList</code>，终端输入<code>node main.js</code>，结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">dependencies</span>: &#123; <span class="string">&#x27;./foo.js&#x27;</span>: <span class="string">&#x27;./src/foo.js&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">code</span>: <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span>; </span><br><span class="line">         <span class="keyword">var</span> index = <span class="keyword">function</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="title function_">foo</span>();</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是index&#x27;</span>);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>, _arr = [<span class="number">1</span>, <span class="number">2</span>]; _i &lt; _arr.<span class="property">length</span>; _i++) &#123;</span><br><span class="line">             <span class="keyword">var</span> item = _arr[_i];</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         <span class="title function_">index</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;./src/foo.js&#x27;</span>,</span><br><span class="line">    <span class="attr">dependencies</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">code</span>: <span class="keyword">var</span> foo = <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是foo&#x27;</span>);&#125;;<span class="keyword">export</span> &#123; foo &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="关系层梳理"><a href="#关系层梳理" class="headerlink" title="关系层梳理"></a>关系层梳理</h3><p>我们看到刚刚的已经完整的打印出来了我们的关系层了，我们现在需要对其进行梳理。</p><p>我们新建一个对象来装我们的梳理好的关系层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> graph = &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里我们循环<code>graphList</code>数组，并向<code>graph</code>中写入我们的详细依赖关系图层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> graphList)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;dependencies, code&#125; = item</span><br><span class="line">    graph[item.<span class="property">fileName</span>] = &#123;</span><br><span class="line">        dependencies,</span><br><span class="line">        code</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们打印一下刚刚的梳理好的内容，依旧是在终端输入<code>node main.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;./src/index.js&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">dependencies</span>: &#123; <span class="string">&#x27;./foo.js&#x27;</span>: <span class="string">&#x27;./src/foo.js&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">code</span>: <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> index = <span class="keyword">function</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">foo</span>();\n<span class="string">&#x27; +</span></span><br><span class="line"><span class="string">        console.log(&#x27;</span>我是index<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">        for (var _i = 0, _arr = [1, 2]; _i &lt; _arr.length; _i++) &#123;</span></span><br><span class="line"><span class="string">          var item = _arr[_i];</span></span><br><span class="line"><span class="string">          console.log(item);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">      index();</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &#x27;</span>./src/foo.<span class="property">js</span><span class="string">&#x27;: &#123;</span></span><br><span class="line"><span class="string">    dependencies: &#123;&#125;,</span></span><br><span class="line"><span class="string">    code: var foo = function foo() &#123;  console.log(&#x27;</span>我是foo<span class="string">&#x27;);&#125;;export &#123; foo &#125;;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>我们需要将梳理好的关系层，<code>return</code>返回出去，方便我们后面使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> graph</span><br></pre></td></tr></table></figure><p><strong>createDependciesGraph方法完整代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createDependciesGraph</span> = entry =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> graphList = [<span class="title function_">readFile</span>(entry)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; graphList.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> item = graphList[i]</span><br><span class="line">        <span class="keyword">const</span> &#123; dependencies &#125; = item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dependencies)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> dependencies)&#123;</span><br><span class="line">                graphList.<span class="title function_">push</span>(</span><br><span class="line">                    <span class="title function_">readFile</span>(dependencies[j])</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> graph = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> graphList)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;dependencies, code&#125; = item</span><br><span class="line">        graph[item.<span class="property">fileName</span>] = &#123;</span><br><span class="line">            dependencies,</span><br><span class="line">            code</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> graph</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我们先创建一个文件管理的方法"><a href="#我们先创建一个文件管理的方法" class="headerlink" title="我们先创建一个文件管理的方法"></a>我们先创建一个文件管理的方法</h3><p>这一步我们先创建一个文件夹管理的方法，用于我们每次打包的时候去清空目录，重新创建。</p><p>我们声明一个名为<code>rmdir</code>的方法，管理我们的打包目录文件夹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">rmdir</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;&#125;</span><br></pre></td></tr></table></figure><p>我们给它内部<code>return</code>一个<code>new Promise</code>的实例，至于原因后面用到了懂了，方便我们后面使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">rmdir</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们声明一个<code>err</code>用来获取我们操作文件夹、文件时的错误，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> err = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>我们读取我们当前打包文件夹的状态，如果存在则清空并删除掉。<code>recursive</code>表示是否删除文件夹，<code>true</code>为删除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDir = fs.<span class="title function_">existsSync</span>(<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isDir)&#123;</span><br><span class="line">    fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;dist&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;,  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">            err = error</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们进行错误判断，当<code>err</code>为真我们则抛错并<code>return</code>出去。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="title function_">reject</span>(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用<code>setTimeout</code>来延时通知成功，避免删除文件夹和创建文件夹同时进行，导致创建不成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><strong>rmdir完整代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">rmdir</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> err = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> isDir = fs.<span class="title function_">existsSync</span>(<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isDir)&#123;</span><br><span class="line">            fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;dist&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;,  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                    err = error</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码生成器方法"><a href="#代码生成器方法" class="headerlink" title="代码生成器方法"></a>代码生成器方法</h3><p>这里我采用的是<code>esbuild</code>的一种打包输出模式，也就是打包后的文件是根据项目创建时的目录规则进行同步生成的。</p><p>这里我们创建一个名为<code>generateCode</code>的方法，进行我们的代码生成入口调用，并对生成文件进行编写处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">generateCode</span> = entry =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>在它的内部调用<code>createDependciesGraph</code>方法，并将<code>entry（打包的入口文件）</code>传递进去。并声明<code>codeInfo</code>去接收。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> codeInfo = <span class="title function_">createDependciesGraph</span>(entry)</span><br></pre></td></tr></table></figure><p>我们可以先打印看一下<code>codeInfo</code>长啥样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;./src/index.js&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">dependencies</span>: &#123; <span class="string">&#x27;./foo.js&#x27;</span>: <span class="string">&#x27;./src/foo.js&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">code</span>: <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> index = <span class="keyword">function</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">foo</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是index&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>, _arr = [<span class="number">1</span>, <span class="number">2</span>]; _i &lt; _arr.<span class="property">length</span>; _i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> item = _arr[_i];</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title function_">index</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;./src/foo.js&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">dependencies</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">code</span>: <span class="keyword">var</span> foo = <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是foo&#x27;</span>);&#125;;<span class="keyword">export</span> &#123; foo &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们根据依赖关系创建文件夹并写入文件。</p><p>此时此刻我们就排上了刚才的<code>rmdir</code>方法了，我们调用<code>rmdir</code>方法，并在<code>.then</code>中编写我们的创建文件流程。这就是刚刚为啥创建<code>rmdir</code>时返回一个<code>Promise</code>的原因，在等删除清空打包目录后再创建打包文件夹及文件，这样我们就避免了同时进行文件夹、文件的创建与删除的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">rmdir</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>现在我们来创建打包目录文件夹。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;dist&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p>我们在创建打包文件夹的回调中循环我们的依赖关系，因<code>codeInfo</code>是对象，我们不能使用<code>for..of...</code>，使用的是<code>es6</code>中新增的<code>for..in..</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> codeInfo)&#123;&#125;</span><br></pre></td></tr></table></figure><p>这里我们创建同名文件夹，并将指定代码写入同名文件中。这里获取我们通过<code>split</code>的方式获取当前的文件名称，并取最后一项，因最后一项就是我们的文件名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = key.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">value = value[value.<span class="property">length</span> - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>我们根据上面获取到的文件名创建问价，并将对应的代码写入文件中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = key.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">value = value[value.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">`./dist/<span class="subst">$&#123;value&#125;</span>`</span>, codeInfo[key][<span class="string">&#x27;code&#x27;</span>], [], <span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p><strong>generateCode方法完整代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">generateCode</span> = entry =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> codeInfo = <span class="title function_">createDependciesGraph</span>(entry)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(codeInfo);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">rmdir</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;dist&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> codeInfo)&#123;</span><br><span class="line">                <span class="keyword">let</span> value = key.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                value = value[value.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                fs.<span class="title function_">writeFile</span>(<span class="string">`./dist/<span class="subst">$&#123;value&#125;</span>`</span>, codeInfo[key][<span class="string">&#x27;code&#x27;</span>], [], <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要在<code>main.js</code>中调用我们的<code>generateCode</code>代码生成器的方法。我们在调用的同时需要传入打包文件的入口文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">generateCode</span>(<span class="string">&#x27;./src/index.js&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们就写完了，现在我们来运行一下，在终端输入<code>node main.js</code>并允许。</p><p>我们就会发现我们的项目目录生成了<code>dist</code>目录，里面是我们的<code>src</code>下的<code>js</code>文件。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63d18cac5a234bd59a191560572fbb6a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们看一下，<code>foo.js</code>和<code>index.js</code>文件中是否是<code>src</code>目录下的那些内容。、</p><p><strong>foo.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是foo&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;;</span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> index = <span class="keyword">function</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">foo</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是index&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>, _arr = [<span class="number">1</span>, <span class="number">2</span>]; _i &lt; _arr.<span class="property">length</span>; _i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = _arr[_i];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">index</span>();</span><br></pre></td></tr></table></figure><h2 id="验证打包的文件是否可以允许"><a href="#验证打包的文件是否可以允许" class="headerlink" title="验证打包的文件是否可以允许"></a>验证打包的文件是否可以允许</h2><p>我们新建一个<code>index.html</code>,，并引入<code>dist</code>目录下的<code>index.js</code>文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/index.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42d47dfb984d4ebea8518dd9cd77d37d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们打包后的文件是可以正常运许的。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;@babel/parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&#x27;@babel/traverse&#x27;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;@babel/core&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readFile</span> = (<span class="params">fileName</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> content = fs.<span class="title function_">readFileSync</span>(fileName, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(content, &#123;</span><br><span class="line">        <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dependencies = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">        <span class="title class_">ImportDeclaration</span>: <span class="function">(<span class="params">&#123; node &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> dirName = path.<span class="title function_">dirname</span>(fileName)</span><br><span class="line">            <span class="keyword">const</span> dir = <span class="string">&#x27;./&#x27;</span> + path.<span class="title function_">join</span>(dirName, node.<span class="property">source</span>.<span class="property">value</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            dependencies[node.<span class="property">source</span>.<span class="property">value</span>] = dir</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = babel.<span class="title function_">transformFromAstSync</span>(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">modules</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fileName,</span><br><span class="line">        dependencies,</span><br><span class="line">        code</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createDependciesGraph</span> = entry =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> graphList = [<span class="title function_">readFile</span>(entry)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; graphList.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> item = graphList[i]</span><br><span class="line">        <span class="keyword">const</span> &#123; dependencies &#125; = item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dependencies)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> dependencies)&#123;</span><br><span class="line">                graphList.<span class="title function_">push</span>(</span><br><span class="line">                    <span class="title function_">readFile</span>(dependencies[j])</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> graph = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> graphList)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;dependencies, code&#125; = item</span><br><span class="line">        graph[item.<span class="property">fileName</span>] = &#123;</span><br><span class="line">            dependencies,</span><br><span class="line">            code</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> graph</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateCode</span> = entry =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> codeInfo = <span class="title function_">createDependciesGraph</span>(entry)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">rmdir</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;dist&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> codeInfo)&#123;</span><br><span class="line">                <span class="keyword">let</span> value = key.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                value = value[value.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                fs.<span class="title function_">writeFile</span>(<span class="string">`./dist/<span class="subst">$&#123;value&#125;</span>`</span>, codeInfo[key][<span class="string">&#x27;code&#x27;</span>], [], <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">rmdir</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> err = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> isDir = fs.<span class="title function_">existsSync</span>(<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isDir)&#123;</span><br><span class="line">            fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;dist&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;,  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                    err = error</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">generateCode</span>(<span class="string">&#x27;./src/index.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此我们的一个简单的<code>JavaScript打包器</code>实现完了，实现这个简单的打包器只是用于了解和理解先在主流打包器的原理。</p><p>我们现在这个打包器还有些缺陷：</p><ul><li>不可以打包嵌套的目录文件。</li><li>只能打包<code>js</code>文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的数据类型</title>
      <link href="/2022/12/07/202212070904/"/>
      <url>/2022/12/07/202212070904/</url>
      
        <content type="html"><![CDATA[<p>JavaScript的数据类型，也可以称为原始类型，加上es6的<strong>Symbol</strong>现在一共是七种，分别是：<strong>Undefined</strong>、<strong>Null</strong>、<strong>Boolean</strong>、<strong>Number</strong>、<strong>object</strong>、<strong>String</strong>和<strong>Symbol</strong></p><p>本章节只是对这些数据类型进行了简单描述，以便理解 </p><h2 id="一、-undefined"><a href="#一、-undefined" class="headerlink" title="一、 undefined"></a>一、 undefined</h2><p><strong>undefined</strong>表示值未定义，只有一个值，就是特殊值<strong>undefined</strong> 。当使用<strong>var</strong>或<strong>let</strong>声明了变量但没有初始化时，就相当于给变量赋予了<strong>undefined</strong>值</p><h2 id="二、boolean"><a href="#二、boolean" class="headerlink" title="二、boolean"></a>二、boolean</h2><p><strong>boolean</strong>表示值为布尔值；值只有true和false</p><h2 id="三、string"><a href="#三、string" class="headerlink" title="三、string"></a>三、string</h2><p>String（字符串）数据类型表示零或多个16位Unicode字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（`）标示</p><h2 id="四、-number"><a href="#四、-number" class="headerlink" title="四、 number"></a>四、 number</h2><p>数值，<strong>Number</strong>类型使用IEEE 754格式表示整数和浮点值（在某些语言中也叫双精度值）,最基本的数值字面量格式是十进制整数，也就是我们日常使用的数值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> intNum = 55; // 整数</span><br></pre></td></tr></table></figure><h2 id="五、object"><a href="#五、object" class="headerlink" title="五、object"></a>五、object</h2><p>用来表示一组数据和功能的集合。可以通过new关键字创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj = new Object()</span><br></pre></td></tr></table></figure><p>相比较上面的创建，下面的创建方式在日常中使用的更多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj = &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="六、null"><a href="#六、null" class="headerlink" title="六、null"></a>六、null</h2><p><strong>Null</strong>只有一个值，即特殊值<strong>null</strong>。逻辑上讲，<strong>null</strong>值表示一个空对象指针，这也是给<strong>typeof</strong>传一个<strong>null</strong>会返回<strong>object</strong>的原因</p><h2 id="七、-symbol"><a href="#七、-symbol" class="headerlink" title="七、 symbol"></a>七、 symbol</h2><p><strong>Symbol（符号）</strong> 是<strong>ES6</strong>新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。<br>尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为<strong>Object API</strong>提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。</p><h6 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h6><p>符号需要使用<strong>Symbol()<strong>函数初始化。因为符号本身是原始类型，所以</strong>typeof</strong>操作符对符号返回<strong>symbol</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> sym = Symbol();</span><br><span class="line">  console.log(typeof sym); // symbol</span><br></pre></td></tr></table></figure><p>调用**Symbol()**函数时，也可以传入一个字符串参数作为对符号的描述</p><p><strong>Symbol</strong>不可与<strong>new</strong>一起使用</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现电子签名（web、移动端）通用</title>
      <link href="/2022/12/07/202212071201/"/>
      <url>/2022/12/07/202212071201/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在现在的时代发展中，从以前的手写签名，逐渐衍生出了电子签名。电子签名和纸质手写签名一样具有法律效应。电子签名目前主要还是在需要个人确认的产品环节和司法类相关的产品上较多。</p><p>举个常用的例子，大家都用过钉钉，钉钉上面就有电子签名，相信大家这肯定是知道的。</p><p>那作为前端的我们如何实现电子签名呢？其实在<code>html5</code>中已经出现了一个重要级别的辅助标签，是啥呢？那就是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">canvas</a>。</p><h2 id="什么是canvas"><a href="#什么是canvas" class="headerlink" title="什么是canvas"></a>什么是<code>canvas</code></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API"><code>Canvas（画布）</code></a>是在<code>HTML5</code>中新增的标签用于在网页实时生成图像，并且可以操作图像内容，基本上它是一个可以用<code>JavaScript</code>操作的<code>位图（bitmap）</code>。<code>Canvas</code> 对象表示一个 <code>HTML</code> 画布元素 -。它没有自己的行为，但是定义了一个 API 支持脚本化客户端绘图操作。</p><p>大白话就是<code>canvas</code>是一个可以在上面通过<code>javaScript</code>画图的标签，通过其提供的<code>context(上下文)</code>及<code>Api</code>进行绘制，在这个过程中<code>canvas</code>充当画布的角色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p><code>canvas</code>给我们提供了很多的<code>Api</code>，供我们使用，我们只需要在<code>body</code>标签中创建一个<code>canvas</code>标签，在<code>script</code>标签中拿到<code>canvas</code>这个标签的节点，并创建<code>context(上下文)</code>就可以使用了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas 实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>步入正题。</p><h2 id="实现电子签名"><a href="#实现电子签名" class="headerlink" title="实现电子签名"></a>实现电子签名</h2><p>知道几何的朋友都很清楚，线有点绘成，面由线绘成。</p><p>多点成线，多线成面。</p><p>所以我们实际只需要拿到当前触摸的坐标点，进行成线处理就可以了。</p><h4 id="在body中添加canvas标签"><a href="#在body中添加canvas标签" class="headerlink" title="在body中添加canvas标签"></a>在<code>body</code>中添加<code>canvas</code>标签</h4><p>在这里我们不仅需要在在<code>body</code>中添加<code>canvas</code>标签，我们还需要添加两个按钮，分别是<code>取消</code>和<code>保存</code>（后面我们会用到）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h4><p>我这里全程使用<code>js</code>进行样式设置及添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置内容</span></span><br><span class="line">    <span class="keyword">const</span> config = &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">400</span>, <span class="comment">// 宽度</span></span><br><span class="line">        <span class="attr">height</span>: <span class="number">200</span>, <span class="comment">// 高度</span></span><br><span class="line">        <span class="attr">lineWidth</span>: <span class="number">5</span>, <span class="comment">// 线宽</span></span><br><span class="line">        <span class="attr">strokeStyle</span>: <span class="string">&#x27;red&#x27;</span>, <span class="comment">// 线条颜色</span></span><br><span class="line">        <span class="attr">lineCap</span>: <span class="string">&#x27;round&#x27;</span>, <span class="comment">// 设置线条两端圆角</span></span><br><span class="line">        <span class="attr">lineJoin</span>: <span class="string">&#x27;round&#x27;</span>, <span class="comment">// 线条交汇处圆角</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="获取canvas实例"><a href="#获取canvas实例" class="headerlink" title="获取canvas实例"></a>获取<code>canvas</code>实例</h4><p>这里我们使用<code>querySelector</code>获取<code>canvas</code>的dom实例，并设置样式和创建上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取canvas 实例</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"><span class="comment">// 设置宽高</span></span><br><span class="line">canvas.<span class="property">width</span> = config.<span class="property">width</span></span><br><span class="line">canvas.<span class="property">height</span> = config.<span class="property">height</span></span><br><span class="line"><span class="comment">// 设置一个边框，方便我们查看及使用</span></span><br><span class="line">canvas.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;1px solid #000&#x27;</span></span><br><span class="line"><span class="comment">// 创建上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h4><p>我们将<code>canvas</code>的填充色为透明，并绘制填充一个矩形，作为我们的画布，如果不设置这个填充背景色，在我们初识渲染的时候是一个黑色背景，这也是它的一个默认色。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置填充背景色</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;transparent&#x27;</span></span><br><span class="line"><span class="comment">// 绘制填充矩形</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(</span><br><span class="line">    <span class="number">0</span>, <span class="comment">// x 轴起始绘制位置</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">// y 轴起始绘制位置</span></span><br><span class="line">    config.<span class="property">width</span>, <span class="comment">// 宽度</span></span><br><span class="line">    config.<span class="property">height</span> <span class="comment">// 高度</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="上次绘制路径保存"><a href="#上次绘制路径保存" class="headerlink" title="上次绘制路径保存"></a>上次绘制路径保存</h4><p>这里我们需要声明一个对象，用来记录我们上一次绘制的路径结束坐标点及偏移量。</p><ul><li>保存上次坐标点这个我不用说大家都懂；</li><li>为啥需要保存偏移量呢，因为鼠标和画布上的距离是存在一定的偏移距离，在我们绘制的过程中需要减去这个偏移量，才是我们实际的绘制坐标。</li><li>但我发现<code>chrome</code>中不需要减去这个偏移量，拿到的就是实际的坐标，之前在微信小程序中使用就需要减去偏移量，需要在小程序中使用的朋友需要注意这一点哦。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存上次绘制的 坐标及偏移量</span></span><br><span class="line"><span class="keyword">const</span> client = &#123;</span><br><span class="line">    <span class="attr">offsetX</span>: <span class="number">0</span>, <span class="comment">// 偏移量</span></span><br><span class="line">    <span class="attr">offsetY</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">endX</span>: <span class="number">0</span>, <span class="comment">// 坐标</span></span><br><span class="line">    <span class="attr">endY</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设备兼容"><a href="#设备兼容" class="headerlink" title="设备兼容"></a>设备兼容</h4><p>我们需要它不仅可以在<code>web</code>端使用，还需要在<code>移动端</code>使用，我们需要给它做设备兼容处理。我们通过调用<code>navigator.userAgent</code>获取当前设备信息，进行正则匹配判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为移动端</span></span><br><span class="line"><span class="keyword">const</span> mobileStatus = (<span class="regexp">/Mobile|Android|iPhone/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>这里我们在监听<code>鼠标按下(mousedown)</code>(web端)/<code>触摸开始(touchstart)</code>的时候进行初始化，事件监听采用<code>addEventListener</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建鼠标/手势按下监听器</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(mobileStatus ? <span class="string">&quot;touchstart&quot;</span> : <span class="string">&quot;mousedown&quot;</span>, init)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>三元判断说明：</strong> 这里当<code>mobileStatus</code>为<code>true</code>时则表示为<code>移动端</code>，反之则为<code>web端</code>，后续使用到的<code>三元</code>依旧是这个意思。</p></blockquote><p><strong>声明初始化方法</strong></p><p>我们添加一个<code>init</code>方法作为监听<code>鼠标按下</code>/<code>触摸开始</code>的回调方法。</p><p>这里我们需要获取到当前<code>鼠标按下</code>/<code>触摸开始</code>的偏移量和坐标，进行起始点绘制。</p><blockquote><p>Tips：<code>web端</code>可以直接通过<code>event</code>中取到，而移动端则需要在<code>event.changedTouches[0]</code>中取到。</p></blockquote><p>这里我们在初始化后再监听鼠标的移动。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取偏移量及坐标</span></span><br><span class="line">    <span class="keyword">const</span> &#123; offsetX, offsetY, pageX, pageY &#125; = mobileStatus ? event.<span class="property">changedTouches</span>[<span class="number">0</span>] : event </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改上次的偏移量及坐标</span></span><br><span class="line">    client.<span class="property">offsetX</span> = offsetX</span><br><span class="line">    client.<span class="property">offsetY</span> = offsetY</span><br><span class="line">    client.<span class="property">endX</span> = pageX</span><br><span class="line">    client.<span class="property">endY</span> = pageY</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除以上一次 beginPath 之后的所有路径，进行绘制</span></span><br><span class="line">    ctx.<span class="title function_">beginPath</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据配置文件设置进行相应配置</span></span><br><span class="line">    ctx.<span class="property">lineWidth</span> = config.<span class="property">lineWidth</span></span><br><span class="line">    ctx.<span class="property">strokeStyle</span> = config.<span class="property">strokeStyle</span></span><br><span class="line">    ctx.<span class="property">lineCap</span> = config.<span class="property">lineCap</span></span><br><span class="line">    ctx.<span class="property">lineJoin</span> = config.<span class="property">lineJoin</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画线起始点位</span></span><br><span class="line">    ctx.<span class="title function_">moveTo</span>(client.<span class="property">endX</span>, client.<span class="property">endY</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 鼠标移动或手势移动</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(mobileStatus ? <span class="string">&quot;touchmove&quot;</span> : <span class="string">&quot;mousemove&quot;</span>, draw)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h4><p>这里我们添加绘制<code>draw</code>方法，作为监听<code>鼠标移动</code>/<code>触摸移动</code>的回调方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">draw</span> = event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取当前坐标点位</span></span><br><span class="line">    <span class="keyword">const</span> &#123; pageX, pageY &#125; = mobileStatus ? event.<span class="property">changedTouches</span>[<span class="number">0</span>] : event</span><br><span class="line">    <span class="comment">// 修改最后一次绘制的坐标点</span></span><br><span class="line">    client.<span class="property">endX</span> = pageX</span><br><span class="line">    client.<span class="property">endY</span> = pageY</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据坐标点位移动添加线条</span></span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(pageX , pageY )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制</span></span><br><span class="line">    ctx.<span class="title function_">stroke</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结束绘制"><a href="#结束绘制" class="headerlink" title="结束绘制"></a>结束绘制</h4><p>添加了监听<code>鼠标移动</code>/<code>触摸移动</code>我们一定要记得取消监听并结束绘制，不然的话它会一直监听并绘制的。</p><p>这里我们创建一个<code>cloaseDraw</code>方法作为<code>鼠标弹起</code>/<code>结束触摸</code>的回调方法来结束绘制并移除<code>鼠标移动</code>/<code>触摸移动</code>的监听。</p><p><code>canvas</code>结束绘制则需要调用<code>closePath()</code>让其结束绘制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结束绘制</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cloaseDraw</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 结束绘制</span></span><br><span class="line">    ctx.<span class="title function_">closePath</span>()</span><br><span class="line">    <span class="comment">// 移除鼠标移动或手势移动监听器</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, draw)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加结束回调监听器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建鼠标/手势 弹起/离开 监听器</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(mobileStatus ? <span class="string">&quot;touchend&quot;</span> :<span class="string">&quot;mouseup&quot;</span>, cloaseDraw)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ok，现在我们的电子签名功能还差一丢丢可以实现完了，现在已经可以正常的签名了。</p><p>我们来看一下效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f94fdafa0d98404fb69cf05a4d95858b~tplv-k3u1fbpfcp-watermark.image" alt="291891492291361822022-12-07-11-13-41.gif"></p><h4 id="取消功能-清空画布"><a href="#取消功能-清空画布" class="headerlink" title="取消功能/清空画布"></a>取消功能/清空画布</h4><p>我们在刚开始创建的那两个按钮开始排上用场了。</p><p>这里我们创建一个<code>cancel</code>的方法作为取消并清空画布使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消-清空画布</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 清空当前画布上的所有绘制内容</span></span><br><span class="line">    ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, config.<span class="property">width</span>, config.<span class="property">height</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们将这个方法和<code>取消按钮</code>进行绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;cancel()&quot;</span>&gt;取消&lt;/button&gt;</span><br></pre></td></tr></table></figure><h4 id="保存功能"><a href="#保存功能" class="headerlink" title="保存功能"></a>保存功能</h4><p>这里我们创建一个<code>save</code>的方法作为保存画布上的内容使用。</p><p>将画布上的内容保存为<code>图片/文件</code>的方法有很多，比较常见的是<code>blob</code>和<code>toDataURL</code>这两种方案，但<code>toDataURL</code>这哥们没<code>blob</code>强，适配也不咋滴。所以我们这里采用<code>a</code>标签 ➕ <code>blob</code>方案实现图片的保存下载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存-将画布内容保存为图片</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">save</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 将canvas上的内容转成blob流</span></span><br><span class="line">    canvas.<span class="title function_">toBlob</span>(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前时间并转成字符串，用来当做文件名</span></span><br><span class="line">        <span class="keyword">const</span> date = <span class="title class_">Date</span>.<span class="title function_">now</span>().<span class="title function_">toString</span>()</span><br><span class="line">        <span class="comment">// 创建一个 a 标签</span></span><br><span class="line">        <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="comment">// 设置 a 标签的下载文件名</span></span><br><span class="line">        a.<span class="property">download</span> = <span class="string">`<span class="subst">$&#123;date&#125;</span>.png`</span></span><br><span class="line">        <span class="comment">// 设置 a 标签的跳转路径为 文件流地址</span></span><br><span class="line">        a.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">        <span class="comment">// 手动触发 a 标签的点击事件</span></span><br><span class="line">        a.<span class="title function_">click</span>()</span><br><span class="line">        <span class="comment">// 移除 a 标签</span></span><br><span class="line">        a.<span class="title function_">remove</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们将这个方法和<code>保存按钮</code>进行绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;save()&quot;</span>&gt;保存&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>我们将刚刚绘制的内容进行保存，点击保存按钮，就会进行下载保存</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bbc5b0571bf4e14879b5235b5ae89be~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;canvas&gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button onclick=&quot;cancel()&quot;&gt;取消&lt;/button&gt;</span><br><span class="line">        &lt;button onclick=&quot;save()&quot;&gt;保存&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 配置内容</span><br><span class="line">    const config = &#123;</span><br><span class="line">        width: 400, // 宽度</span><br><span class="line">        height: 200, // 高度</span><br><span class="line">        lineWidth: 5, // 线宽</span><br><span class="line">        strokeStyle: &#x27;red&#x27;, // 线条颜色</span><br><span class="line">        lineCap: &#x27;round&#x27;, // 设置线条两端圆角</span><br><span class="line">        lineJoin: &#x27;round&#x27;, // 线条交汇处圆角</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取canvas 实例</span><br><span class="line">    const canvas = document.querySelector(&#x27;canvas&#x27;)</span><br><span class="line">    // 设置宽高</span><br><span class="line">    canvas.width = config.width</span><br><span class="line">    canvas.height = config.height</span><br><span class="line">    // 设置一个边框</span><br><span class="line">    canvas.style.border = &#x27;1px solid #000&#x27;</span><br><span class="line">    // 创建上下文</span><br><span class="line">    const ctx = canvas.getContext(&#x27;2d&#x27;)</span><br><span class="line"></span><br><span class="line">    // 设置填充背景色</span><br><span class="line">    ctx.fillStyle = &#x27;transparent&#x27;</span><br><span class="line">    // 绘制填充矩形</span><br><span class="line">    ctx.fillRect(</span><br><span class="line">        0, // x 轴起始绘制位置</span><br><span class="line">        0, // y 轴起始绘制位置</span><br><span class="line">        config.width, // 宽度</span><br><span class="line">        config.height // 高度</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // 保存上次绘制的 坐标及偏移量</span><br><span class="line">    const client = &#123;</span><br><span class="line">        offsetX: 0, // 偏移量</span><br><span class="line">        offsetY: 0,</span><br><span class="line">        endX: 0, // 坐标</span><br><span class="line">        endY: 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断是否为移动端</span><br><span class="line">    const mobileStatus = (/Mobile|Android|iPhone/i.test(navigator.userAgent))</span><br><span class="line"></span><br><span class="line">    // 初始化</span><br><span class="line">    const init = event =&gt; &#123;</span><br><span class="line">        // 获取偏移量及坐标</span><br><span class="line">        const &#123; offsetX, offsetY, pageX, pageY &#125; = mobileStatus ? event.changedTouches[0] : event </span><br><span class="line"></span><br><span class="line">        // 修改上次的偏移量及坐标</span><br><span class="line">        client.offsetX = offsetX</span><br><span class="line">        client.offsetY = offsetY</span><br><span class="line">        client.endX = pageX</span><br><span class="line">        client.endY = pageY</span><br><span class="line"></span><br><span class="line">        // 清除以上一次 beginPath 之后的所有路径，进行绘制</span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        // 根据配置文件设置相应配置</span><br><span class="line">        ctx.lineWidth = config.lineWidth</span><br><span class="line">        ctx.strokeStyle = config.strokeStyle</span><br><span class="line">        ctx.lineCap = config.lineCap</span><br><span class="line">        ctx.lineJoin = config.lineJoin</span><br><span class="line">        // 设置画线起始点位</span><br><span class="line">        ctx.moveTo(client.endX, client.endY)</span><br><span class="line">        // 监听 鼠标移动或手势移动</span><br><span class="line">        window.addEventListener(mobileStatus ? &quot;touchmove&quot; : &quot;mousemove&quot;, draw)</span><br><span class="line">    &#125;</span><br><span class="line">    // 绘制</span><br><span class="line">    const draw = event =&gt; &#123;</span><br><span class="line">        // 获取当前坐标点位</span><br><span class="line">        const &#123; pageX, pageY &#125; = mobileStatus ? event.changedTouches[0] : event</span><br><span class="line">        // 修改最后一次绘制的坐标点</span><br><span class="line">        client.endX = pageX</span><br><span class="line">        client.endY = pageY</span><br><span class="line"></span><br><span class="line">        // 根据坐标点位移动添加线条</span><br><span class="line">        ctx.lineTo(pageX , pageY )</span><br><span class="line"></span><br><span class="line">        // 绘制</span><br><span class="line">        ctx.stroke()</span><br><span class="line">    &#125;</span><br><span class="line">    // 结束绘制</span><br><span class="line">    const cloaseDraw = () =&gt; &#123;</span><br><span class="line">        // 结束绘制</span><br><span class="line">        ctx.closePath()</span><br><span class="line">        // 移除鼠标移动或手势移动监听器</span><br><span class="line">        window.removeEventListener(&quot;mousemove&quot;, draw)</span><br><span class="line">    &#125;</span><br><span class="line">    // 创建鼠标/手势按下监听器</span><br><span class="line">    window.addEventListener(mobileStatus ? &quot;touchstart&quot; : &quot;mousedown&quot;, init)</span><br><span class="line">    // 创建鼠标/手势 弹起/离开 监听器</span><br><span class="line">    window.addEventListener(mobileStatus ? &quot;touchend&quot; :&quot;mouseup&quot;, cloaseDraw)</span><br><span class="line">    </span><br><span class="line">    // 取消-清空画布</span><br><span class="line">    const cancel = () =&gt; &#123;</span><br><span class="line">        // 清空当前画布上的所有绘制内容</span><br><span class="line">        ctx.clearRect(0, 0, config.width, config.height)</span><br><span class="line">    &#125;</span><br><span class="line">    // 保存-将画布内容保存为图片</span><br><span class="line">    const save = () =&gt; &#123;</span><br><span class="line">        // 将canvas上的内容转成blob流</span><br><span class="line">        canvas.toBlob(blob =&gt; &#123;</span><br><span class="line">            // 获取当前时间并转成字符串，用来当做文件名</span><br><span class="line">            const date = Date.now().toString()</span><br><span class="line">            // 创建一个 a 标签</span><br><span class="line">            const a = document.createElement(&#x27;a&#x27;)</span><br><span class="line">            // 设置 a 标签的下载文件名</span><br><span class="line">            a.download = `$&#123;date&#125;.png`</span><br><span class="line">            // 设置 a 标签的跳转路径为 文件流地址</span><br><span class="line">            a.href = URL.createObjectURL(blob)</span><br><span class="line">            // 手动触发 a 标签的点击事件</span><br><span class="line">            a.click()</span><br><span class="line">            // 移除 a 标签</span><br><span class="line">            a.remove()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="各内核和浏览器支持情况"><a href="#各内核和浏览器支持情况" class="headerlink" title="各内核和浏览器支持情况"></a>各内核和浏览器支持情况</h2><p>Mozilla 程序从 Gecko 1.8 (<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/1.5" title="Currently only available in English (US)">Firefox 1.5 (en-US)</a>) 开始支持 <code>&lt;canvas&gt;</code>。它首先是由 Apple 引入的，用于 OS X Dashboard 和 Safari。Internet Explorer 从 IE9 开始支持<code>&lt;canvas&gt;</code> ，更旧版本的 IE 中，页面可以通过引入 Google 的 <a href="https://github.com/arv/explorercanvas">Explorer Canvas</a> 项目中的脚本来获得<code>&lt;canvas&gt;</code>支持。Google Chrome 和 Opera 9+ 也支持 <code>&lt;canvas&gt;</code>。</p><h2 id="小程序中提示"><a href="#小程序中提示" class="headerlink" title="小程序中提示"></a>小程序中提示</h2><p>在小程序中我们如果需呀实现的话，也是同样的原理哦，只是我们需要将<code>创建实例和上下文</code>的<code>Api</code>进行修改，因为小程序中是没有<code>dom</code>，既然没有<code>dom</code>，哪来的<code>操作dom</code>这个操作呢。</p><ul><li><p>如果是<code>uni-app</code>则需要使用<a href="https://uniapp.dcloud.net.cn/api/canvas/createCanvasContext.html">uni.createCanvasContext</a>进行上下文创建</p></li><li><p>如果是原生微信小程序则使用<a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createCanvasContext.html"><code>wx.createCanvasContext</code></a>进行创建（2.9.0）之后的库不支持</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用css实现水珠/水滴效果</title>
      <link href="/2022/12/06/202212061133/"/>
      <url>/2022/12/06/202212061133/</url>
      
        <content type="html"><![CDATA[<ul><li>我：ui，这里需要一个水珠效果图</li><li>ui：现在没空，你不能自己在网上找一个或者自己做一个吗？</li><li>我：啊这…</li><li>我：行吧，你空了给我做一下</li><li>ui：…哦可</li></ul><p>手写就手写，谁怕谁，直接开干。</p><p>这里我们在一个新建的<code>html</code>中编写。</p><p>新建一个<code>html</code>。</p><p>在<code>head</code>标签中新建一个<code>style</code>标签，并去除多余边距。</p><p>这里为什么需要去除多余的边距呢？</p><p>是因为有些内核的浏览器会默认自带一些边距，为了在所有浏览器中看起来都是一样的效果，我们需要给它去除掉，也就是初始化一次。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>body</code>中新建一个<code>div</code>盒子用来呈现我们的水珠效果，我们先给他加个<code>class</code>类名为<code>water</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;water&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们接下来给<code>body</code>加个宽高和颜色，方便看我们的水珠效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">   <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在我们的浏览器中打开我们的<code>html</code>，除了<code>body</code>有颜色之外，其他啥也没有，如下图</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54b1fdcb9ea74091b54e33745175b3ad~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们给刚刚声明的<code>.water</code>类名添加基础样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.water</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">50px</span>;</span><br><span class="line">        <span class="comment">/* 前期使用，方便看效果 */</span></span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在就有一个这样黑色的框框了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a79d56b80b5844d7bae61c7d95679bcf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>这啥呀？就一个黑色的框框哪里是水珠了。哎，别急嘛，我们给他加个<code>border-radius</code>看看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.water</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">50px</span>;</span><br><span class="line">        <span class="comment">/* 前期使用，方便看效果 */</span></span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">61%</span> <span class="number">39%</span> <span class="number">57%</span> <span class="number">43%</span> / <span class="number">46%</span> <span class="number">67%</span> <span class="number">33%</span> <span class="number">54%</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f26f12a9cc544b9bb7162a1a3e95f828~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>现在看起来是不是有哪个轮廓了。</p><p>emmm..还是不像。</p><p>还有我之前都没见过<code>border-radius</code>这种写法，啥意思呢？</p><p>解释一哈：</p><p>这种写法一般很少使用，我们都是使用的简写。</p><p>简写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure><p>转成全写就长这样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> / <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span>;</span><br></pre></td></tr></table></figure><p>那你还是没有说是啥意思嘛，诶，解释它来了：</p><blockquote><p><code>/</code> 前的四个数值表示圆角的水平半径</p><p><code>/</code> 后的四个数值表示圆角的直角半径</p></blockquote><p>看张图，就知道所以然了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2bf48876e014a9cbbf1fa08610c4606~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>如果还是不是很明白，我们又来画张图<br>下面代码中使用的简写方式，转成全写就是这样的<code>border-radius: 50px 50px 50px 50px / 40px 40px 40px 40px;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50px</span> / <span class="number">40px</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04bd34e0ce0e4f098fd9f1ed074f9fee~tplv-k3u1fbpfcp-watermark.image" alt="未命名.jpg"></p><p>相信你们这样就懂了。</p><blockquote><p>谨记： 不论是圆角矩形、椭圆还是圆形，它所根据的是水平半径和垂直半径的值，根据这个给元素设置圆角的弧度。<br>所以一定要记住<code>border-radius</code>的完整写法，才能深刻的从根本上知道这“狡猾”的代码是怎么计算生成最终的图形样式的。</p></blockquote><p>补充了一点<code>border-radius</code>的相关知识，我们继续，上面我们实现了一个黑色的框框，下面我们来给它添加内阴影，让它看起来更逼真。并且去掉才开始添加的<code>border</code>，不去掉的话看起来有点丑。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.water</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">50px</span>;</span><br><span class="line">        <span class="comment">/* border: 1px solid black; */</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">61%</span> <span class="number">39%</span> <span class="number">57%</span> <span class="number">43%</span> / <span class="number">46%</span> <span class="number">67%</span> <span class="number">33%</span> <span class="number">54%</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: inset <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>),</span><br><span class="line">                        <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>),</span><br><span class="line">                        <span class="number">15px</span> <span class="number">15px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>),</span><br><span class="line">                    inset -<span class="number">10px</span> -<span class="number">20px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63985cfe0f9b4b9590690d6553d88ce9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这里我就不说<code>box-shadow</code>了，我直接上<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow">MDN</a>的链接地址。</p><p>为什么不说呢？打字累啊😭</p><p>加了<code>box-shadow</code>看起来是不是很nice了，我们现在在给他加两个水滴，看起来更真实一些，这里我使用的是伪类<code>before</code>和<code>after</code>实现。</p><p>直接上代码：</p><p><strong>before</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.water</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">15%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">46%</span> <span class="number">54%</span> <span class="number">36%</span> <span class="number">64%</span> / <span class="number">46%</span> <span class="number">43%</span> <span class="number">57%</span> <span class="number">54%</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>切记使用伪类一定要加<code>content</code>，不然不生效</p><p><strong>after</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.water</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">30%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">46%</span> <span class="number">54%</span> <span class="number">36%</span> <span class="number">64%</span> / <span class="number">46%</span> <span class="number">43%</span> <span class="number">57%</span> <span class="number">54%</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于这两个伪类的详细解释可以看<code>MDN</code>，这里我把地址给大家奉上: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after">after</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before">before</a></p><p>添加伪类的同时记得给<code>water</code>添加相对定位<code>position: relative;</code>。</p><p>添加完就长这样了。现在还差最后一步，我们的小水珠就完成了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a742f965a1f41acb298bd3b7dfd74b3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们给他加上动画<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation">animation</a>属性，让他栩栩如生</p><p>给<code>.water</code>添加以下动画属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: water-a <span class="number">3s</span> linear infinite alternate;</span><br></pre></td></tr></table></figure><p>给<code>.water::before</code>添加以下动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: water-b <span class="number">2s</span> linear infinite alternate;</span><br></pre></td></tr></table></figure><p>现在终于到了最后一步了，我们编写两个名为<code>water-a</code>和<code>water-b</code>的动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> water-a &#123;</span><br><span class="line">        <span class="number">25%</span> &#123;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">58%</span> <span class="number">42%</span> <span class="number">59%</span> <span class="number">41%</span> / <span class="number">52%</span> <span class="number">56%</span> <span class="number">54%</span> <span class="number">48%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">50%</span> &#123;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">46%</span> <span class="number">54%</span> <span class="number">40%</span> <span class="number">60%</span> / <span class="number">52%</span> <span class="number">33%</span> <span class="number">67%</span> <span class="number">48%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">75%</span> &#123;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">65%</span> <span class="number">35%</span> <span class="number">71%</span> <span class="number">29%</span> / <span class="number">31%</span> <span class="number">60%</span> <span class="number">40%</span> <span class="number">69%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">100%</span> &#123;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">60%</span> <span class="number">40%</span> <span class="number">43%</span> <span class="number">57%</span> / <span class="number">45%</span> <span class="number">51%</span> <span class="number">49%</span> <span class="number">55%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@keyframes</span> water-b &#123;</span><br><span class="line">        <span class="number">25%</span> &#123;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">17%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">50%</span> &#123;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">100%</span> &#123;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">22%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>好了，搞定收工，我们来看一下完整效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6632d44d643745cd9612658fe1cc821f~tplv-k3u1fbpfcp-watermark.image" alt="291891492291361822022-12-06-09-12-15.gif"></p><p>最后附上完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.water</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border: 1px solid black; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">61%</span> <span class="number">39%</span> <span class="number">57%</span> <span class="number">43%</span> / <span class="number">46%</span> <span class="number">67%</span> <span class="number">33%</span> <span class="number">54%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: inset <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>),</span></span><br><span class="line"><span class="language-css">                            <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>),</span></span><br><span class="line"><span class="language-css">                            <span class="number">15px</span> <span class="number">15px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>),</span></span><br><span class="line"><span class="language-css">                        inset -<span class="number">10px</span> -<span class="number">20px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: water-a <span class="number">3s</span> linear infinite alternate; </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.water</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">46%</span> <span class="number">54%</span> <span class="number">36%</span> <span class="number">64%</span> / <span class="number">46%</span> <span class="number">43%</span> <span class="number">57%</span> <span class="number">54%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: water-b <span class="number">2s</span> linear infinite alternate;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.water</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">46%</span> <span class="number">54%</span> <span class="number">36%</span> <span class="number">64%</span> / <span class="number">46%</span> <span class="number">43%</span> <span class="number">57%</span> <span class="number">54%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> water-a &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">25%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">58%</span> <span class="number">42%</span> <span class="number">59%</span> <span class="number">41%</span> / <span class="number">52%</span> <span class="number">56%</span> <span class="number">54%</span> <span class="number">48%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">46%</span> <span class="number">54%</span> <span class="number">40%</span> <span class="number">60%</span> / <span class="number">52%</span> <span class="number">33%</span> <span class="number">67%</span> <span class="number">48%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">75%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">65%</span> <span class="number">35%</span> <span class="number">71%</span> <span class="number">29%</span> / <span class="number">31%</span> <span class="number">60%</span> <span class="number">40%</span> <span class="number">69%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">60%</span> <span class="number">40%</span> <span class="number">43%</span> <span class="number">57%</span> / <span class="number">45%</span> <span class="number">51%</span> <span class="number">49%</span> <span class="number">55%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> water-b &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">25%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">top</span>: <span class="number">17%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">top</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">top</span>: <span class="number">22%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;water&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>终于搞定了。</p><p>还是 假巴意思（直译成普通话差不多就是<code>故意</code>的意思）的总结一下子，本篇的难点在于调试<code>border-radius</code>的圆角比例，怎么让他看起来更真实。</p><p>哦可，总结完了。</p><p>散会。</p><p>本篇<code>使用css实现水珠/水滴效果</code>的文章到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js-结合gsap动画库，给我们的盒子添加旋转_移动动画</title>
      <link href="/2022/12/06/202212061144/"/>
      <url>/2022/12/06/202212061144/</url>
      
        <content type="html"><![CDATA[<h2 id="gitee-地址"><a href="#gitee-地址" class="headerlink" title="gitee 地址"></a>gitee 地址</h2><p><code>gitee</code>地址： <a href="https://gitee.com/xiaoruil/study-three.js">gittee地址</a></p><h2 id="本篇目标"><a href="#本篇目标" class="headerlink" title="本篇目标"></a>本篇目标</h2><ul><li>结合<code>gsap</code>动画库，添加动画使我们的盒子更加顺畅的移动和旋转<h2 id="gsap介绍"><a href="#gsap介绍" class="headerlink" title="gsap介绍"></a><code>gsap</code>介绍</h2><code>gsap</code>是一款以<code>javascript</code>实现方式实现的动画库。</li></ul><p><code>gsap</code>有很多的<code>Api</code>我这里就不做详细的解释了，大家可以去看官方文档，我这里把文档给摆出来。</p><p>文档：</p><ul><li><a href="https://greensock.com/docs/">英文文档</a></li><li><a href="https://www.tweenmax.com.cn/api/tweenmax/">中文文档</a></li></ul><p>相信同时点击了中文文档和英文文档的同学，有点纳闷，这两个名字不一样啊。其实是没关系的，这两个是一个子集关系，都是一样的。大家放心看吧。</p><h2 id="下载gsap"><a href="#下载gsap" class="headerlink" title="下载gsap"></a>下载<code>gsap</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm</span></span><br><span class="line">npm i gsap -s</span><br><span class="line"><span class="comment">// pnpm</span></span><br><span class="line">pnpm i gsap -s</span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn add gsap</span><br></pre></td></tr></table></figure><h2 id="在项目中使用gsap动画库"><a href="#在项目中使用gsap动画库" class="headerlink" title="在项目中使用gsap动画库"></a>在项目中使用<code>gsap</code>动画库</h2><h4 id="在项目中引入gsap"><a href="#在项目中引入gsap" class="headerlink" title="在项目中引入gsap"></a>在项目中引入<code>gsap</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 gsap 动画库</span></span><br><span class="line"><span class="keyword">import</span> gsap <span class="keyword">from</span> <span class="string">&quot;gsap&quot;</span></span><br></pre></td></tr></table></figure><h4 id="添加动画"><a href="#添加动画" class="headerlink" title="添加动画"></a>添加动画</h4><p>我们先让我们的动画像 x 轴移动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加动画</span></span><br><span class="line">gsap.<span class="title function_">to</span>(</span><br><span class="line">    cube.<span class="property">position</span>, <span class="comment">// 需要执行动画的参数对象</span></span><br><span class="line">    &#123;<span class="comment">// 执行动画的目标参数</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">10</span>, <span class="comment">// 使盒子移动到 x 轴为 5 的位置</span></span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span>, <span class="comment">// 需要的时间，5秒</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样过后我们的盒子就会在 x 轴向右移动到 10 的位置但它只会执行一次，我们怎么样让他多执行几次呢，或者无限执行，再或者一直往返运动<br><strong>添加动画执行次数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加动画</span></span><br><span class="line">gsap.<span class="title function_">to</span>(</span><br><span class="line">    cube.<span class="property">position</span>, <span class="comment">// 需要执行动画的参数对象</span></span><br><span class="line">    &#123;<span class="comment">// 执行动画的目标参数</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">10</span>, <span class="comment">// 使盒子移动到 x 轴为 5 的位置</span></span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span>, <span class="comment">// 需要的时间，5秒</span></span><br><span class="line">        <span class="attr">repeat</span>: <span class="number">2</span>,<span class="comment">//动画执行次数，当执行次数为 -1 时，则无限次数执行</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>添加往返执行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加动画</span></span><br><span class="line">gsap.<span class="title function_">to</span>(</span><br><span class="line">    cube.<span class="property">position</span>, <span class="comment">// 需要执行动画的参数对象</span></span><br><span class="line">    &#123;<span class="comment">// 执行动画的目标参数</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">10</span>, <span class="comment">// 使盒子移动到 x 轴为 5 的位置</span></span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span>, <span class="comment">// 需要的时间，5秒</span></span><br><span class="line">        <span class="attr">repeat</span>: <span class="number">2</span>,<span class="comment">//动画执行次数</span></span><br><span class="line">        <span class="attr">yoyo</span>: <span class="literal">true</span>, <span class="comment">// 添加往返执行</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>现在我们的盒子就可以以堪称完美的动画效果执行了，但我们发现它在执行的过程中一直是同一个速度，没有抛物线的那种看着更加完美的执行动画，让我门给它加个抛物线性的动画效果。</p><p>先慢-&gt; 快 -&gt; 慢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加动画</span></span><br><span class="line">gsap.<span class="title function_">to</span>(</span><br><span class="line">    cube.<span class="property">position</span>, <span class="comment">// 需要执行动画的目标对象</span></span><br><span class="line">    &#123;<span class="comment">// 执行动画的目标参数</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">10</span>, <span class="comment">// 使盒子移动到 x 轴为 5 的位置</span></span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span>, <span class="comment">// 需要的时间，5秒</span></span><br><span class="line">        <span class="attr">ease</span>: <span class="string">&#x27;power1.inOut&#x27;</span>, <span class="comment">// 动画执行方式</span></span><br><span class="line">        <span class="attr">repeat</span>: <span class="number">2</span>,<span class="comment">//动画执行次数，当执行次数为 -1 时，则无限次数执行</span></span><br><span class="line">        <span class="attr">yoyo</span>: <span class="literal">true</span>, <span class="comment">// 添加往返执行</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>好了，搞定，现在看起来就很nice了。只有向 x 轴移动，不咋滴，我们给他添加一个旋转。<br>有了上面的移动案例，我门支持 copy 修改成旋转的 目对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加动画-旋转</span></span><br><span class="line">gsap.<span class="title function_">to</span>(</span><br><span class="line">    cube.<span class="property">rotation</span>, <span class="comment">// 需要执行动画的目标对象</span></span><br><span class="line">    &#123;<span class="comment">// 执行动画的目标参数</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">10</span>, <span class="comment">// 使盒子移动到 x 轴为 5 的位置</span></span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span>, <span class="comment">// 需要的时间，5秒</span></span><br><span class="line">        <span class="attr">ease</span>: <span class="string">&#x27;power1.inOut&#x27;</span>, <span class="comment">// 动画执行方式</span></span><br><span class="line">        <span class="attr">repeat</span>: <span class="number">2</span>,<span class="comment">//动画执行次数，当执行次数为 -1 时，则无限次数执行</span></span><br><span class="line">        <span class="attr">yoyo</span>: <span class="literal">true</span>, <span class="comment">// 添加往返执行</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>让我们来一起看看我们刚刚一顿猛如虎操作的效果：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9797d4db3ec44fd58d8e7638e1d9366d~tplv-k3u1fbpfcp-zoom-1.image" alt="291891492291361822022-12-05-15-11-46.gif"></p><h2 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h2><p>实现画布的响应式，根据屏幕尺寸自适应</p><h2 id="所有操作实现案例均以上传gitee，地址在文章开篇处。"><a href="#所有操作实现案例均以上传gitee，地址在文章开篇处。" class="headerlink" title="所有操作实现案例均以上传gitee，地址在文章开篇处。"></a>所有操作实现案例均以上传gitee，地址在文章开篇处。</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js-实现画布的响应式，根据屏幕尺寸自适应</title>
      <link href="/2022/12/06/202212061411/"/>
      <url>/2022/12/06/202212061411/</url>
      
        <content type="html"><![CDATA[<h2 id="gitee-地址"><a href="#gitee-地址" class="headerlink" title="gitee 地址"></a>gitee 地址</h2><p><code>gitee</code>地址： <a href="https://gitee.com/xiaoruil/study-three.js">gittee地址</a></p><h2 id="本篇目标"><a href="#本篇目标" class="headerlink" title="本篇目标"></a>本篇目标</h2><ul><li>实现画布的响应式，根据屏幕尺寸自适应</li><li>设置画布全屏，和退出全屏</li></ul><h2 id="实现画布的响应式"><a href="#实现画布的响应式" class="headerlink" title="实现画布的响应式"></a>实现画布的响应式</h2><p>我们这里需要用到原生的<code>addEventListener</code>用来监听我们窗口的变化。<br>我们需要将原来写死的画布大小改成窗口大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置大小</span></span><br><span class="line">renderer.<span class="title function_">setSize</span>(</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="comment">// 宽度</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerHeight</span> <span class="comment">// 高度</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="添加窗口变化监听器"><a href="#添加窗口变化监听器" class="headerlink" title="添加窗口变化监听器"></a>添加窗口变化监听器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加窗口变化监听器</span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>监听器添加完成后，我们需要在回调函数里面，重新设置其大小和比例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新修改相机比例</span></span><br><span class="line"> camera.<span class="property">aspect</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"> <span class="comment">// 更新摄像机的投影矩阵</span></span><br><span class="line"> camera.<span class="title function_">updateProjectionMatrix</span>()</span><br><span class="line"> <span class="comment">// 更新画布大小</span></span><br><span class="line"> renderer.<span class="title function_">setSize</span>(</span><br><span class="line">     <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="comment">// 宽度</span></span><br><span class="line">     <span class="variable language_">window</span>.<span class="property">innerHeight</span> <span class="comment">// 高度</span></span><br><span class="line"> );</span><br><span class="line"> <span class="comment">// 更新画布像素比</span></span><br><span class="line"> renderer.<span class="title function_">setPixelRatio</span>(<span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>)</span><br></pre></td></tr></table></figure><p>添加完后的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加窗口变化监听器</span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 更新修改相机比例</span></span><br><span class="line">    camera.<span class="property">aspect</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">    <span class="comment">// 更新摄像机的投影矩阵</span></span><br><span class="line">    camera.<span class="title function_">updateProjectionMatrix</span>()</span><br><span class="line">    <span class="comment">// 更新画布大小</span></span><br><span class="line">    renderer.<span class="title function_">setSize</span>(</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="comment">// 宽度</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerHeight</span> <span class="comment">// 高度</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 更新画布像素比</span></span><br><span class="line">    renderer.<span class="title function_">setPixelRatio</span>(<span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样无论我们怎么修改窗口，画布和相机投影内容都在屏幕的中间。</p><h3 id="设置画布全屏和退出全屏"><a href="#设置画布全屏和退出全屏" class="headerlink" title="设置画布全屏和退出全屏"></a>设置画布全屏和退出全屏</h3><p>这里设置请求画布全屏我们依然需要使用原生时间<code>addEventListener</code>作为监听，<code>requestFullscreen</code>来请求全屏，<code>exitFullscreen</code>来退出全屏操作。</p><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听鼠标双击事件</span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;dblclick&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前状态</span></span><br><span class="line">    <span class="keyword">const</span> fullscreenElement = <span class="variable language_">document</span>.<span class="property">fullscreenElement</span></span><br><span class="line">    <span class="keyword">if</span>(fullscreenElement)&#123;</span><br><span class="line">        <span class="comment">// 退出全屏</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">exitFullscreen</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求画布全屏</span></span><br><span class="line">    renderer.<span class="property">domElement</span>.<span class="title function_">requestFullscreen</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样我们设置和退出画布全屏的这个功能就做好了。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 three.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">// 引入控制器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/controls/OrbitControls&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标：实现画布响应式，设置画布全屏、退出全屏</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建场景</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建相机</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )</span></span><br><span class="line"><span class="comment">        fov — 摄像机视锥体垂直视野角度</span></span><br><span class="line"><span class="comment">        aspect — 摄像机视锥体长宽比</span></span><br><span class="line"><span class="comment">        near — 摄像机视锥体近端面</span></span><br><span class="line"><span class="comment">        far — 摄像机视锥体远端面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 透视相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">    <span class="number">75</span>, <span class="comment">// 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50。</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="comment">// 摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）。</span></span><br><span class="line">    <span class="number">0.1</span>, <span class="comment">// 摄像机的近端面，默认值是0.1。</span></span><br><span class="line">    <span class="number">1000</span> <span class="comment">// 摄像机的远端面，默认值 2000</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">    <span class="attr">antialias</span>: <span class="literal">true</span>, <span class="comment">// 开启抗锯齿</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 设置大小</span></span><br><span class="line">renderer.<span class="title function_">setSize</span>(</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="comment">// 宽度</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerHeight</span> <span class="comment">// 高度</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//挂载到页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加控制器</span></span><br><span class="line"><span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>( camera, renderer.<span class="property">domElement</span> );</span><br><span class="line"><span class="comment">// 开启控制器的阻尼效果</span></span><br><span class="line">controls.<span class="property">enableDamping</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 使用控制器</span></span><br><span class="line">controls.<span class="title function_">update</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加物体</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    width:立方体x轴的长度,</span></span><br><span class="line"><span class="comment">    height:立方体y轴的长度,</span></span><br><span class="line"><span class="comment">    depth:立方体z轴的长度也是深度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加材质</span></span><br><span class="line"><span class="comment">// const material = new THREE.MeshBasicMaterial(&#123; color: 0xffff0000 &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加材质</span></span><br><span class="line"><span class="keyword">const</span> materials = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    materials.<span class="title function_">push</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; </span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">0x00ff0000</span> </span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加网格</span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry, materials );</span><br><span class="line">scene.<span class="title function_">add</span>( cube );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置相机位置</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改场景背景颜色</span></span><br><span class="line">scene.<span class="property">background</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xffffcc99</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 三色坐标轴</span></span><br><span class="line"><span class="keyword">const</span> axesHelper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AxesHelper</span>(<span class="number">20</span>)</span><br><span class="line">scene.<span class="title function_">add</span>( axesHelper )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加窗口变化监听器</span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 更新修改相机比例</span></span><br><span class="line">    camera.<span class="property">aspect</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">    <span class="comment">// 更新摄像机的投影矩阵</span></span><br><span class="line">    camera.<span class="title function_">updateProjectionMatrix</span>()</span><br><span class="line">    <span class="comment">// 更新画布大小</span></span><br><span class="line">    renderer.<span class="title function_">setSize</span>(</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="comment">// 宽度</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerHeight</span> <span class="comment">// 高度</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 更新画布像素比</span></span><br><span class="line">    renderer.<span class="title function_">setPixelRatio</span>(<span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听鼠标双击事件</span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;dblclick&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前状态</span></span><br><span class="line">    <span class="keyword">const</span> fullscreenElement = <span class="variable language_">document</span>.<span class="property">fullscreenElement</span></span><br><span class="line">    <span class="keyword">if</span>(fullscreenElement)&#123;</span><br><span class="line">        <span class="comment">// 退出全屏</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">exitFullscreen</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求画布全屏</span></span><br><span class="line">    renderer.<span class="property">domElement</span>.<span class="title function_">requestFullscreen</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 requestAnimationFrame 执行动画</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line"></span><br><span class="line">    controls.<span class="title function_">update</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//scene:前面定义的场景,camera:前面定义的相机</span></span><br><span class="line">    <span class="comment">//renderTarget:渲染的目标默认是是渲染到前面定义的render变量中</span></span><br><span class="line">    <span class="comment">//forceClear:每次绘制之前都将画布的内容给清除,即使自动清除标志autoClear为false,也会清除</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="title function_">animate</span>()</span><br></pre></td></tr></table></figure><h2 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h2><p>结合<code>dat.gui</code>实现界面可视化修改及调试</p><h2 id="所有操作实现案例均以上传gitee，地址在文章开篇处。"><a href="#所有操作实现案例均以上传gitee，地址在文章开篇处。" class="headerlink" title="所有操作实现案例均以上传gitee，地址在文章开篇处。"></a>所有操作实现案例均以上传gitee，地址在文章开篇处。</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js-controls(控制器)</title>
      <link href="/2022/12/05/202212051121/"/>
      <url>/2022/12/05/202212051121/</url>
      
        <content type="html"><![CDATA[<h2 id="gitee-地址"><a href="#gitee-地址" class="headerlink" title="gitee 地址"></a>gitee 地址</h2><p><code>gitee</code>地址： <a href="https://gitee.com/xiaoruil/study-three.js">gittee地址</a></p><h2 id="本篇目标"><a href="#本篇目标" class="headerlink" title="本篇目标"></a>本篇目标</h2><ul><li>使用<code>controls</code>控制器对我们创建的模型添加交互<h2 id="添加controls控制器"><a href="#添加controls控制器" class="headerlink" title="添加controls控制器"></a>添加<code>controls</code>控制器</h2><h3 id="引入控制器"><a href="#引入控制器" class="headerlink" title="引入控制器"></a>引入控制器</h3>本文使用的是<code>OrbitControls(轨道控制器)</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入控制器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/controls/OrbitControls&quot;</span></span><br></pre></td></tr></table></figure><h6 id="控制器列表"><a href="#控制器列表" class="headerlink" title="控制器列表"></a>控制器列表</h6><table><thead><tr><th>控制器名称</th><th>控制器名称-中文</th><th>描述</th></tr></thead><tbody><tr><td>DragControls</td><td>拖放控制器</td><td>该类被用于提供一个拖放交互。</td></tr><tr><td><code>FirstPersonControls</code></td><td>第一人称控制器</td><td>该类是 FlyControls 的另一个实现。</td></tr><tr><td><code>OrbitControls</code></td><td>轨道控制器</td><td>可以使相机围绕目标进行轨道运动。</td></tr><tr><td><code>PointerLockControls</code></td><td>指针锁定控制器</td><td>该类的实现是基于<a href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API">Pointer Lock API</a>的。 对于第一人称3D游戏来说， PointerLockControls 是一个非常完美的选择。</td></tr><tr><td><code>TrackballControls</code></td><td>轨迹球控制器</td><td>TrackballControls 与 OrbitControls 相类似。然而，它不能恒定保持摄像机的up向量。 这意味着，如果摄像机绕过“北极”和“南极”，则不会翻转以保持“右侧朝上”。</td></tr><tr><td><code>TransformControls</code></td><td>变换控制器</td><td>该类可提供一种类似于在数字内容创建工具（例如Blender）中对模型进行交互的方式，来在3D空间中变换物体。 和其他控制器不同的是，变换控制器不倾向于对场景摄像机的变换进行改变。</td></tr><tr><td><code>FlyControls</code></td><td>飞行控制器</td><td>FlyControls 启用了一种类似于数字内容创建工具（例如Blender）中飞行模式的导航方式。 你可以在3D空间中任意变换摄像机，并且无任何限制（例如，专注于一个特定的目标）。</td></tr></tbody></table></li></ul><h3 id="添加-创建并使用控制器"><a href="#添加-创建并使用控制器" class="headerlink" title="添加/创建并使用控制器"></a>添加/创建并使用控制器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加控制器</span></span><br><span class="line"><span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>( camera, renderer.<span class="property">domElement</span> );</span><br><span class="line"><span class="comment">// 使用控制器</span></span><br><span class="line">controls.<span class="title function_">update</span>()</span><br></pre></td></tr></table></figure><p>我们需要在渲染函数中再次添加控制器的修改操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controls.<span class="title function_">update</span>()</span><br></pre></td></tr></table></figure><p>添加后的渲染函数完整代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 requestAnimationFrame 执行动画</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line">  </span><br><span class="line">    controls.<span class="title function_">update</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//scene:前面定义的场景,camera:前面定义的相机</span></span><br><span class="line">    <span class="comment">//renderTarget:渲染的目标默认是是渲染到前面定义的render变量中</span></span><br><span class="line">    <span class="comment">//forceClear:每次绘制之前都将画布的内容给清除,即使自动清除标志autoClear为false,也会清除</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们就可以使用鼠标拖动进行交互了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/425d01431148485ab4c7f5b01900e5ed~tplv-k3u1fbpfcp-zoom-1.image" alt="291891492291361822022-12-05-10-36-35.gif"></p><p>我这里将视频转成了gif格式的图片，所以看着就是上面这种画面。</p><p>现在看起来不流畅，没有那种拖动的阻尼感，我们给他添加阻尼的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加控制器</span></span><br><span class="line"><span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>( camera, renderer.<span class="property">domElement</span> );</span><br><span class="line"><span class="comment">// 开启控制器的阻尼效果</span></span><br><span class="line">controls.<span class="property">enableDamping</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>现在看起来就真实多了。</p><p>现在我们看到我们的立方体的边缘有一些锯齿，看起来有点丑，我们给他去除锯齿，开启抗锯齿。</p><p>在我们的创建渲染器的时候给它添加<code>antialias: true</code>开启抗锯齿</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">    <span class="attr">antialias</span>: <span class="literal">true</span>, <span class="comment">// 开启抗锯齿</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样我们的这个盒子看起来就很完美了。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">// 引入控制器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/controls/OrbitControls&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标：使用控制器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建场景</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建相机</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )</span></span><br><span class="line"><span class="comment">        fov — 摄像机视锥体垂直视野角度</span></span><br><span class="line"><span class="comment">        aspect — 摄像机视锥体长宽比</span></span><br><span class="line"><span class="comment">        near — 摄像机视锥体近端面</span></span><br><span class="line"><span class="comment">        far — 摄像机视锥体远端面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 透视相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">    <span class="number">75</span>, <span class="comment">// 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50。</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="comment">// 摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）。</span></span><br><span class="line">    <span class="number">0.1</span>, <span class="comment">// 摄像机的近端面，默认值是0.1。</span></span><br><span class="line">    <span class="number">1000</span> <span class="comment">// 摄像机的远端面，默认值 2000</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">    <span class="attr">antialias</span>: <span class="literal">true</span>, <span class="comment">// 开启抗锯齿</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 设置大小</span></span><br><span class="line">renderer.<span class="title function_">setSize</span>(</span><br><span class="line">    <span class="number">1000</span>, <span class="comment">// 宽度</span></span><br><span class="line">    <span class="number">500</span> <span class="comment">// 高度</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//挂载到页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加控制器</span></span><br><span class="line"><span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>( camera, renderer.<span class="property">domElement</span> );</span><br><span class="line"><span class="comment">// 开启控制器的阻尼效果</span></span><br><span class="line">controls.<span class="property">enableDamping</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 使用控制器</span></span><br><span class="line">controls.<span class="title function_">update</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加物体</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    width:立方体x轴的长度,</span></span><br><span class="line"><span class="comment">    height:立方体y轴的长度,</span></span><br><span class="line"><span class="comment">    depth:立方体z轴的长度也是深度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加材质</span></span><br><span class="line"><span class="comment">// const material = new THREE.MeshBasicMaterial(&#123; color: 0xffff0000 &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加材质</span></span><br><span class="line"><span class="keyword">const</span> materials = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    materials.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">0x00ff0000</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加网格</span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry, materials );</span><br><span class="line">scene.<span class="title function_">add</span>( cube );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置相机位置</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改场景背景颜色</span></span><br><span class="line">scene.<span class="property">background</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xffffcc99</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 三色坐标轴</span></span><br><span class="line"><span class="keyword">const</span> axesHelper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AxesHelper</span>(<span class="number">20</span>)</span><br><span class="line">scene.<span class="title function_">add</span>( axesHelper )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 requestAnimationFrame 执行动画</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line"></span><br><span class="line">    controls.<span class="title function_">update</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//scene:前面定义的场景,camera:前面定义的相机</span></span><br><span class="line">    <span class="comment">//renderTarget:渲染的目标默认是是渲染到前面定义的render变量中</span></span><br><span class="line">    <span class="comment">//forceClear:每次绘制之前都将画布的内容给清除,即使自动清除标志autoClear为false,也会清除</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="title function_">animate</span>()</span><br></pre></td></tr></table></figure><p>下篇文章让我们的盒子动起来，添加动画并结合<code>gsap</code>动画库。使我们的动画更流畅哦。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js-简单上手</title>
      <link href="/2022/12/04/202212042308/"/>
      <url>/2022/12/04/202212042308/</url>
      
        <content type="html"><![CDATA[<h2 id="gitee-地址"><a href="#gitee-地址" class="headerlink" title="gitee 地址"></a>gitee 地址</h2><p><code>gitee</code>地址： <a href="https://gitee.com/xiaoruil/study-three.js">gittee地址</a></p><h2 id="本篇目标"><a href="#本篇目标" class="headerlink" title="本篇目标"></a>本篇目标</h2><ul><li>搭建开发环境</li><li>安装<code>three.js</code></li><li>了解<code>three.js</code>的基本内容</li><li>搭建一个3d立方体并渲染到页面上<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2>全程采用<code>vite</code>用作本地服务启动工具。<br>创建一个文件夹，在终端中打开文件夹并输入以下内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// pnpm </span></span><br><span class="line">pnpm create vite</span><br><span class="line"><span class="comment">// npm</span></span><br><span class="line">npm create vite@latest</span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn create vite</span><br><span class="line"></span><br></pre></td></tr></table></figure>删除多余文件，并删除<code>main.js</code>中的内容。文件夹结构如下图：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09756a0f109e4419b4f61d4689d72b60~tplv-k3u1fbpfcp-zoom-1.image" alt="无标题.png"></li></ul><h2 id="安装-three-js"><a href="#安装-three-js" class="headerlink" title="安装 three.js"></a>安装 three.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pnpm </span></span><br><span class="line">pnpm i three -s</span><br><span class="line"><span class="comment">// npm</span></span><br><span class="line">npm i three -s</span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn three</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://threejs.org/build/three.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="了解three-js"><a href="#了解three-js" class="headerlink" title="了解three.js"></a>了解<code>three.js</code></h2><p><code>three.js</code>官网地址：<a href="https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene">官网</a><br>在使用的过程中，我们需要用到<code>three.js</code>的三大组件，分别是场景(Scene)、相机(Camera)、渲染器(Renderer)</p><h3 id="场景-Sene"><a href="#场景-Sene" class="headerlink" title="场景 ( Sene )"></a>场景 ( Sene )</h3><p>场景是所有物体的<strong>容器</strong>。我们需要将所渲染的内容放入场景中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建场景</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br></pre></td></tr></table></figure><h3 id="相机（-Camera-）"><a href="#相机（-Camera-）" class="headerlink" title="相机（ Camera ）"></a>相机（ Camera ）</h3><p><a href="https://threejs.org/docs/index.html#api/zh/cameras/Camera">相机</a>决定了场景中那个角度的<strong>景色</strong>会显示出来。相机就像人的眼睛一样，人站在不同位置，抬头或者低都能够看到不同的景色。场景只有一种，但是相机却有很多种<strong>。</strong>只要设置不同的相机参数，就能够让相机产生不一样的效果。</p><table><thead><tr><th>StereoCamera</th><th>立体相机</th></tr></thead><tbody><tr><td>PerspectiveCamera</td><td>透视相机</td></tr><tr><td>OrthographicCamera</td><td>正交相机</td></tr><tr><td>CubeCamera</td><td>立方相机</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建相机</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )</span></span><br><span class="line"><span class="comment">        fov — 摄像机视锥体垂直视野角度</span></span><br><span class="line"><span class="comment">        aspect — 摄像机视锥体长宽比</span></span><br><span class="line"><span class="comment">        near — 摄像机视锥体近端面</span></span><br><span class="line"><span class="comment">        far — 摄像机视锥体远端面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透视相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">    <span class="number">75</span>, <span class="comment">// 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50。</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="comment">// 摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）。</span></span><br><span class="line">    <span class="number">0.1</span>, <span class="comment">// 摄像机的近端面，默认值是0.1。</span></span><br><span class="line">    <span class="number">1000</span> <span class="comment">// 摄像机的远端面，默认值 2000</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="渲染器-renderer"><a href="#渲染器-renderer" class="headerlink" title="渲染器 renderer"></a>渲染器 renderer</h3><p>渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置大小</span></span><br><span class="line">renderer.<span class="title function_">setSize</span>(</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="comment">// 宽度</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerHeight</span> <span class="comment">// 高度</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//挂载到页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//scene:前面定义的场景,camera:前面定义的相机</span></span><br><span class="line">    <span class="comment">//renderTarget:渲染的目标默认是是渲染到前面定义的render变量中</span></span><br><span class="line">    <span class="comment">//forceClear:每次绘制之前都将画布的内容给清除,即使自动清除标志autoClear为false,也会清除</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 requestAnimationFrame 执行动画</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="title function_">animate</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加材质</span></span><br><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0xffff0000</span> &#125;);</span><br></pre></td></tr></table></figure><p>材质Api列表</p><table><thead><tr><th>MeshNormalMaterial</th><th>法线网格材质</th></tr></thead><tbody><tr><td>MeshBasicMaterial</td><td>基础网格材质</td></tr><tr><td>MeshLambertMaterial</td><td>Lambert网格材质</td></tr><tr><td>MeshPhongMaterial</td><td>Phong网格材质</td></tr><tr><td>MeshToonMaterial</td><td>卡通网格材质</td></tr></tbody></table><h2 id="three-js-渲染步骤流程"><a href="#three-js-渲染步骤流程" class="headerlink" title="three.js 渲染步骤流程"></a>three.js 渲染步骤流程</h2><ul><li>生成几何体 -&gt; 生成材质 -&gt; 混合生成模型 -&gt; 添加到场景中</li><li>场景操作 -&gt; 生成场景(配置参数…) -&gt; 模型导入场景</li><li>相机操作 -&gt; 生成相机 -&gt; 添加控制器(控制相机)</li><li>渲染器操作 -&gt; 生成渲染器 -&gt; 场景和相机添加到渲染器中 -&gt; 建立和canvas 关联</li><li>更新模块(动画模块) -&gt; 动画的连续 ,相机 ,场景的更新控制<h2 id="实现一个简单的立方体"><a href="#实现一个简单的立方体" class="headerlink" title="实现一个简单的立方体"></a>实现一个简单的立方体</h2>在<code>main.js</code>中引入<code>three.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span></span><br></pre></td></tr></table></figure><h4 id="创建一个场景"><a href="#创建一个场景" class="headerlink" title="创建一个场景"></a>创建一个场景</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建场景</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建相机"><a href="#创建相机" class="headerlink" title="创建相机"></a>创建相机</h4>这里采用 透视相机<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建相机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )</span></span><br><span class="line"><span class="comment">        fov — 摄像机视锥体垂直视野角度</span></span><br><span class="line"><span class="comment">        aspect — 摄像机视锥体长宽比</span></span><br><span class="line"><span class="comment">        near — 摄像机视锥体近端面</span></span><br><span class="line"><span class="comment">        far — 摄像机视锥体远端面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透视相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">    <span class="number">75</span>, <span class="comment">// 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50。</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="comment">// 摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）。</span></span><br><span class="line">    <span class="number">0.1</span>, <span class="comment">// 摄像机的近端面，默认值是0.1。</span></span><br><span class="line">    <span class="number">1000</span> <span class="comment">// 摄像机的远端面，默认值 2000</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="创建渲染器"><a href="#创建渲染器" class="headerlink" title="创建渲染器"></a>创建渲染器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置大小</span></span><br><span class="line">renderer.<span class="title function_">setSize</span>(</span><br><span class="line">    <span class="number">1000</span>, <span class="comment">// 宽度</span></span><br><span class="line">    <span class="number">500</span> <span class="comment">// 高度</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载到页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br></pre></td></tr></table></figure><h4 id="添加立方体"><a href="#添加立方体" class="headerlink" title="添加立方体"></a>添加立方体</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加物体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    width:立方体x轴的长度,</span></span><br><span class="line"><span class="comment">    height:立方体y轴的长度,</span></span><br><span class="line"><span class="comment">    depth:立方体z轴的长度也是深度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><p>常见几何体</p><table><thead><tr><th>BoxGeometry</th><th>立体矩形</th></tr></thead><tbody><tr><td>CircleGeometry</td><td>圆</td></tr><tr><td>CylinderGeometry</td><td>圆柱</td></tr><tr><td>ConeGeometry</td><td>圆锥</td></tr><tr><td>DodecahedronGeometry</td><td>十二面几何体(球)</td></tr><tr><td>PlaneGeometry</td><td>平面几何体 (重要)生成底面</td></tr><tr><td>RingGeometry</td><td>平面圆环几何体</td></tr><tr><td>TorusGeometry</td><td>圆环几何体</td></tr></tbody></table><h4 id="添加材质"><a href="#添加材质" class="headerlink" title="添加材质"></a>添加材质</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加材质</span></span><br><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0xffff0000</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="添加网格"><a href="#添加网格" class="headerlink" title="添加网格"></a>添加网格</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加网格</span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry, material );</span><br><span class="line"><span class="comment">// 将网格添加到场景中</span></span><br><span class="line">scene.<span class="title function_">add</span>( cube );</span><br></pre></td></tr></table></figure><h4 id="设置相机位置"><a href="#设置相机位置" class="headerlink" title="设置相机位置"></a>设置相机位置</h4><p>因为相机的默认位置是（0， 0， 0），所以需要修改相机的位置，不然看不到我们创建的立方体</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置相机位置</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">50</span>;</span><br></pre></td></tr></table></figure><h4 id="渲染到页面上"><a href="#渲染到页面上" class="headerlink" title="渲染到页面上"></a>渲染到页面上</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 requestAnimationFrame 执行动画</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//scene:前面定义的场景,camera:前面定义的相机</span></span><br><span class="line">    <span class="comment">//renderTarget:渲染的目标默认是是渲染到前面定义的render变量中</span></span><br><span class="line">    <span class="comment">//forceClear:每次绘制之前都将画布的内容给清除,即使自动清除标志autoClear为false,也会清除</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="title function_">animate</span>()</span><br></pre></td></tr></table></figure><p>此时此刻，我们的页面上就会出现一个红色的盒子<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09856fa8df8f4083834bd709b37f298d~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>我们看到的是一个平面的，我们修改渲染函数，让他动起来并且看到他的完整样子。将渲染函数修改成如下样子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 requestAnimationFrame 执行动画</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改其旋转的度数，让其每次渲染增加0.01的弧段进行渲染</span></span><br><span class="line">    cube.<span class="property">rotation</span>.<span class="property">x</span> += <span class="number">0.01</span>;</span><br><span class="line">    cube.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//scene:前面定义的场景,camera:前面定义的相机</span></span><br><span class="line">    <span class="comment">//renderTarget:渲染的目标默认是是渲染到前面定义的render变量中</span></span><br><span class="line">    <span class="comment">//forceClear:每次绘制之前都将画布的内容给清除,即使自动清除标志autoClear为false,也会清除</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>requestAnimationFrame</code>是原生自带的实现动画用的，具体的可以看<a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame">MDN</a></p><p>现在我们看到的就是一个会转的立方体<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01b302bc4fb3464f9b739194cc751c90~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h4 id="让我们来完善一下"><a href="#让我们来完善一下" class="headerlink" title="让我们来完善一下"></a>让我们来完善一下</h4><ul><li>把黑色背景给他改个颜色</li><li>并添加一个x，y，z坐标线</li><li>将6个面的颜色改成不一样的</li></ul><p>修改场景背景颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改场景背景颜色</span></span><br><span class="line">scene.<span class="property">background</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xffffcc99</span>)</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2a02e6726e9405e89dd34f38e9bf204~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>添加x，y，z坐标线</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 三色坐标轴</span></span><br><span class="line"><span class="keyword">const</span> axesHelper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AxesHelper</span>(<span class="number">20</span>)</span><br><span class="line">scene.<span class="title function_">add</span>( axesHelper )</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb054a67603345848a66a048cae21a82~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>修改每个面的颜色。<br>我们将添加材质那一句修改为如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加材质</span></span><br><span class="line"><span class="comment">// const material = new THREE.MeshBasicMaterial(&#123; color: 0xffff0000 &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加材质</span></span><br><span class="line"><span class="keyword">const</span> materials = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    materials.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">0x00ff0000</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加网格</span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry, materials );</span><br><span class="line">scene.<span class="title function_">add</span>( cube );</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70eb04b3c09a425aad9fe9241bb53b76~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>一个能够自己旋转的立方体我们就做好了。</p><p>下篇文章将使用<code>controls</code>让我们可以通过鼠标、键盘控制我们的盒子模型。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>threeJs-简介</title>
      <link href="/2022/12/03/202212031904/"/>
      <url>/2022/12/03/202212031904/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端的开发过程中，需要实现 可视化 or 3D展示操作的过程中我们可以通过<code>echarts</code>和<code>webGl</code>来实现我们想要的需求及效果，本篇文章不述<code>echarts</code>，想了解的朋友可以点击这里-&gt; <a href="https://echarts.apache.org/zh/index.html">传送门</a>。在3D效果方面，前端可以通过<code>webGl</code>来实现，但写原生的<code>webGl</code>除了会<code>javaScript</code>外还需要会<a href="https://baike.baidu.com/item/GLSL?fromModule=lemma_search-box"><code>glsl</code></a>，而这对于我们目前来说是需要大量的时间的。<br>那么，我们能不能边写边学呢？<br>答案是可以的，我们可以学习<code>three.js</code>等有一定的了解和积累过后再去学习/掌握原生的<code>webGL</code>、<code>glsl</code>和图形学的相关知识。</p><h1 id="three-js-介绍"><a href="#three-js-介绍" class="headerlink" title="three.js 介绍"></a>three.js 介绍</h1><p><code>three.js</code>是一款由<code>JavaScript</code>编写的<code>WebGL</code>第三方库。提供了非常多的3D显示功能。</p><p>我们可以看腾讯云官网的一个3d效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c1f46296eb3432e99f8989f38fabb93~tplv-k3u1fbpfcp-watermark.image" alt="无标题.png"></p><p>就问是不是很酷炫。</p><p>我们也可以实现这样的一个效果，但是要一摸一样那是不现实的，我们没有它的素材，但我们学会了<code>three.js</code>可以照猫画虎。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>想学习<code>three.js</code>或者感兴趣的朋友可以关注一波本专栏。<br>免费且长期更新。</p><p>下篇文章将会告诉大家如何安装、使用<code>three.js</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node从零到一，实现API的编写并能够访问（二）</title>
      <link href="/2022/12/02/202212021052/"/>
      <url>/2022/12/02/202212021052/</url>
      
        <content type="html"><![CDATA[<p>终于发布这篇文章了，之前有点忙一直没时间写，想要将自己的项目上传到服务器的小伙伴可以跟着本篇文章操作，然后就可以上线访问了。</p><p>本篇的主要内容是将上篇文章写好的node项目部署到服务器，通过服务器的公网ip访问，实现域名访问。</p><p>如果还没看过上篇文章的小伙伴可以先去看一下，然后跟着操作一下，再来看这篇文章。<br><a href="https://blog.csdn.net/qq_44500360/article/details/123364667">Node从零到一，实现API的编写并能够访问</a></p><h2 id="1、域名"><a href="#1、域名" class="headerlink" title="1、域名"></a>1、域名</h2><p>购买域名并备案，我这里是通过阿里云购买的域名<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d076b1171b84cb398db68ad7380527c~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>如果没有域名的小伙伴可以点击这个连接购买自己想要的域名 <a href="https://mi.aliyun.com/?spm=5176.10668177.918671.1.35773c96uQEEcA">阿里云域名购买</a>。购买域名后记得备案哦，不然没办法跟着后面的步骤操作哦。<br>提醒哈：需要实名认证才可以购买域名和备案</p><h2 id="2、服务器"><a href="#2、服务器" class="headerlink" title="2、服务器"></a>2、服务器</h2><p>在购买域名后备案的期间我们可以先去服务器商那里把服务器买了，我这里依旧使用的是阿里云的轻量服务器，打折的时候买的，一年只要100多。阿里云的服务器一般在双11和618等一些促销时间也是会跟着进行打折的，小伙伴可以去蹲一下。</p><h2 id="3、解析域名到服务器"><a href="#3、解析域名到服务器" class="headerlink" title="3、解析域名到服务器"></a>3、解析域名到服务器</h2><p>域名备案经过漫长的3周时间，接下来就是把域名解析到服务器了，找到域名-&gt;域名列表-&gt;解析<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b84bf95931884ec69ba8485a9db6326c~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>点击添加记录<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d2dde6b795444ab8e93dba6e64a932c~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>填写相应的信息并保存就可以了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e536088d5860415b9f9c09e7374f978a~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>解析记录选择<strong>A</strong> 就可以了，如果说你要指向二级域名 则选择 <strong>CNAME</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04b3c75d936d4bbebb989d5bacc441a1~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1aa2c827f4d4162ac56a982516806c7~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>主机记录值根据你们自身需要，如果不清楚的小伙伴，直接选择 <strong>@</strong> 这个选项就可以了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66ecccd24c0c4cd2962acdd7cc931f73~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>解析线路可以不选择，他有个默认值。记录值可以直接填服务器的公网ip就可以了，然后点击确认，等个几分钟就解析好了。然后你可以通过域名访问你的服务器了，他默认是一个wordPress 模板</p><h2 id="4、设置服务器系统镜像信息"><a href="#4、设置服务器系统镜像信息" class="headerlink" title="4、设置服务器系统镜像信息"></a>4、设置服务器系统镜像信息</h2><p>会<strong>Nginx</strong>的小伙伴可以不用更换镜像，直接使用默认镜像就可以了，通过<strong>MobaXterm</strong>或<strong>xshell</strong>来连接自己的服务器进行环境配置就可以了。不会的小伙伴还是需要跟着下面的步骤走哦。</p><p>选择你购买的服务器类型-&gt;服务器列表-点击服务器信息，中间部分有个服务器信息，然后找到<strong>重置系统</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3926e5416bc4701b195a65ec5a484a4~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p>然后选择自己需要的应用镜像就可以了，我这里选择的是<strong>BT-Panel 7.5.1</strong>，然后点击更换，过一会就可以了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d81eb79bb3b42a6996a8b940acf7956~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>然后回到上一页，往下划找到应用管理<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2b8edd2f9c4488eb1e22a622bb3d740~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>然后点击应用详情<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb8db1d3fd2b4ff986ee79b0581e073d~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>接下来的操作就是跟着应用详情里的步骤走就可以了。</p><h2 id="5、配置项目防火墙端口"><a href="#5、配置项目防火墙端口" class="headerlink" title="5、配置项目防火墙端口"></a>5、配置项目防火墙端口</h2><p>打开项目文件找到项目使用的端口，并在阿里云的防火墙上面进行配置，点击添加规则就可以配置端口了，添加过后项目才可以访问。填完过后点击确定过后就可以生效了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19c37ae1d7324e9f87e7d8925832e496~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h2 id="6、配置宝塔环境"><a href="#6、配置宝塔环境" class="headerlink" title="6、配置宝塔环境"></a>6、配置宝塔环境</h2><p>根据应用详情的提供的入口和账号密码登陆宝塔 <em>(步骤4的操作)</em><br>登录进去过后点击侧边栏的 <strong>软件商城</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23b83147c6024f86bccb0f9de7010ca3~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>需要安装的配置</p><h6 id="1、Nginx"><a href="#1、Nginx" class="headerlink" title="1、Nginx"></a>1、Nginx</h6><h6 id="2、PM2"><a href="#2、PM2" class="headerlink" title="2、PM2"></a>2、PM2</h6><p>也可以使用官方的推荐配置，新用户是有个弹窗，里面就是根究自己的项目选择配置</p><h2 id="7、上传项目"><a href="#7、上传项目" class="headerlink" title="7、上传项目"></a>7、上传项目</h2><p>点击侧边栏的 文件<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6661dbf891b24a68b623a70dae54da0b~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>点进去过后， 在www 的目录下新建一个文件夹，我这里是新建在www/wwwroot下面的<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23bee194939445be849fcdd79cc0d0da~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>双击这个新建的文件夹，把项目下面的文件都上传上来，可以压缩后上传，宝塔支持解压的<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f50460c25fa14032a3aef40b360880cd~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>上传好了并解压过后就可以了，接下来就是配置和启动项目了</p><h2 id="8、配置启动项目"><a href="#8、配置启动项目" class="headerlink" title="8、配置启动项目"></a>8、配置启动项目</h2><p>点击 侧边栏的 <strong>软件商城</strong>双击 <strong>PM2</strong><br>然后就是这样的一个弹窗，我这里因为已经配置了一个，所以不是空的，没配置过的是空的<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8150483000e0436385072105f9c188b6~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>然后点击 添加项目<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6fb0442edc7473f81738a1b479c8d7c~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>像这样填好点击提交，你们需要根据你们自身情况去填写，点击提交过后，页面上就会出现一个项目记录<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b87eb85c2ca497697067a5a47e9f9c6~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>下一步我们点击 <strong>端口</strong>列的设置，给绑定项目端口，端口是项目里监听的那个端口，如果是根据我上篇文章操作的话，这里就填写 5888 ，如果不是则需要你们在项目里找到项目监听的端口，进行填写，然后点击保存<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86217cb5544e47c88e0190a330df1f29~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>这个一定要是绿色的才是启动了的，如果是红色的则启动一边就可以了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cea8447e5e3840448ca1325f58a8e8ac~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>经过上面一系列复杂的操作，项目已经可以根据服务器的公网IP访问，现在离域名访问就差一步了。</p><h2 id="9、配置Nginx"><a href="#9、配置Nginx" class="headerlink" title="9、配置Nginx"></a>9、配置Nginx</h2><p>点击侧边栏的<strong>软件商城</strong>，然后找到 Nginx 并双击。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/189d4b25d3724e0bad01a8bcf2105e1d~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>点击侧边栏的<strong>配置修改</strong>，往下一直划到60行到65行的样子。把<strong>server_name</strong> 后的<strong>127.0.0.1</strong>改成自己的域名，<strong>index</strong>添加一个自己项目的<strong>启动文件</strong>，然后点击保存，再点击侧边栏的服务。先点击<strong>重载配置</strong>，再点击<strong>重启</strong>，等重启好过后，我们的项目就可以通过我们自己的域名访问了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ed0aca36fc54e53868b69456625a53a~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p>经过上面所有一系列的操作我们的项目就可以通过域名访问了，本篇完结。<br>有问题或不懂的地方欢迎留言并私信。</p><h5 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h5><p>下篇将分享给大家使用本地数据库，对其进行增删改查的基本操作</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端跨端开发选型对比</title>
      <link href="/2022/12/02/202212021049/"/>
      <url>/2022/12/02/202212021049/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在现在的大前端时代，产生了很多的跨端技术和框架，前端再也不是了那个只需要写<code>html</code>、<code>css</code>、<code>js</code>的时代，而是需要涉及到<code>app</code>、<code>小程序</code>、<code>网页(web、h5、大屏数据可视化、webgl)</code>、<code>桌面端(window、macos、linux)</code>这些方方面面，现在有很多可供我们选择的技术和框架以及打包工具，我们应该怎么选择呢？</p><p>目前比较常见的有以下技术和框架，本文将会结合情况进行分析，助你在跨端开发的时候选择不在有选择困难症。</p><ul><li><a href="https://uniapp.dcloud.net.cn/">uni-app</a> (可开发app、网页、小程序)</li><li><a href="https://www.reactnative.cn/">react Native</a> (可开发 android、ios app应用)</li><li><a href="https://weexapp.com/">weex 英文官网</a><a href="https://weexapp.com/zh/">weex 中文官网</a>(可构建iOS、Android、Web)</li><li><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/">vant</a> (ui 组件库)</li><li><a href="https://www.electronjs.org/">electron</a> (桌面端(window、macos、linux)的打包工具)</li><li><a href="https://flutter.dev/">flutter</a> <a href="https://flutter.cn/">flutter 中文文档</a> (支持android、ios、window、macos、linux)</li><li><a href="http://mpvue.com/">mpvue</a> (小程序)</li><li><a href="https://ask.dcloud.net.cn/docs/#//ask.dcloud.net.cn/article/89">5 + App</a>(仅支持app)</li><li><a href="https://ask.dcloud.net.cn/docs/#//ask.dcloud.net.cn/article/1244">Wap2App</a>(仅支持app)</li></ul><h1 id="简述各跨端开发技术-框架"><a href="#简述各跨端开发技术-框架" class="headerlink" title="简述各跨端开发技术/框架"></a>简述各跨端开发技术/框架</h1><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><p><code>uni-app</code> 是由 <code>dcloud</code> 出品的一款跨端开发框架，使用 <code>Vue.js</code> 开发所有前端应用的框架，开发者编写一套代码，可发布到<code>iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台</code>。</p><p>要求：</p><p>要求开发者有<code>Vue</code>基础，熟悉小程序开发。</p><p>语法：</p><p>基于<code>vue.js</code>核心代码开发，在开发过程中写法和传统的<code>html</code>、<code>css</code>、<code>js</code>类似，只是对应的标签名这些不同；Api结合多方 + 框架自身的Api，语法类似微信小程序。</p><p>可以看下面的代码举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>我是uni-app<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="react-Native"><a href="#react-Native" class="headerlink" title="react Native"></a>react Native</h2><p><code>React Native</code> 是由 <code>Facebook</code> 出品的，是将原生开发的最佳部分与 <code>React</code> 相结合， 致力于成为构建用户界面的顶尖 <code>JavaScript</code> 框架。使用js编写ui界面，在渲染的时候进行将js转换为原生的ui，所以进行复杂计算面，大数据量，或者动画时，就可能会产生一定的性能问题，增加应用的耗电量或页面卡顿等问题。</p><p>要求：</p><p>要求开发者有<code>React</code>基础，要求精通Flex布局，要求熟悉javascript。</p><p>语法：</p><p><code>react Native</code>的写法和<code>react</code>大差不差，使用<code>Javascript</code>语言，类似于<code>HTML</code>的<code>JSX</code>，以及<code>CSS</code>来开发移动应用，语法标签采用<code>android</code>和<code>ios</code>原生的标签。是一个由<code>js</code>去调用<code>android/ios</code>原生的跨端框架。</p><p>可以看下面的代码举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">flex:</span> <span class="attr">1</span>, <span class="attr">justifyContent:</span> &quot;<span class="attr">center</span>&quot;, <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Try editing me! 🎉</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="weex"><a href="#weex" class="headerlink" title="weex"></a>weex</h2><p><code>Weex</code> 是一个构建移动端跨平台<code>UI</code>框架。<code>Weex</code>使开发人员能够使用类似<code>Web</code>的语法通过单一代码库构建<code>iOS</code>、<code>Android</code>和<code>Web</code>应用。 <code>Vue.js</code> 和 <code>Rax</code>（提供类<code>React</code>语法前端框架）这两个前端框架被广泛应用于<code>Weex</code>页面开发，同时<code>Weex</code>也对这两个前端框架提供了最完善的支持。</p><p>语法：只需要在自己的<code>APP</code>中嵌入<code>Weex</code>的SDK，撰写<code>HTML、CSS、Js</code>来开发App，也是通过js调用原生方法。</p><p>可以看下面的代码举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;justify-content:center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;freestyle&quot;</span>&gt;</span>Yo<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.freestyle</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="number">#41B883</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-size</span>: <span class="number">233px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="vant"><a href="#vant" class="headerlink" title="vant"></a>vant</h2><p><code>Vant</code> 是赞前端团队维护的移动端组件库，提供了一整套 UI 基础组件和业务组件。是一个轻量、可靠的移动端 <code>Vue</code> 组件库，采用 MIT 开源协议(官网原话), 使用 <code>vant</code> 进行跨端开发需要使用到 <code>vue</code> 相关的<code>脚手架</code>和<code>跨端打包工具</code>。</p><h2 id="electron"><a href="#electron" class="headerlink" title="electron"></a>electron</h2><p><code>electron</code> 是一个用<code>HTML CSS、js</code>来构建跨平台桌面应用程序的一个开源库 <code>electron</code> 让我们用 <code>Html、css、js </code>技术加 <code>Electron</code> 开发跨平台可以安装的软件。</p><h2 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h2><p><code>flutter</code> 是谷歌的移动UI框架，可以快速在 <code>IOS</code> 、 <code>Android</code>、<code>Pc</code>、<code>网页</code>上构建高质量的原生用户界面。采用 <code>GPU </code> + <code>skia 引擎</code>渲染，可以直接调原生硬件，开发出来的效果还不错。自带<code>android</code>和<code>ios</code>的两种风格ui组件。</p><p>要求: </p><p>开发者需有<code>Dart</code>语言基础，了解 <code>Dart</code> 和 <code>Flutter</code> 的 API、要求精通Flex布局，要求原生开发协作。</p><p>语法：采用 <code>dart</code> 语法，和 java 有点类似，语法属于强类型语法。</p><p>可以看下面的代码举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatefulWidget</span> &#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _CaseReviewDetailPageState <span class="title function_">createState</span>() =&gt; <span class="title function_">_CaseReviewDetailPageState</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_AppState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">State</span>&lt;<span class="title class_">App</span>&gt; &#123;</span><br><span class="line">    @override</span><br><span class="line">    <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">width</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">decoration</span>: <span class="title class_">BoxDecoration</span>(</span><br><span class="line">                <span class="attr">color</span>: <span class="keyword">const</span> <span class="title class_">Color</span>(<span class="number">0xffff0000</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;我是 flutter&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h2><p>是一个使用 <code>Vue.js</code> 开发小程序的前端框架。 以 <code>vue </code>的语法为基础，编译成多个平台的小程序。</p><h2 id="5-App"><a href="#5-App" class="headerlink" title="5+App"></a>5+App</h2><p><code>HTML5 Plus移动App</code>，简称<code>5+App</code>，是一种基于<code>HTML、JS、CSS</code>编写的运行于手机端的<code>App</code>，这种App可以通过扩展的<code>JS API</code>任意调用手机的原生能力，实现与原生App同样强大的功能和性能。使用 <code>hbuilderx</code>作为开发/打包工具。和<code>react Native</code>实现方式类似，但不需要会<code>react</code>，就可以上手开发。结合<a href="https://www.html5plus.org/doc/h5p.html">HTML5plus 规范</a>。</p><h2 id="wap2app"><a href="#wap2app" class="headerlink" title="wap2app"></a>wap2app</h2><p><code>wap2app</code> 是一个将现有M站（也称手机wap站，区别于pc的web站）快速发布成 App 的增强方案，通过 <code>DCloud</code> 的 <code>wap2app</code> 框架，进行简单的配置和必要的编程，即可完成M站的体验强化，达到原生应用的功能体验，进而再发布为原生安装包或流应用。<br>结合<a href="https://www.html5plus.org/doc/h5p.html">HTML5plus 规范</a> + <code>HTML、JS、CSS</code>。和<code>5+App</code>类似。</p><h1 id="差异化"><a href="#差异化" class="headerlink" title="差异化"></a>差异化</h1><p><code>weex</code>、 <code>vant</code>、<code>electron</code>、<code>5+App</code>、<code>wap2app</code> 这里不论。下文中只论述主流的跨端开发框架。</p><p>原因：</p><ul><li><code>vant</code> 是一款移动端的 ui 组件库需搭配打包工具使用；</li><li><code>electron</code> 是一款将<code>html、css、js</code>打包成跨端（目前仅支持<code>Pc桌面端</code>）应用的打包工具；</li><li><code>weex</code> 已经在<code>uni-app</code>中自带；</li><li><code>5+App</code> 和 <code>react Native</code>类似，具体可以看<a href="https://ask.dcloud.net.cn/docs/#//ask.dcloud.net.cn/article/89">官方文档</a>；</li><li><code>wap2app</code> 和<code>5+App</code>类似，具体可以看<a href="https://ask.dcloud.net.cn/docs/#//ask.dcloud.net.cn/article/1244">官方文档</a>；</li></ul><p><code>uni-app</code>、<code>mpvue</code> 、<code>react Native</code>、<code>flutter</code> 如下：</p><ul><li><p><code>uni-app</code> 以<code>vue</code> + <code>微信小程序api</code>的语法来实现开发，通过 <code>dcloud</code> 配套的打包工具来打包成<code>android / ios / 小程序 / 网页</code> 应用，调用原生的方法。<code>支持一套代码编译多个平台</code>，内置<code>webview、weex</code>引擎, 打包后的产物有点过于臃肿，不适合大型项目，打包成 app 后的体验不及   <code>flutter</code> 和 <code>react Native</code>，可能是由于集成了<code>uni体系</code>的原因吧。因采用的语法原因，成就了它很容易上手，只要会写 web 和 vue 的前端就可以上手，学习成本低。</p></li><li><p><code>react Native</code>以 <code>react</code> 语法为基础，转编去调用原生方法。采用固定的组件和CSS，然后将其专转换为原生组件进行渲染，<code>体验方面接近于原生应用</code>。可以和原生应用进行混合开发，也可以只采用<code>react native</code>进行开发。现在很多的app也都会采用<code>react Native</code>混合这种方案，只有少量的<code>webview</code>页面。打包后的产物运行起来的效果一般。并不算是一个完美的跨端解决方案。但由于<code>react Native </code>采用的语法原因，只要熟悉 Web前端开发 的技术人员只需很少的学习就可以进入移动应用开发领域。</p></li><li><p><code>mpvue</code> 以 <code>vue</code> 语法及格式为基础转编到对应的小程序平台。仅支持编译小程序。</p></li><li><p><code>flutter</code> 由 <code>google</code> 开源，它并没有采用<code>js转原生组件</code>的方式，而是使用 <code>google</code> 的 <code>dart</code> 语言和自带的 <code>skia 渲染引擎</code>来开发 ui 界面。就相当于他开发一个浏览器，并且还规定了开发 ui 组件的语言<code>dart</code>和 <code>api</code>，全部都是自己的，所以<code>高性能</code>成为了其最大的优势，和原生开发体验相差无几。和上面的比较 <code>flutter</code> 相较于目前来说更适合跨端开发。</p></li></ul><h2 id="ui方面"><a href="#ui方面" class="headerlink" title="ui方面"></a>ui方面</h2><p><code>react Native</code> 和 <code>flutter</code> 在 <code>IOS</code> 和 <code>Android </code>上需要使用2套ui库，当然你以可以使用一套。<br><code>uni-app</code> 的开发只需要写一套界面 ui，就可以适应不同手机的用户。</p><h2 id="热更新方面"><a href="#热更新方面" class="headerlink" title="热更新方面"></a>热更新方面</h2><p>标准的 <code>flutter</code> 不支持<code>热更新</code>，这是使用标准化 <code>flutter</code> 开发的一大痛点。<br><code>react Native</code> 和 <code>uni-app</code> 都是支持<code>动态热更新</code>的。</p><h2 id="性能方面"><a href="#性能方面" class="headerlink" title="性能方面"></a>性能方面</h2><p>在性能引擎及使用体验的排名如下：</p><blockquote><p>flutter &gt; react native/weex &gt; webview</p></blockquote><p>虽然 <code>uni-app</code> 是双渲染引擎，<code>webview</code> 和 <code>weex</code> 都内置了，由开发者使用切换，但打包出来的 <code>app</code> 体验还是要逊色于 <code>flutter</code>。</p><h2 id="生态方面"><a href="#生态方面" class="headerlink" title="生态方面"></a>生态方面</h2><p>在国内 <code>uni-app</code> 生态比 <code>react native</code> 和 <code>flutter</code> 好。中国开发者需要的全端推送，比如：<code>uniPush</code> 集成了 <code>iOS</code>、<code>华为</code>、<code>小米</code>、<code>OPPO</code>等众多原厂推送；各种国内登录、支付、分享SDK、各种国内地图、各种ui库、以及Echart图表等，都是在<code>uni-app </code>体系里。生态这方面比 <code>react native</code>、<code>flutter</code> 丰富很多。<code>uni-app</code>的插件市场也有数千款插件，<code>uni-app</code> 确实是最丰富的跨端开发框架生态了。国外 <code>react native</code>、<code>flutter</code> 的生态肯定比 <code>uni-app</code> 好一些，比如 <code>facebook登陆分享</code>、<code>Google地图</code>等。</p><h2 id="上手复杂程度方面"><a href="#上手复杂程度方面" class="headerlink" title="上手复杂程度方面"></a>上手复杂程度方面</h2><p><strong>uni-app</strong>: <strong>★★</strong></p><p><strong>react native</strong>: <strong>★★★</strong></p><p><strong>flutter</strong>: <strong>★★★★</strong></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本篇<code>uni-app </code>、<code>react native</code>、<code>flutter </code>的区别介绍到这里就结束了。总的来说各有利弊，像标准的<code>flutter 不支持热更新</code>；<code>react native 需要会 react</code>；<code>uni-app app体验不及 flutter 、react native</code>。等。 </p><p>各位朋友可以结合自身及项目实际情况进行选择。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 跨端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现页面变灰功能(含 Flutter )</title>
      <link href="/2022/12/02/202212021453/"/>
      <url>/2022/12/02/202212021453/</url>
      
        <content type="html"><![CDATA[<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db14861ca9364c6d8315dbea20ae5e9c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>今天从前端的角度出发，看看变灰的原理及实现过程。</p><p>除了普通的前端常用方式，本文还会告诉大家在<a href="https://flutter.cn/docs"><code>flutter</code></a>中如何使所有的页面变灰哦。</p><p>原本是准备分两篇文章介绍的，但<code>flutter</code>的内容不多，最后仔细一想还是用一篇文章吧。<br>关于<code>flutter</code>如何实现页面变灰？在文末。</p><h1 id="常见前端实现及问题"><a href="#常见前端实现及问题" class="headerlink" title="常见前端实现及问题"></a>常见前端实现及问题</h1><h2 id="实现思路及原理"><a href="#实现思路及原理" class="headerlink" title="实现思路及原理"></a>实现思路及原理</h2><p>我们先一起看一下常见的主流网站<code>掘金</code>、<code>淘宝</code>、<code>scdn</code>是怎么实现的：</p><p><strong>掘金</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/130548728f684789a4d9135f3fe47d9f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>淘宝</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f362ec16cfba413797e7a7a9ac947c94~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>csdn</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cdab8df7adc34a5fb6fdc62136f44c71~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>经过上面的主流网站案例我们得知，这些主流网站都是通过 <code>css3</code> 中的新增的 <code>filter</code> 属性实现的。</p><p><code>filter</code>属性有啥用？是干啥的？我们可以先看一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">MDN</a>中的解释：</p><blockquote><p>CSS属性 filter 将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像、背景和边框的渲染</p></blockquote><p>大白话就是 <code>filter</code> 属性就是用来给元素添加不同的滤镜。该属性中支持传入多种 <code>Filter </code>函数。其中 <code>grayscale</code>是用于置灰的关键。使用<code>grayscale</code>将改变输入图像灰度。</p><p>因此，只需将页面的 <code>html</code> 元素设置以下样式即可实现页面置灰：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>  &#123;</span><br><span class="line">     <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我们刚刚看到淘宝等主流网站有很多行，并不是单单的像上面那样只有一行，这是为什么呢？</p><p>解答：</p><p>这是因为<code>filter</code>是<code>css3</code>新增的一个属性，并不是所有的浏览器（内核）和版本都支持，所以为了让更多的浏览器（内核）及版本达到变灰的这个效果，就出现了我们看到的很多行。但无论有多少行，其实实现的效果都是一样的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -moz-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -o-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -ms-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">filter</span>: gray;</span><br><span class="line">    <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>适配内核及版本说明</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72bcbf74ab224fc7a7c13c0a35571e82~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>*图片源于网络</p><ul><li><code>-webkit-</code>：带有 <code>webkit</code> 前缀可以在 <code>webkit</code> 内核的浏览器中生效，如常见的<code>chrome</code>、<code>safari</code>、<code>移动端浏览器</code>；</li><li><code>-moz-</code>：带有 <code>moz</code>  前缀可以在 <code>Firefox</code> 浏览器中生效；</li><li><code>-o-</code>：带有 <code>o</code> 前缀可以在 <code>Opera</code> 浏览器生效；</li><li><code>-ms-</code>：带有 <code>ms</code> 前缀可以在 <code>IE</code> 浏览器生效；</li></ul><p>上面的代码中最后三行全是兼容 <code>IE</code> 内核的浏览器，大家都知道，<code>ie</code> 浏览器是事最多的浏览器，干啥都不行，全都要单独适配。</p><h2 id="filter属性扩展"><a href="#filter属性扩展" class="headerlink" title="filter属性扩展"></a><code>filter</code>属性扩展</h2><h4 id="1、blur"><a href="#1、blur" class="headerlink" title="1、blur"></a>1、blur</h4><p>该属性用于设置元素<code>模糊</code>效果，将高斯模糊视觉效果应用于元素。</p><p>该属性常用于实现图片的毛玻璃效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">1px</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18425dfd78084e2b802d9baebd85ccc7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="2、brightness"><a href="#2、brightness" class="headerlink" title="2、brightness"></a>2、brightness</h4><p>该属性用于调整图像的<code>亮度</code>级别，使其看起来更亮或更暗。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">120%</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea7bd3089d554eec95de4945e483b57e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="3、contrast"><a href="#3、contrast" class="headerlink" title="3、contrast"></a>3、contrast</h4><p>该属性用于调整图像的<code>对比度</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">190%</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72f2a5fb66fa40f8a5d3b44ff71e1c72~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="4、opacity"><a href="#4、opacity" class="headerlink" title="4、opacity"></a>4、opacity</h4><p>该属性用于调整图像的<code>透明</code>效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">opacity</span>(<span class="number">40%</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56e49ca4a40e4da284a25a45276c7b30~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>filter</code> 的 <code>opacity</code> 和 <code>opacity</code> 这两个属性的区别说明：</p><ul><li><code>filter</code> 的<code>opacity</code>开启<code>浏览器</code>的<code>GPU</code>硬件加速渲染</li><li><code>opacity</code>不开启<code>浏览器</code>的<code>GPU</code>硬件加速渲染</li></ul><h4 id="5、sepia"><a href="#5、sepia" class="headerlink" title="5、sepia"></a>5、sepia</h4><p>该属性用于调整图像添加柔和的<code>褐色色调</code>，让图像看起来更温暖、更复古。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">sepia</span>(<span class="number">40%</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46cd0932f0a64431b156db6c3e323bd5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="6、drop-shadow"><a href="#6、drop-shadow" class="headerlink" title="6、drop-shadow"></a>6、drop-shadow</h4><p>该属性用于增加图像的<code>阴影</code>，类似于<code>box-shadow</code>，使图像看起来更加立体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(offset-x offset-y blur-radius color); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接受四个参数：</p><ul><li><p><code>offset-x</code>：<code>x轴</code>长度值，指定元素和投影之间的水平距离。正值将阴影置于元素右侧，负值将阴影置于左侧。</p></li><li><p><code>offset-y</code>：<code>y轴</code>长度值，指定元素和投影之间的垂直距离。正值将阴影置于元素下方，负值将阴影置于其上方。</p></li><li><p><code>blur-radius</code>: 阴影的模糊半径。值越大，阴影变得越模糊。不允许使用负值。</p></li><li><p><code>color</code>：阴影的颜色。默认为黑色。</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">#ff0000</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bab0fc4b80974a2391a6d0473dc1d827~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="7、saturate"><a href="#7、saturate" class="headerlink" title="7、saturate"></a>7、saturate</h4><p>该属性用于改变元素中颜色的<code>饱和度</code>。饱和元素的颜色比较鲜艳；对于曝光不足的图像可以增加饱和度，反之亦然。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">40%</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d16ea7a4fde54d689cfdb1634a177eeb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="8、initial"><a href="#8、initial" class="headerlink" title="8、initial"></a>8、initial</h4><p><code>filter</code> 的默认值，会被解析为<code>none</code>，使用该值啥效果也没有。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: initial; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff90ae091f5f41a49aa43603fe9c8e17~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h4 id="9、inherit"><a href="#9、inherit" class="headerlink" title="9、inherit"></a>9、inherit</h4><p>继承父级元素的 <code>filter</code> 属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/* 父盒子 */</span></span><br><span class="line">   <span class="selector-class">.father-image</span>&#123;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">40%</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 图片 */</span></span><br><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: inherit; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43943710e9054975a8d2a4d0158561b5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="10、url"><a href="#10、url" class="headerlink" title="10、url"></a>10、url</h4><p>接受一个<code>XML</code>文件，该文件设置了一个<code>SVG</code>滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。</p><p>我这里懒的去找素材，就不上图了。上个代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">url</span>(<span class="string">&#x27;./sucai.xml&#x27;</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><p><code>filter</code> 的属性是可以写多个的，根据顺序渲染。</p><blockquote><p>谨记：多个属性中不可以使用<code>initial</code>、<code>inherit</code>，不然会没效果的。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">1px</span>) <span class="built_in">saturate</span>(<span class="number">40%</span>); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b40323342fd4f7d82ce353d956367a1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="使用filter后的问题"><a href="#使用filter后的问题" class="headerlink" title="使用filter后的问题"></a>使用<code>filter</code>后的问题</h2><p>如果我们的项目中在使用<code>position</code>的值为<code>absolute</code>或者<code>fixed</code>上使用，会导致样式错乱。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>当元素的 <code>position</code> 的值为<code>absolute</code> 或者<code>fixed</code> 时，<code>filter</code> 会为其创建一个<code>新的包含块或容器</code>，造成该 <code>absolute</code> 或 <code>fixed</code> 元素的定位发生改变。</p><p>大白话就是改变了 <code>absolute</code> 或 <code>fixed</code> 元素的定位元素依据，变成了一个新创建的元素。  </p><p>在 <code>body</code> 标签中使用 <code>filter</code> 属性后， <code>filter</code> 会生成一个<code>新的包含块/容器</code>，其<code>位置大小</code>和 <code>body</code> 一样。<code>fixed</code> 或<code>absolute</code> 元素就会根据这个<code>包含块/容器进行定位</code>，而不在根据<code>原元素作为依据进行定位</code>，所以加了 <code>filter</code> 后我们看到了部分样式错乱失效或失效的界面；</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>我们可以在<code>根元素（也就是html）</code>上添加 <code>filter</code> 属性，进行统一添加  </li><li>对指定标签元素添加 <code>filter</code> 属性，如：<code>span</code>、<code>p</code>、<code>img</code>、<code>image</code>、<code>text</code>、<code>video</code>等</li></ol><h1 id="flutter中实现应用页面变灰"><a href="#flutter中实现应用页面变灰" class="headerlink" title="flutter中实现应用页面变灰"></a><code>flutter</code>中实现应用页面变灰</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><em>Flutter</em>是<code>Google</code>开源的构建用户界面（UI）工具包，帮助开发者通过一套代码库高效构建多平台精美应用，支持<code>移动</code>、<code>Web</code>、<code>桌面</code>和<code>嵌入式平台</code>。<em>Flutter</em> 是一个开源且免费的跨端框架，拥有宽松的开源协议，适合商业项目。</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>在<code>flutter</code>中没有像<code>网页</code>、<code>小程序</code>中这样复杂，我们只需要使用<code>ColorFiltered</code>包裹根目录<code>widget</code>就可以实现整体的页面变灰。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dbc06a62d134848a69ff214aa64fc94~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="添加ColorFiltered"><a href="#添加ColorFiltered" class="headerlink" title="添加ColorFiltered"></a>添加<code>ColorFiltered</code></h4><p>我们这里使用<code>ColorFilter.mode</code>属性，<code>BlendMode</code>的值为<code>color</code>，就可以实现我们的效果了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">return</span> ColorFiltered(</span><br><span class="line">        colorFilter: const ColorFilter.mode(</span><br><span class="line">            Color(0xff8a8a8a),</span><br><span class="line">            BlendMode.color,</span><br><span class="line">        ),</span><br><span class="line">        child: MaterialApp(</span><br><span class="line">            title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">            theme: ThemeData(</span><br><span class="line">                primarySwatch: Colors.blue,</span><br><span class="line">            ),</span><br><span class="line">            home: const MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加后的效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed7fb81e60a64417823d5734e69f192d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript高阶函数-reduce</title>
      <link href="/2022/12/01/202212011136/"/>
      <url>/2022/12/01/202212011136/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>可能部分同学很少在项目中使用到<code>reduce</code>，使用过的朋友感觉到它是非常的方便。<br>一问<code>reduce</code>可以干什么？有哪些好用便捷之处？<br>下面我们将详细解释并举例使用，相信看完本篇文章后你会有更深和对其有一定的了解。</p><h2 id="什么是reduce"><a href="#什么是reduce" class="headerlink" title="什么是reduce"></a>什么是reduce</h2><p><code>reduce</code>是<code>es6</code>中新增的一个方法，普遍用于求和使用，但你知道吗，它不只是可以用于求和，还有其他的使用方法和技巧。</p><p><strong>让我们一起看看它还有哪些奥妙之处。let’s go</strong></p><h3 id="reduce-语法"><a href="#reduce-语法" class="headerlink" title="reduce 语法"></a>reduce 语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(callback,[initialValue])</span><br></pre></td></tr></table></figure><p><code>reduce</code>为数组中的每一个元素依次执行回调函数callback，不包括数组中被删除或从未被赋值的元素，接受四个参数：</p><ul><li>「初始值」（或者上一次回调函数的返回值）</li><li>「当前元素值」</li><li>「当前索引」</li><li>「调用 reduce 的数组」。</li></ul><p><code>callback</code>回调函数必须有返回值。</p><p><strong>initialValue(可选参数)</strong></p><p>当设置了<code>initialValue</code>参数时，<code>callback</code> 第一个参数 初始值将默认是 <code>initialValue</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur, index, arr</span>) =&gt;</span>  pre + cur)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, sum); <span class="comment">// [1, 2, 3, 4]，10</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips：当arr为空时，并且没有初始值，会报错。如下图</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0899f7b54eb8478eb10436cbe2876567~tplv-k3u1fbpfcp-watermark.image" alt="WX20221201-104123.png"></p><p>当设置默认值过后，尽管<code>arr</code>为空，它不会报错了，看下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur, index, arr</span>) =&gt;</span> pre + cur)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, sum); <span class="comment">// []，0</span></span><br></pre></td></tr></table></figure><p>下面让我们看看<code>reduce</code>都有些什么用法吧</p><h3 id="一、简单求和、乘积"><a href="#一、简单求和、乘积" class="headerlink" title="一、简单求和、乘积"></a>一、简单求和、乘积</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y)</span><br><span class="line"><span class="keyword">let</span> sumOne = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>)=&gt;</span> x * y)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 求和，10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sumOne); <span class="comment">// 求乘积，24</span></span><br></pre></td></tr></table></figure><h3 id="二、查找数组中的最大值"><a href="#二、查找数组中的最大值" class="headerlink" title="二、查找数组中的最大值"></a>二、查找数组中的最大值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item, next</span>) =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(item, next))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="三、多维数组转一维"><a href="#三、多维数组转一维" class="headerlink" title="三、多维数组转一维"></a>三、多维数组转一维</h3><p>通过<code>reduce</code>搭配<code>concat</code>即可实现多维数组的转换</p><p><strong>二维数组转一维</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>)=&gt;</span> pre.<span class="title function_">concat</span>(cur), [])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><strong>多维数组转一维</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]]</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">newArr</span> = (<span class="params">arr</span>) =&gt; arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">newArr</span>(cur) : cur), [])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">newArr</span>(arr)); <span class="comment">//[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><h3 id="四、数组去重"><a href="#四、数组去重" class="headerlink" title="四、数组去重"></a>四、数组去重</h3><p><strong>普通的一维数组去重</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    pre.<span class="title function_">indexOf</span>(cur) === -<span class="number">1</span> &amp;&amp; pre.<span class="title function_">push</span>(cur);</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;,[]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><strong>数组对象去重</strong><br>关于对象数组去重我们需要根据对象中的一个键名作为条件，去达到去重的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;tom2&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Judy&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> hash = &#123;&#125;</span><br><span class="line">data = data.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 根据 id 去重</span></span><br><span class="line">  <span class="keyword">if</span> (!hash[next.<span class="property">id</span>]) &#123;</span><br><span class="line">    hash[next.<span class="property">id</span>] = <span class="literal">true</span></span><br><span class="line">    item.<span class="title function_">push</span>(next)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash) <span class="comment">// &#123;1: true, 2: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">// [&#123;name: &#x27;tom&#x27;, id: 1&#125;,&#123;name: &#x27;jack&#x27;, id: 2&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="五、计算元素出现的次数"><a href="#五、计算元素出现的次数" class="headerlink" title="五、计算元素出现的次数"></a>五、计算元素出现的次数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrCount = names.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(cur <span class="keyword">in</span> pre)&#123;</span><br><span class="line">    pre[cur]++</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    pre[cur] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre</span><br><span class="line">&#125;,&#123;&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCount); <span class="comment">//&#123;tom: 2, jack: 2, Alice: 1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="六、reduceRight"><a href="#六、reduceRight" class="headerlink" title="六、reduceRight()"></a>六、reduceRight()</h3><p>该方法用法与<code>reduce()</code>实现达到的效果是一样的，只是说遍历的顺序相反，它是从数组的最后一项开始，向前遍历到第一项。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上内容就是<code>javaScript</code>中<code>reduce</code>的一些奥秘用法，了解了以上的一些用法，像多维数组转一维、数组去重这些又多了一步技巧和方法。结合原生的<code>api</code>使用，会使我们在开发的过程中更加的便利。<br>如果你有更好的建议或本文中出现不足/问题的地方，欢迎各位朋友在下方评论区进行评论。</p><p>感谢你阅读本篇文章，希望本篇文章对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node从零到一，实现API的编写并能够访问（一）</title>
      <link href="/2022/11/30/202211301734/"/>
      <url>/2022/11/30/202211301734/</url>
      
        <content type="html"><![CDATA[<p>最近在开始探索Node，使自己逐渐向全栈发展，简单记录一下从0到1的过程。<br>Node官网：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h2 id="一、-安装Node-js"><a href="#一、-安装Node-js" class="headerlink" title="一、 安装Node.js"></a>一、 安装Node.js</h2><p>已安装过的小伙伴可忽略此步骤</p><ol><li>打开Node官网，下载并安装Node.js<br>下载地址：<a href="http://nodejs.cn/download/">Node下载地址</a></li><li>安装完成过后按 <strong>win + R</strong>(Window系统),输入 <strong>cmd</strong><br>在命令行中输入 **node -v **，如果出现了版本号则表示安装成功</li></ol><h2 id="二、-初始化项目"><a href="#二、-初始化项目" class="headerlink" title="二、 初始化项目"></a>二、 初始化项目</h2><ol><li>在 <em>D盘（你们可根据自身选择磁盘）</em> 中新建一个文件夹</li><li>打开新建的文件夹</li><li>在文件夹的地址栏输入 <strong>cmd</strong></li><li>在命令行中输入 <strong>npm init</strong>，文件夹中会得到一个 <strong>package.json</strong> 的文件</li></ol><h2 id="三、-安装依赖项"><a href="#三、-安装依赖项" class="headerlink" title="三、 安装依赖项"></a>三、 安装依赖项</h2><p>我这里并没有使用 <em>Node</em> 原生的 <em>http</em>模块，使用的是<em>express</em>，有其他需要可以在安装，我这路只安装了一个 <em>express</em></p><ol><li><strong>express</strong> —— 一款基于<em>Node</em>的快速、开放、极简、易上手的<em>Node</em>框架</li><li><strong>body-parser</strong> —— 用来解析表单。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line"> npm install express body-parser mysql</span><br></pre></td></tr></table></figure><h2 id="四、-编写项目"><a href="#四、-编写项目" class="headerlink" title="四、 编写项目"></a>四、 编写项目</h2><ol><li>在文件夹的根目录新建一个<strong>app.js</strong>的文件</li><li>引入刚刚下载的 <strong>express</strong> 依赖<br>app.js 代码如下:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>),</span><br><span class="line">app = express(),</span><br><span class="line">bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>),</span><br><span class="line">    //端口号</span><br><span class="line">port  = <span class="number">5555</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//引用bodyParser </span><br><span class="line">app.use(bodyParser.json()) // <span class="keyword">for</span> parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">false</span> &#125;)) // <span class="keyword">for</span> parsing application/x-www-form-urlencoded</span><br><span class="line">//设置跨域请求</span><br><span class="line">//app.all(<span class="string">&#x27;*&#x27;</span>, (req, res, <span class="built_in">next</span>) =&gt; &#123;</span><br><span class="line">//    res.header(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">//    res.header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">//    res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;</span>)</span><br><span class="line">//    res.header(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>)</span><br><span class="line">//    res.header(<span class="string">&quot;X-Powered-By&quot;</span>, <span class="string">&#x27; 3.2.1&#x27;</span>)</span><br><span class="line">//    res.header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span><br><span class="line">//    <span class="built_in">next</span>()</span><br><span class="line">//&#125;)</span><br><span class="line">//接收请求</span><br><span class="line">app.get(<span class="string">&#x27;/api/list&#x27;</span>, (req, res) =&gt; &#123;</span><br><span class="line">//返回数据</span><br><span class="line">    res.send(<span class="string">&#x27;&lt;p style=&quot;color:red&quot;&gt;服务已启动&lt;/p&gt;&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 监听服务是否启动</span><br><span class="line">app.listen(port, () =&gt; console.<span class="built_in">log</span>(`~~~已启动服务,端口为: $&#123;port&#125; ~~~`) )</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、-启动项目"><a href="#五、-启动项目" class="headerlink" title="五、 启动项目"></a>五、 启动项目</h2><ol><li>打开项目的根目录文件夹， 在文件夹的地址栏输入 <strong>cmd</strong></li><li>在命令行中输入 ** node app.js**，然后我们的项目就启动起来了</li></ol><h2 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h2><p> 编写一个 <strong>index.html</strong> 的网页，然后来请求测试，是否启动成功，能够访问</p><p>index.html 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Node.js编写接口&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">       axios.get(&#x27;http://localhost:5555/api/list&#x27;)</span><br><span class="line">  .then((res) =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这就完成了通过<strong>Node</strong>简单编写一个 API 了。</p><p>下篇文章告诉大家如何部署上线，提前告诉大家需要的东西，如下：</p><ol><li>一个已经通过备案的域名</li><li>一个 线上服务器</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript中的事件循环(event Loop)</title>
      <link href="/2022/11/29/202211291744/"/>
      <url>/2022/11/29/202211291744/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于<code>javaScript</code>作为脚本语言，主要用途是与用户互动，以及操作浏览器<code>DOM</code>。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定<code>JavaScript</code>同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？这就导致了<code>javaScript</code>注定成为一门单线程的脚本语言，没办法多线程执行任务。</p><p><strong>什么是event loop（事件循环）？</strong></p><p>是指<code>浏览器</code>或<code>Node</code>的一种解决<code>javaScript</code>单线程运行时不会阻塞的一种机制，也就是我们经常使用<strong>异步</strong>的原理。<br>查看任务队列中是否存在任务，存在则送到执行栈中执行，反复循环查看并执行，这个过程称之为事件循环（event loop）。</p><p><code>js</code>的任务分为<code>同步任务</code>、<code>异步任务</code>，而异步任务里面又分<code>宏任务</code>、<code>微任务</code>。</p><p><strong>为啥需要知道event loop？</strong></p><ul><li>一是要增加自己技术的深度，也就是懂得<code>JavaScript</code>的运行机制。</li><li>二是现在前端领域各种技术层出不穷，掌握底层原理，知道其本质。可以让自己以不变，应万变。</li><li>三是应对各大互联网公司的面试，懂其原理，题目任其发挥。</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>看个的经典的代码段，并说明打印的内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">console.log(1)</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">    resolve()</span><br><span class="line">    console.log(3)  </span><br><span class="line">&#125;).then(res =&gt;&#123;</span><br><span class="line">    console.log(4)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(5)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这段代码输出的正确顺序为：1、3、5、4、2。</p><p>原因：<code>setTimeout</code>为<code>宏任务</code>；<code>new Promise </code>的<code>then</code>/<code>catch</code>为<code>微任务</code>/<code>异步任务</code>；其他的为<code>同步任务</code>。具体可以看看下面的详细解释，相信你看完过后将会更明白，别人问起将不再吞吐。</p><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p> <code>script</code>标签中的全部代码、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>（浏览器暂时不支持，只有IE10支持，具体可见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setImmediate"><strong>MDN</strong></a>、<code>I/O</code>、<code>UI Rendering</code>。</p><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p><code>Promise</code> 中的<code>then/catch</code>、<code>async / await</code>、<code>Process.nextTick</code>（Node独有）、<code>Object.observe</code>(废弃)、<code>MutationObserver</code>（具体使用方式查看<a href="http://javascript.ruanyifeng.com/dom/mutationobserver.html">这里</a>)</p><h6 id="宏任务和微任务执行图表说明"><a href="#宏任务和微任务执行图表说明" class="headerlink" title="宏任务和微任务执行图表说明"></a>宏任务和微任务执行图表说明</h6><p>执行栈中会先执行同步任务，同步任务执行完后会执行微任务，微任务执行完后会执行宏任务，当一个宏任务执行后会看执行栈中是否存在同步任务，存在则先执行同步任务，同步任务执行完后会查看是否存在微任务，存在则执行微任务，如果不存在同步任务和微任务则继续宏任务，这个过程是一个循环往复的过程。如果宏任务中存在同步任务和微任务则先执行，并重复刚刚的步骤。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f368c3792ba047e5a24136ddf250d965~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>结合上面的案例看，相信你会更加深刻。</p><h3 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h3><p>放入<code>js</code>主（线程/引擎）中立即执行并原地等待结果的任务。有<code>console</code>、<code>new Promise</code>的函数体等。</p><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p>先放入宿主环境（浏览器、node）中，不必原地等待结果的任务，在将来执行，并将执行的回调函数放入主线程，不影响/阻塞主线程继续往下执行的任务。有<code>setTimeout</code>、<code>Ajax/Fetch</code>、<code>setInterval</code>、<code>注册事件回调（如：addEventListener）</code>、<code>Promise的then/catch</code></p><h6 id="同步任务和异步任务图表说明"><a href="#同步任务和异步任务图表说明" class="headerlink" title="同步任务和异步任务图表说明"></a>同步任务和异步任务图表说明</h6><p>当执行栈中的的任务执行完后会清除一次执行栈，并重新从任务队列中拿取任务并执行（异步任务）。<br>创建完同步任务后会直接放进执行栈并原地等待执行结果；<br>异步任务创建时会先放进宿主环境，带时机成熟（比如定时器的时间到了）会将异步任务回调放入任务队列中，然后执行栈会根据任务队列中的任务进行执行。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60b057eafb9e4581821d76972d755796~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>结合上面的案例看，相信你会更加深刻。</p><p>我们将事件查找并执行的这样一个循环过程称之为<code>事件循环</code>，也叫 <code>event loop</code>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>js 是单线程的，防止代码执行过程中的阻塞，我们把任务分为了：同步任务和异步任务</li><li>同步任务将会交给js引擎执行，异步任务将交给宿主环境执行</li><li>同步任务将放入执行栈立即执行并原地等待结果，异步任务会待时机成熟时推入任务队列排队执行</li><li>执行栈执行完毕时，会清空执行栈并查看任务队列中是否存在任务，存在则送到执行栈中执行，反复循环查看并执行，这个过程称之为事件循环（event loop）</li></ul><p>感谢你阅读本篇文章，希望本篇文章对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的Math</title>
      <link href="/2022/11/28/202211281720/"/>
      <url>/2022/11/28/202211281720/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>javascript</code>中的<strong>Math</strong>对象作为保存数学公式、信息和计算的地方。<br><strong>Math</strong>对象提供了一些辅助计算的属性和方法，在我们日常使用都是**Math.ceil()、Math.round()**等较多。</p><p>为啥没有<code>new Math()</code>这种操作呢？</p><p>因为啊<code>Math()</code>和<code>Date()</code>等这种对象不一样，它在我们的<code>javascript</code>引擎中就已经帮我们<code>new</code>好了，所以我们在使用的过程中也就不再需要<code>new Math()</code>，这种操作了，我们直接<code>Math.xx</code>这样使用就可以了。</p><p>本篇文章将对<strong>Math</strong>对象的一些<code>api</code>进行系列的详解和使用。</p><p><strong>let’s go</strong>，让我们步入正题</p><h4 id="1、min-方法"><a href="#1、min-方法" class="headerlink" title="1、min() 方法"></a>1、min() 方法</h4><p>用来确定一组数值中的最小值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> min = Math.min(3, 54, 32, 16);</span><br><span class="line">   console.log(min);   // 3</span><br></pre></td></tr></table></figure><h4 id="2、max-方法"><a href="#2、max-方法" class="headerlink" title="2、max() 方法"></a>2、max() 方法</h4><p>用来确定一组数值中的最大值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> max = Math.max(3, 54, 32, 16);</span><br><span class="line">   console.log(max);   // 54</span><br></pre></td></tr></table></figure><h4 id="2、舍入"><a href="#2、舍入" class="headerlink" title="2、舍入"></a>2、舍入</h4><h6 id="1-Math-ceil"><a href="#1-Math-ceil" class="headerlink" title="1.  Math.ceil()"></a>1.  Math.ceil()</h6><p>方法始终向上舍入为最接近的整数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.ceil(25.9));    // 26</span><br><span class="line">   console.log(Math.ceil(25.1));    // 26</span><br></pre></td></tr></table></figure><h6 id="2-Math-floor"><a href="#2-Math-floor" class="headerlink" title="2. Math.floor()"></a>2. Math.floor()</h6><p>始终向下舍入为最接近的整数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.floor(25.9));   // 25</span><br><span class="line">   console.log(Math.floor(25.1));   // 25</span><br></pre></td></tr></table></figure><h6 id="3-Math-round"><a href="#3-Math-round" class="headerlink" title="3. Math.round()"></a>3. Math.round()</h6><p>方法执行四舍五入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.round(25.6));   // 26</span><br><span class="line">   console.log(Math.round(25.1));   // 25</span><br></pre></td></tr></table></figure><h6 id="4-Math-fround"><a href="#4-Math-fround" class="headerlink" title="4. Math.fround()"></a>4. Math.fround()</h6><p>返回数值最接近的单精度（32位）浮点值表示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.fround(0.5));   // 0.5</span><br><span class="line">console.log(Math.fround(25.9)); // 25.899999618530273</span><br></pre></td></tr></table></figure><h4 id="3、random"><a href="#3、random" class="headerlink" title="3、random()"></a>3、random()</h4><p>返回一个0~1范围内的随机数，其中包含0但不包含1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.random());   // 0.7200208040406486</span><br><span class="line">console.log(Math.random());   // 0.3164350705812933</span><br></pre></td></tr></table></figure><p>需要1 - 10之间的数就直接将返回值 × 10，如果是需要0 - 100 间的数则 × 100，以此类推</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.random() * 10) //7.173275197566868</span><br><span class="line">console.log(Math.random() * 10) //9.037917861672913</span><br></pre></td></tr></table></figure><h4 id="4、其他方法"><a href="#4、其他方法" class="headerlink" title="4、其他方法"></a>4、其他方法</h4><p><strong>Math</strong>还有的一些属性和方法，在我们的日常使用中可以说是没用，甚至没见过，这里我就直接通过图片列出来，以供了解</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a916a37666a0475f9de5a948900935c5~tplv-k3u1fbpfcp-zoom-1.image" alt="请添加图片描述"></p><p>以上内容就是<code>js</code>中<code>Math</code>的方法<code>api</code>的使用及介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解JavaScript的String（二）</title>
      <link href="/2022/11/27/202211272047/"/>
      <url>/2022/11/27/202211272047/</url>
      
        <content type="html"><![CDATA[<p>本篇衔接”<a href="https://juejin.cn/post/7170325692361408525">详解JavaScript的String </a> “这篇文章</p><h1 id="一、字符串检测"><a href="#一、字符串检测" class="headerlink" title="一、字符串检测"></a>一、字符串检测</h1><h2 id="1、indexOf"><a href="#1、indexOf" class="headerlink" title="1、indexOf()"></a>1、indexOf()</h2><p>方法从字符串开头开始查找子字符串，如果包含则返回下标，反之则返回 -1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.indexOf(<span class="string">&quot;o&quot;</span>));      // 4</span><br><span class="line">   console.log(string.indexOf(<span class="string">&quot;B&quot;</span>)); // -1</span><br></pre></td></tr></table></figure><h2 id="2、lastIndexOf"><a href="#2、lastIndexOf" class="headerlink" title="2、lastIndexOf()"></a>2、lastIndexOf()</h2><p>方法从字符串末尾开始查找子字符串，如果包含则返回下标，反之则返回 -1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.lastIndexOf(<span class="string">&quot;o&quot;</span>));      // 4</span><br><span class="line">   console.log(string.lastIndexOf(<span class="string">&quot;B&quot;</span>)); // -1</span><br></pre></td></tr></table></figure><h1 id="二、字符串包含"><a href="#二、字符串包含" class="headerlink" title="二、字符串包含"></a>二、字符串包含</h1><h2 id="1、includes"><a href="#1、includes" class="headerlink" title="1、includes()"></a>1、includes()</h2><p><strong>ES6</strong>新增，用于检测字符串、数组等中是否包含该值，以布尔值的形式返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.includes(<span class="string">&quot;o&quot;</span>));      // <span class="literal">true</span></span><br><span class="line">   console.log(string.includes(<span class="string">&quot;B&quot;</span>)); // <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="2、startsWith"><a href="#2、startsWith" class="headerlink" title="2、startsWith()"></a>2、startsWith()</h2><p><strong>ES6</strong>新增，用于检测字符串、数组等中是否以某个字符串开头，以布尔值的形式返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.startsWith(<span class="string">&quot;h&quot;</span>));      // <span class="literal">true</span></span><br><span class="line">   console.log(string.startsWith(<span class="string">&quot;B&quot;</span>)); // <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="3、endsWith"><a href="#3、endsWith" class="headerlink" title="3、endsWith()"></a>3、endsWith()</h2><p><strong>ES6</strong>新增，用于检测字符串、数组等中是否以某个字符串结尾，以布尔值的形式返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.endsWith(<span class="string">&quot;d&quot;</span>));      // <span class="literal">true</span></span><br><span class="line">   console.log(string.endsWith(<span class="string">&quot;B&quot;</span>)); // <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>上面的<strong>includes()</strong> 和 <strong>startsWith()</strong> 方法只接受两个参数(可选)。第一个参数，表示开始搜索的位置。如果传入第二个参数，则意味着这两个方法会从指定位置向着字符串末尾搜索，忽略该位置之前的所有字符。<br><strong>endsWith()</strong> 也只接受两个参数。第一个参数，表示应该当作字符串末尾的位置。如果不提供这个参数，那么默认就是字符串长度。如果提供这个参数，那么就好像字符串只有那么多字符一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line">   console.log(message.startsWith(<span class="string">&quot;foo&quot;</span>));      // <span class="literal">true</span></span><br><span class="line">   console.log(message.startsWith(<span class="string">&quot;foo&quot;</span>, 1));   // <span class="literal">false</span></span><br><span class="line">   console.log(message.includes(<span class="string">&quot;bar&quot;</span>));         // <span class="literal">true</span></span><br><span class="line">   console.log(message.includes(<span class="string">&quot;bar&quot;</span>, 4));     // <span class="literal">false</span></span><br><span class="line">   <span class="built_in">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line">   console.log(message.endsWith(<span class="string">&quot;bar&quot;</span>));      // <span class="literal">false</span></span><br><span class="line">   console.log(message.endsWith(<span class="string">&quot;bar&quot;</span>, 6));   // <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="三、字符串空格"><a href="#三、字符串空格" class="headerlink" title="三、字符串空格"></a>三、字符串空格</h1><h2 id="1、trim"><a href="#1、trim" class="headerlink" title="1、trim()"></a>1、trim()</h2><p>清除所有空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.trim());      // helloworld</span><br></pre></td></tr></table></figure><h2 id="2、trimLeft"><a href="#2、trimLeft" class="headerlink" title="2、trimLeft()"></a>2、trimLeft()</h2><p>清除左侧空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot; hello world&quot;</span>;</span><br><span class="line">   console.log(string.trimLeft());      // hello world</span><br></pre></td></tr></table></figure><h2 id="3、trimRight"><a href="#3、trimRight" class="headerlink" title="3、trimRight()"></a>3、trimRight()</h2><p>清除右侧空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world &quot;</span>;</span><br><span class="line">   console.log(string.trimRight());      // hello world</span><br></pre></td></tr></table></figure><h1 id="四、repeat"><a href="#四、repeat" class="headerlink" title="四、repeat()"></a>四、repeat()</h1><p>表示要将字符串复制多少次，然后返回拼接所有副本后的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;na &quot;</span>;</span><br><span class="line">console.log(string.repeat(16)+ <span class="string">&quot;batman&quot;</span>);</span><br><span class="line">// na na na na na na na na na na na na na na na na batman</span><br></pre></td></tr></table></figure><h1 id="五、填充字符串"><a href="#五、填充字符串" class="headerlink" title="五、填充字符串"></a>五、填充字符串</h1><h2 id="1、padStart"><a href="#1、padStart" class="headerlink" title="1、padStart()"></a>1、padStart()</h2><p>如果小于指定长度，则在开始处填充字符，直至满足长度条件。第一个参数是长度，第二个参数是填充字符串（可选），默认为空格。</p><h2 id="2、padEnd"><a href="#2、padEnd" class="headerlink" title="2、padEnd()"></a>2、padEnd()</h2><p>如果小于指定长度，则在结尾处填充字符，直至满足长度条件。第一个参数是长度，第二个参数是填充字符串（可选），默认为空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">   console.log(string.padStart(6));         // <span class="string">&quot;    foo&quot;</span></span><br><span class="line">   console.log(string.padStart(9, <span class="string">&quot;.&quot;</span>));   // <span class="string">&quot;......foo&quot;</span></span><br><span class="line">   console.log(string.padEnd(6));           // <span class="string">&quot;foo    &quot;</span></span><br><span class="line">   console.log(string.padEnd(9, <span class="string">&quot;.&quot;</span>));     // <span class="string">&quot;foo......&quot;</span></span><br></pre></td></tr></table></figure><h1 id="六、字符串大小写转换"><a href="#六、字符串大小写转换" class="headerlink" title="六、字符串大小写转换"></a>六、字符串大小写转换</h1><h2 id="1、toLowerCase-、toLocaleLowerCase"><a href="#1、toLowerCase-、toLocaleLowerCase" class="headerlink" title="1、toLowerCase() 、toLocaleLowerCase()"></a>1、toLowerCase() 、toLocaleLowerCase()</h2><p>将大写转为小写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;HELLO&quot;</span></span><br><span class="line">console.log(string.toLowerCase())//hello</span><br><span class="line">console.log(string.toLocaleLowerCase())//hello</span><br></pre></td></tr></table></figure><h2 id="2、toUpperCase-、toLocaleUpperCase"><a href="#2、toUpperCase-、toLocaleUpperCase" class="headerlink" title="2、toUpperCase()、toLocaleUpperCase()"></a>2、toUpperCase()、toLocaleUpperCase()</h2><p>将小写转为大写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello&quot;</span></span><br><span class="line">console.log(string.toUpperCase())//HELLO</span><br><span class="line">console.log(string.toLocaleUpperCase())//HELLO</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解JavaScript的String</title>
      <link href="/2022/11/26/202211262205/"/>
      <url>/2022/11/26/202211262205/</url>
      
        <content type="html"><![CDATA[<p><strong>String</strong>是对应字符串的引用类型。由16位码元（code unit）组成。对多数字符来说，每16位码元对应一个字符。可以通过<strong>new</strong>构造函数创建，也可以通过字面量的方式创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = new String(<span class="string">&quot;hello&quot;</span>)//new 创建</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">test</span> = <span class="string">&quot;hello&quot;</span>//字面量创建</span><br></pre></td></tr></table></figure><h1 id="一、length属性"><a href="#一、length属性" class="headerlink" title="一、length属性"></a>一、length属性</h1><p>字符串中字符的数量(长度)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.length); //11</span><br></pre></td></tr></table></figure><h1 id="二、chart"><a href="#二、chart" class="headerlink" title="二、chart()"></a>二、chart()</h1><p>返回给定索引位置的字符，由传给方法的整数参数指定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.chart(0)); // <span class="string">&quot;h&quot;</span></span><br></pre></td></tr></table></figure><h1 id="三、拼接字符串"><a href="#三、拼接字符串" class="headerlink" title="三、拼接字符串"></a>三、拼接字符串</h1><p>目前有<strong>concat()<strong>、</strong>（ + ）号拼接</strong>、<strong>模板字符串</strong>三种方式</p><h2 id="1、concat"><a href="#1、concat" class="headerlink" title="1、concat()"></a>1、concat()</h2><p>用于将一个或多个字符串拼接成一个新字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">   <span class="built_in">let</span> result = string.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">   console.log(result);        // <span class="string">&quot;hello world&quot;</span></span><br><span class="line">   console.log(string); // <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2、（-）号拼接"><a href="#2、（-）号拼接" class="headerlink" title="2、（ + ）号拼接"></a>2、（ + ）号拼接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">   <span class="built_in">let</span> result = string + <span class="string">&quot;world&quot;</span>;</span><br><span class="line">   console.log(result);        // <span class="string">&quot;hello world&quot;</span></span><br><span class="line">   console.log(string); // <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3、模板字符串"><a href="#3、模板字符串" class="headerlink" title="3、模板字符串"></a>3、模板字符串</h2><p>模板字符串用两个反引号**`**表示，里面的变量用 **${}**来装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">   <span class="built_in">let</span> result = `<span class="variable">$&#123;string&#125;</span>world`;</span><br><span class="line">   console.log(result);        // <span class="string">&quot;hello world&quot;</span></span><br><span class="line">   console.log(string); // <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h1 id="四、提取字符串"><a href="#四、提取字符串" class="headerlink" title="四、提取字符串"></a>四、提取字符串</h1><h2 id="1、slice"><a href="#1、slice" class="headerlink" title="1、slice()"></a>1、slice()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   console.log(string.slice(3));         // <span class="string">&quot;lo world&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2、substr"><a href="#2、substr" class="headerlink" title="2、substr()"></a>2、substr()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">console.log(string.substr(3));        // <span class="string">&quot;lo world&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3、substring"><a href="#3、substring" class="headerlink" title="3、substring()"></a>3、substring()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">console.log(string.substring(3));    // <span class="string">&quot;lo world&quot;</span></span><br></pre></td></tr></table></figure><p>上面的**slice()<strong>和</strong>substring()**提取方法只接受两个参数(可选)。如果只传入一个参数，未传第二个参数，则从传入的第一个参数开始提取，直至结尾；若传了第二个参数，则只提取第一个参数到第二个参数间的字符。<br>**substr()**也只接受两个参数(可选)。只传入一个参数，未传第二个参数，则从传入的第一个参数开始提取，直至结尾；它的第二个参数代表它需要返回的字符长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">console.log(string.slice(3, 7));     // <span class="string">&quot;lo w&quot;</span></span><br><span class="line">   console.log(string.substring(3,7)); // <span class="string">&quot;lo w&quot;</span></span><br><span class="line">   console.log(string.substr(3, 7));    // <span class="string">&quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure><p>本篇完结！<br>篇幅过多，剩余部分请前往主页查看，文章标题为：详解<br><a href="https://juejin.cn/post/7170676492450398221">JavaScript的String（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 权限菜单（动态路由）详解</title>
      <link href="/2022/11/25/202211251637/"/>
      <url>/2022/11/25/202211251637/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天记录一下<strong>Vue</strong>的<strong>权限菜单（动态路由）</strong>，在我们写后台的时候用的比较多，Vue的权限菜单分两种，一种是<strong>通过本地进行，根据账号的权限进行筛选出可用的权限，组合菜单并在页面上渲染显示</strong>，另一种是<strong>根据登录的账号，后端直接回可用的权限菜单，前端进行整合渲染</strong>。第二种在日常中使用比第一种的情况多些，本篇文章讲述记录的也是第二种方式。我这里使用的是 <a href="https://panjiachen.github.io/vue-element-admin-site/">element-ui的Admin</a> 模板。</p><h1 id="一、新建请求的js"><a href="#一、新建请求的js" class="headerlink" title="一、新建请求的js"></a>一、新建请求的js</h1><p>我这里是新建了一个请求的js，你们可以直接将这个方法写在你们现在的请求js里面。<br>在<strong>src</strong>目录下新建一个文件夹<strong>api</strong>，新建是一个名<strong>request</strong>的js文件。</p><p><strong>request.js代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//这个request 是模板自带的，封装了axios的request，在utils目录下</span><br><span class="line">import request from <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">//...其他的请求</span><br><span class="line">  // 获取权限菜单列表</span><br><span class="line">  <span class="function"><span class="title">getRoleMenu</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> request(&#123;</span><br><span class="line">      url: `项目请求url`,</span><br><span class="line">      method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">   // ...其他的请求</span><br><span class="line">  //</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、新建一个获取菜单的js"><a href="#二、新建一个获取菜单的js" class="headerlink" title="二、新建一个获取菜单的js"></a>二、新建一个获取菜单的js</h1><p>在<strong>src</strong>目录下新建一个文件夹<strong>menu</strong>，在<strong>menu</strong>下新建一个<strong>menu.js</strong>。</p><p><strong>menu.js代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">import Layout from <span class="string">&#x27;@/layout&#x27;</span>//引入admin的layout布局</span><br><span class="line">import router from <span class="string">&#x27;../router&#x27;</span>//引入router</span><br><span class="line">import request from <span class="string">&#x27;../api/request.js&#x27;</span>//自定义封装的请求</span><br><span class="line">import store from <span class="string">&#x27;../store&#x27;</span>//Vuex</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  // 获取路由菜单</span><br><span class="line">  <span class="function"><span class="title">getMenu</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      return request.getRoleMenu().then(res =&gt; &#123;</span><br><span class="line">      /*  回来的数据格式参考</span><br><span class="line">// [&#123;</span><br><span class="line">//   type：<span class="number">1</span>,//<span class="number">1</span>表示有子路由，<span class="number">0</span>则没有</span><br><span class="line">//   path: &#x27;路径&#x27;,</span><br><span class="line">//   component: Layout,</span><br><span class="line">//   children: [&#123;</span><br><span class="line">//     path: &#x27;&#x27;,</span><br><span class="line">//     name: &#x27;名称&#x27;,</span><br><span class="line">//     component: &#x27;页面路径&#x27;,</span><br><span class="line">//     meta: &#123;</span><br><span class="line">//       title: &#x27;页面标题&#x27;,</span><br><span class="line">//       icon: &#x27;图标&#x27;</span><br><span class="line">//     &#125;,</span><br><span class="line">//children: []//如果有子路由则需要写</span><br><span class="line">//   &#125;]</span><br><span class="line">// &#125;]</span><br><span class="line">*/</span><br><span class="line">      //声明一个空数组，用来装处理好的菜单信息</span><br><span class="line">        const result = []</span><br><span class="line">        // 获取到路由菜单，进行递归数据处理</span><br><span class="line">        this.parseRoute(res.data, result, <span class="number">1</span>)</span><br><span class="line">        // 添加菜单</span><br><span class="line">        this.addMenu(result)</span><br><span class="line">        //缓存用户菜单，我这里使用的是sessionStorage，用localStorage也可以</span><br><span class="line">        sessionStorage.setItem(&quot;route&quot;, JSON.stringify(res.data))</span><br><span class="line">        // 输出成功</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).catch(err =&gt;&#123;</span><br><span class="line">        reject()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 对路由菜单递归数据处理</span><br><span class="line">  parseRoute(fullList, resultList, step) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      let result = []</span><br><span class="line">      // 路由类型申明，<span class="number">0</span>表示没有二级路由，<span class="number">1</span>表示有一级路由</span><br><span class="line">      const typeArray = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">      // 循环进行数据处理</span><br><span class="line">      for (let i = <span class="number">0</span>; i &lt; fullList.length; i++) &#123;</span><br><span class="line">        const itemElement = fullList[i]</span><br><span class="line">        let routerObject = null</span><br><span class="line">        const childrenList = []</span><br><span class="line"></span><br><span class="line">        // 路由类型过滤，如果回来的路由类型不存在，则直接结束当前循环进行下一次循环</span><br><span class="line">        if (!typeArray.includes(itemElement.type)) &#123;</span><br><span class="line">          <span class="built_in">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">//对当前执行步骤进行判断，step 等于1，则属于主路由，反之则属于子路由</span><br><span class="line">        <span class="keyword">if</span> (step === 1) &#123;</span><br><span class="line">          routerObject = &#123;</span><br><span class="line">            path: itemElement[<span class="string">&#x27;routePath&#x27;</span>],</span><br><span class="line">            component: Layout,</span><br><span class="line">            children: [&#123;</span><br><span class="line">              path: itemElement[<span class="string">&#x27;routePath&#x27;</span>],</span><br><span class="line">              name: itemElement[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">              component: resolve =&gt; require([`@/views<span class="variable">$&#123;itemElement.componentsPath&#125;</span>`], resolve),</span><br><span class="line">              meta: &#123;</span><br><span class="line">                title: itemElement[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">                icon: itemElement[<span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line">              &#125;,</span><br><span class="line">              children: childrenList</span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          routerObject = &#123;</span><br><span class="line">            path: itemElement[<span class="string">&#x27;routePath&#x27;</span>],</span><br><span class="line">            name: itemElement[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">            component: resolve =&gt; require([`@/views<span class="variable">$&#123;itemElement.componentsPath&#125;</span>`], resolve),</span><br><span class="line">            meta: &#123;</span><br><span class="line">              title: itemElement[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">              icon: itemElement[<span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            children: childrenList</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const itemResult = []</span><br><span class="line">        //对主路由尽心判断，满足条件则进行递归</span><br><span class="line">        <span class="keyword">if</span> (itemElement[<span class="string">&#x27;nextMenuList&#x27;</span>] != null &amp;&amp; itemElement[<span class="string">&#x27;nextMenuList&#x27;</span>].length) &#123;</span><br><span class="line">          this.parseRoute(itemElement[<span class="string">&#x27;nextMenuList&#x27;</span>], itemResult, step + 1)</span><br><span class="line">        &#125;</span><br><span class="line">//将组装好的子路由信息插入数组</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">let</span> j = 0; j &lt; itemResult.length; j++) &#123;</span><br><span class="line">          childrenList.push(itemResult[j])</span><br><span class="line">        &#125;</span><br><span class="line">//判断子路由数组长度</span><br><span class="line">        <span class="keyword">if</span> (childrenList.length === 0) &#123;//不存在子路由</span><br><span class="line">          <span class="keyword">if</span> (step === 1) &#123;//如果是主路由则删除第一个子路由，如果不删除则会出现一个空的父菜单</span><br><span class="line">            delete routerObject.children[0].children</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;//如果是子路由，则删除子路由下的子路由，删除的这个子路由是空的，必须需要删除，否则也会出现一个空的菜单</span><br><span class="line">            delete routerObject.children</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;//存在子路由</span><br><span class="line">          <span class="keyword">if</span> (step === 1) &#123;如果是主路由，则添加meta和子路由列表</span><br><span class="line">            routerObject.meta = routerObject.children[0].meta</span><br><span class="line">            routerObject.children = childrenList</span><br><span class="line">            // console.log(routerObject)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//插入组装好的数据</span><br><span class="line">        resultList.push(routerObject)</span><br><span class="line">        //插入最终完整的数据列表</span><br><span class="line">        result.push(routerObject)</span><br><span class="line">      &#125;</span><br><span class="line">      //输出已经组装好并且能用的数据</span><br><span class="line">      resolve(result)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 添加菜单</span><br><span class="line">  addMenu(data) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      // 在处理完的菜单列表数据后面插入<span class="number">404</span>页面，<span class="number">404</span>必须存在菜单列表的最后一项，否则会对所有页面进行拦截，并跳转<span class="number">404</span>页面</span><br><span class="line">      data.push(&#123;</span><br><span class="line">        path: &#x27;*&#x27;,</span><br><span class="line">        redirect: &#x27;/<span class="number">404</span>&#x27;,</span><br><span class="line">        hidden: true</span><br><span class="line">      &#125;)</span><br><span class="line">      // 打印菜单列表</span><br><span class="line">      // console.log(data)</span><br><span class="line">      // 将可用的路由权限列表存入Vuex</span><br><span class="line">      store.dispatch(&#x27;user/modifyMenu&#x27;, data)</span><br><span class="line">      // 添加菜单</span><br><span class="line">      router.addRoutes(data)</span><br><span class="line">      // 将路由元注入路由对象，必须添加</span><br><span class="line">      router.options.routes.push(data)</span><br><span class="line">      //输出成功</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  //</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、修改Vuex"><a href="#三、修改Vuex" class="headerlink" title="三、修改Vuex"></a>三、修改Vuex</h1><p>找到在<strong>store</strong>目录下的<strong>modules/user.js</strong>打开这个js文件，<br>引入刚刚创建的<strong>menu.js</strong>和请求的<strong>request.js</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import request from <span class="string">&quot;../../api/request.js&quot;</span></span><br><span class="line">import menu from <span class="string">&quot;../../menu/menu.js&quot;</span></span><br></pre></td></tr></table></figure><p>在<strong>state</strong>里添加一个<strong>menu</strong>，也就是<strong>getDefaultState()</strong> 里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const getDefaultState = () =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> &#123;</span><br><span class="line">    token: getToken(),</span><br><span class="line">    name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    avatar: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    menu: []//添加一个数组用来装菜单列表</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在<strong>mutations</strong>里添加一个<strong>SET_MENU</strong>的方法用来修改<strong>state</strong>里的菜单列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET_MENU: (state,menu) =&gt;&#123;</span><br><span class="line">  state.menu = menu</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是修改<strong>actions</strong>里的<strong>login</strong>方法和添加一个方法用来修改<strong>mutations</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//1、修改login方法</span><br><span class="line">在login 方法的成功回调中添加一个这个方法，用来获取权限菜单</span><br><span class="line">menu.getMenu()</span><br><span class="line">//2、添加一个方法用来修改 mutations，这个方法是跟login方法同级的</span><br><span class="line"> modifyMenu(&#123; commit &#125;,menu)&#123;</span><br><span class="line">   <span class="built_in">return</span> new Promise(resolve =&gt; &#123;</span><br><span class="line">     commit(<span class="string">&#x27;SET_MENU&#x27;</span>,menu)</span><br><span class="line">     resolve()</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>修改login方法 如图：</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c3ecca4e22d4b2eb6f75787162e4946~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>再在<strong>logout</strong>那个方法里清除缓存，像下面这段代码这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">logout</span>(&#123; commit, state &#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      // 清除缓存的权限菜单</span><br><span class="line">      sessionStorage.removeItem(&quot;route&quot;)</span><br><span class="line">      //</span><br><span class="line">      removeToken() // must remove  token  first</span><br><span class="line">      // resetRouter()</span><br><span class="line">      location.reload()</span><br><span class="line">      commit(&#x27;RESET_STATE&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>现在已经能够拿到菜单信息并能够在侧边栏菜单显示了，控制台还有个报错，只是说一刷新页面就会没有，只能够通过地址栏跳转，下一步我们先来做路由/菜单的持久化。</p><h1 id="四、修改-router，持久化处理"><a href="#四、修改-router，持久化处理" class="headerlink" title="四、修改 router，持久化处理"></a>四、修改 router，持久化处理</h1><p>找到<strong>router</strong>目录，并打开<strong>index.js</strong>。引入获取权限菜单的<strong>menu.js</strong>和<strong>Vuex</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import store from <span class="string">&#x27;../store&#x27;</span></span><br><span class="line">import menu from <span class="string">&#x27;../menu/menu.js&#x27;</span></span><br></pre></td></tr></table></figure><p> <strong>constantRoutes</strong> 中只留下<strong>登录</strong>、<strong>404</strong>、<strong>首页</strong>这三个页面的<strong>router路径</strong>其他的全部不需要。类似于下面图中那样。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adf77824cdc7425892800f1f1dbf9a69~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br> 在<strong>createRouter()</strong> 后面添加路由监听，以实现菜单的持久化。一定要放在<strong>const router = createRouter()</strong> 后面。<br> 就像下图那样<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ba66c6621c2489a9a63ac29175c8382~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br><strong>监听路由的代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//路由判断</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">// 判断是否有token</span><br><span class="line">  if (store.state.user.token) &#123;</span><br><span class="line">    // 判断是否是跳转到登录页面</span><br><span class="line">    if (to.path === &#x27;/login&#x27;) next()</span><br><span class="line">    else &#123;//判断菜单列表</span><br><span class="line">      if (!store.state.user.menu.length) &#123; // 判断当前用户是否已拉取完权限菜单信息</span><br><span class="line">          // 如果本地不存在权限菜单，则获取权限菜单，生成菜单列表</span><br><span class="line">          if(!sessionStorage.getItem(&quot;route&quot;))&#123;</span><br><span class="line">        //获取路由菜单</span><br><span class="line">            menu.getMenu().<span class="keyword">then</span>(response =&gt;&#123;</span><br><span class="line">            //保险起见，组装一次数据</span><br><span class="line">           menu.parseRoute(JSON.parse(sessionStorage.getItem(<span class="string">&quot;route&quot;</span>)), [], 1).<span class="keyword">then</span>(res =&gt;&#123;</span><br><span class="line">           //添加路由并进行跳转</span><br><span class="line">              menu.addMenu(res).<span class="keyword">then</span>(e =&gt;&#123;</span><br><span class="line">                next(&#123; ...to, replace: <span class="literal">true</span> &#125;) // hack方法 确保addRoutes已完成</span><br><span class="line">              &#125;)</span><br><span class="line">           &#125;)</span><br><span class="line">            &#125;).catch(err =&gt;&#123;//失败则直接跳转登录页面</span><br><span class="line">              next(&#123;path: <span class="string">&#x27;login&#x27;</span>&#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;//从缓存中读取用户权限列表，并添加菜单到侧边栏和路由元</span><br><span class="line">            menu.parseRoute(JSON.parse(sessionStorage.getItem(<span class="string">&quot;route&quot;</span>)), [], 1).<span class="keyword">then</span>(res =&gt;&#123;</span><br><span class="line">              menu.addMenu(res).<span class="keyword">then</span>(e =&gt;&#123;</span><br><span class="line">                next(&#123; ...to, replace: <span class="literal">true</span> &#125;) // hack方法 确保addRoutes已完成</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> next(&#123;path: <span class="string">&#x27;login&#x27;</span>&#125;) //当有权限菜单存在时，说明所有可访问路由已生成 如访问没权限的全面会自动进入登录页面</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> next(&#123;path: <span class="string">&#x27;login&#x27;</span>&#125;); // 否则全部重定向到登录页</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样我们的菜单/路由持久化就🆗了，怎么刷新都不会丢失了，如果没有这个缓存了，还会自动的去获取并加载上去，然后完成页面的跳转。</p><h1 id="五、处理问题-修改源码"><a href="#五、处理问题-修改源码" class="headerlink" title="五、处理问题/修改源码"></a>五、处理问题/修改源码</h1><p>打开我们的项目，找到并打开在<strong>src &gt; layout &gt; components &gt; Sidebar 的index.vue</strong>。打开过后往下滑，在第<strong>34</strong>行左右的位置，把<strong>routes</strong>中的<strong>return</strong>那行改一下，侧边栏的菜单就可以正常显示了。如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 菜单</span><br><span class="line">   <span class="function"><span class="title">routes</span></span>() &#123;</span><br><span class="line">   //修改的代码</span><br><span class="line">     <span class="built_in">let</span> menuRouter = this.<span class="variable">$store</span>.state.user.menu,</span><br><span class="line">         routeMenu = [...this.<span class="variable">$router</span>.options.routes,...menuRouter]</span><br><span class="line"></span><br><span class="line">     <span class="built_in">return</span> routeMenu</span><br><span class="line">     //源码中的代码</span><br><span class="line">     // <span class="built_in">return</span> this.<span class="variable">$router</span>.options.routes</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>经过上面的步骤我们的权限菜单（动态路由）就已经完成了，接下来我们需要去修改一下 element-ui的菜单源码，因为跟我们写的对不上，控制台还有个报错。</p><p>打开我们的项目，找到并打开在<strong>src &gt; layout &gt; components &gt; Sidebar 的SidebarItem.vue</strong>。打开过后往下滑，在第<strong>41</strong>行左右的位置，把<strong>item</strong>中的<strong>type</strong>那行注释掉，就可以解决控制台报错的那个小问题了。如下图：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fc978f2b1354b40b8121d70f34409f4~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>我们的 权限菜单（动态路由）就已经搞定了。以上就是操作 Vue 权限菜单（动态路由）的一个详细过程，有问题的小伙伴可以私信我，也可以评论留言，看到会回复</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise详解-手写Promise，实现一款自己的简易Promise</title>
      <link href="/2022/11/24/202211241626/"/>
      <url>/2022/11/24/202211241626/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><code>Promise</code> 是ES6异步编程的一种解决方案：</p><ul><li>从语法上讲，<code>promise</code>是一个对象，从它可以获取异步操作的消息；</li><li>从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。</li></ul><p><code>promise</code>有三种状态： </p><ul><li>pending(等待)，</li><li>fulfiled(成功)，</li><li>rejected(失败);</li></ul><p>状态一旦改变，就不会再变。<br>创造promise实例后，它会立即执行。</p><p>让我们一起实现一款自己的<strong>Promise</strong>，顺便还可以理解理解源码。</p><p><strong>Let’s go</strong></p><p>首先打开我们的编辑器，新建一个.js格式的文件。声明<strong>Padding</strong>、<strong>Fulfied</strong>、<strong>Rejected</strong>三种状态，然后创建一个<strong>Class</strong>，当然你也可以使用构造函数写。<br>为了方便理解，每行代码都有注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//Promise/A+规定的三种状态</span><br><span class="line">const Padding = <span class="string">&#x27;Padding&#x27;</span> //等待</span><br><span class="line">const Fulfilled = <span class="string">&#x27;Fulfilled&#x27;</span> //成功</span><br><span class="line">const Rejected = <span class="string">&#x27;Rejected&#x27;</span> //拒绝</span><br><span class="line"></span><br><span class="line">//创建一个名为 MyPromise 的类</span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //写个构造器方便接受 new 的时候传进来的参数</span><br><span class="line">// 构造器</span><br><span class="line">constructor(executor) &#123;</span><br><span class="line">        // 成功回调的队列</span><br><span class="line">this.resolveQueue = []</span><br><span class="line">// 拒绝/失败的回调队列             </span><br><span class="line">this.rejectQueue = []</span><br><span class="line">// 储存当前队列的value  </span><br><span class="line">this.currentValue = null</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一、完善构造器"><a href="#一、完善构造器" class="headerlink" title="一、完善构造器"></a>一、完善构造器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">// 构造器</span><br><span class="line">constructor(executor) &#123;</span><br><span class="line">// 成功回调的队列</span><br><span class="line">this.resolveQueue = []</span><br><span class="line">// 拒绝/失败的回调队列</span><br><span class="line">this.rejectQueue = []</span><br><span class="line">// 储存当前队列的value</span><br><span class="line">this.currentValue = null</span><br><span class="line">// 判断executor是否是一个函数</span><br><span class="line"><span class="keyword">if</span> (typeof executor !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">throw new Error(<span class="string">&#x27;MyPromise is not a function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">// 修改状态为Padding</span><br><span class="line">this.status = Padding</span><br><span class="line">// 声明reslove 因为箭头函数没有自己的this, 所以这里我们需要使用箭头函数</span><br><span class="line"><span class="built_in">let</span> _resolve = value =&gt; &#123;</span><br><span class="line">/*</span><br><span class="line">    把resolve执行回调的操作封装成一个函数,</span><br><span class="line">    放进setTimeout里,以兼容executor是同步代码的情况,除了可以使用setTimeout,</span><br><span class="line">    我们还可以使用MutationObserver</span><br><span class="line">*/</span><br><span class="line"><span class="built_in">let</span> run = () =&gt; &#123;</span><br><span class="line">// 判断并修改状态</span><br><span class="line"><span class="keyword">if</span> (this.modifyStatus(Fulfilled)) <span class="built_in">return</span></span><br><span class="line">// 储存当前的value</span><br><span class="line">this.currentValue = value</span><br><span class="line">// 判断成功队列是否存在值,存在则进行循环弹出，直到this.resolveQueue为空</span><br><span class="line">/*</span><br><span class="line">    这里之所以使用一个队列来储存回调,是为了实现规范要求的&lt; <span class="keyword">then</span> 方法可以被同一个 promise 调用多次&gt;</span><br><span class="line">    如果使用一个变量而非队列来储存回调,那么即使多次 <span class="keyword">then</span>()也只会执行一次回调</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">while</span> (this.resolveQueue.length) &#123;</span><br><span class="line">// 弹出</span><br><span class="line"><span class="built_in">let</span> callback = this.resolveQueue.<span class="built_in">shift</span>()</span><br><span class="line">// 执行</span><br><span class="line">callback(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 调用</span><br><span class="line">setTimeout(run);</span><br><span class="line">&#125;</span><br><span class="line">// 声明reject 因为箭头函数没有自己的this, 所以这里我们需要使用箭头函数</span><br><span class="line"><span class="built_in">let</span> _reject = value =&gt; &#123;</span><br><span class="line">/*</span><br><span class="line">    把reject执行回调的操作封装成一个函数,</span><br><span class="line">    放进setTimeout里,以兼容executor是同步代码的情况,除了可以使用setTimeout,</span><br><span class="line">    我们还可以使用MutationObserver</span><br><span class="line">*/</span><br><span class="line"><span class="built_in">let</span> run = () =&gt; &#123;</span><br><span class="line">// 判断并修改状态</span><br><span class="line"><span class="keyword">if</span> (this.modifyStatus(Rejected)) <span class="built_in">return</span></span><br><span class="line">// 储存当前的value</span><br><span class="line">this.currentValue = value</span><br><span class="line">// 判断成功队列是否存在值,存在则进行循环弹出，直到this.rejectQueue为空</span><br><span class="line">/*</span><br><span class="line">    这里之所以使用一个队列来储存回调,是为了实现规范要求的&lt; catch 方法可以被同一个 promise 调用多次&gt;</span><br><span class="line">    如果使用一个变量而非队列来储存回调,那么即使多次 catch()也只会执行一次回调</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">while</span> (this.rejectQueue.length) &#123;</span><br><span class="line">// 弹出</span><br><span class="line"><span class="built_in">let</span> callback = this.rejectQueue.<span class="built_in">shift</span>()</span><br><span class="line">// 执行</span><br><span class="line">callback(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 调用</span><br><span class="line">setTimeout(run)</span><br><span class="line">&#125;</span><br><span class="line">// 执行</span><br><span class="line">executor(_resolve, _reject)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1、-then"><a href="#1、-then" class="headerlink" title="1、 then"></a>1、 then</h4><p>这个是<strong>promise</strong>的重要点，除了<strong>finally、reject</strong>不需要，其他的都需要用到他的原理内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">// resolve/then/成功</span><br><span class="line"><span class="keyword">then</span>(resolvedFn, rejectedFn) &#123;</span><br><span class="line">/*</span><br><span class="line">    根据Promise A+规范，如果 <span class="keyword">then</span>() 接收的参数不是<span class="keyword">function</span>，那么我们应该忽略它。</span><br><span class="line">    如果没有忽略，当<span class="keyword">then</span>()回调不为<span class="keyword">function</span>时将会抛出异常，导致链式调用中断</span><br><span class="line">*/</span><br><span class="line">// 判断resolvedFn是否是一个函数,不是函数则进行报错提醒</span><br><span class="line"><span class="keyword">if</span> (resolvedFn &amp;&amp; typeof resolvedFn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">throw new Error(<span class="string">&#x27;resolver is not a function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">// 判断rejectedFn是否是一个函数,不是函数则进行报错提醒</span><br><span class="line"><span class="keyword">if</span> (rejectedFn &amp;&amp; typeof rejectedFn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">throw new Error(<span class="string">&#x27;rejecter is not a function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">// 为了实现.<span class="keyword">then</span>的链式调用，此时需要返回一个promise</span><br><span class="line"><span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">/*</span><br><span class="line">    then</span><br><span class="line">*/</span><br><span class="line">//把resolvedFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论</span><br><span class="line">let fulfilledFn = value =&gt; &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//执行第一个(当前的)Promise的成功回调,并获取返回值</span><br><span class="line">let x = resolvedFn(value)</span><br><span class="line">//分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve</span><br><span class="line">//这里resolve之后，就能被下一个.then()的回调获取到返回值，从而实现链式调用</span><br><span class="line">x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">reject(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 设置对列</span><br><span class="line">this.resolveQueue.push(fulfilledFn)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">    reject</span><br><span class="line">    根据设置resolvedFn的原理，设置一下rejectFn</span><br><span class="line">*/</span><br><span class="line">//把resolvedFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论</span><br><span class="line">let rejectFn = value =&gt; &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//执行第一个(当前的)Promise的成功回调,并获取返回值</span><br><span class="line">let x = rejectedFn(value)</span><br><span class="line">//分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve</span><br><span class="line">//这里resolve之后，就能被下一个.then()的回调获取到返回值，从而实现链式调用</span><br><span class="line">x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">reject(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 设置对列</span><br><span class="line">this.rejectQueue.push(rejectFn)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">    处理状态为resolve/reject的情况：上边的写法是对应状态为padding的情况，</span><br><span class="line">    有些时候resolve/reject 在 then() 之前就被执行（比如Promise.resolve().then()），</span><br><span class="line">    如果这个时候还把then()回调push进resolve/reject的执行队列里，那么回调将不会被执行，</span><br><span class="line">    因此对于状态已经变为fulfilled或rejected的情况，我们直接执行then回调</span><br><span class="line">*/</span><br><span class="line">// 当前状态判断</span><br><span class="line">switch (this._status) &#123;</span><br><span class="line">// 当状态为pending时,把resolve和reject回调push进resolve/reject执行队列,等待执行</span><br><span class="line">case Padding:</span><br><span class="line">this.resolveQueue.push(fulfilledFn)</span><br><span class="line">this.rejectQueue.push(rejectFn)</span><br><span class="line">break;</span><br><span class="line">// 当状态已经变为resolve/reject时,直接执行then回调</span><br><span class="line">case Fulfilled:</span><br><span class="line">fulfilledFn(this.currentValue)</span><br><span class="line">break;</span><br><span class="line">case Rejected:</span><br><span class="line">rejectFn(this.currentValue)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-catch"><a href="#2、-catch" class="headerlink" title="2、 catch"></a>2、 catch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// reject/catch 失败</span><br><span class="line">catch (rejectedFn) &#123;</span><br><span class="line">// 判断是否是一个函数</span><br><span class="line"><span class="keyword">if</span> (typeof rejectedFn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> this.then(null, rejectedFn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、-resolve"><a href="#3、-resolve" class="headerlink" title="3、 resolve"></a>3、 resolve</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// resolve </span><br><span class="line">/*</span><br><span class="line">    resolve(resolver)方法返回一个以给定值解析后的Promise 对象。</span><br><span class="line">    如果该值为promise，返回这个promise；如果这个值是thenable（即带有<span class="string">&quot;then&quot;</span> 方法)），</span><br><span class="line">    返回的promise会“跟随”这个thenable的对象，采用它的最终状态；</span><br><span class="line">    否则返回的promise将以此值完成。此函数将类promise对象的多层嵌套展平。</span><br><span class="line">*/</span><br><span class="line">static resolve(resolver) &#123;</span><br><span class="line">// 根据规范, 如果参数是Promise实例, 直接<span class="built_in">return</span>这个实例</span><br><span class="line"><span class="keyword">if</span> (resolver instanceof MyPromise) <span class="built_in">return</span> resolver</span><br><span class="line"><span class="built_in">return</span> new MyPromise(resolve =&gt; resolve(resolver))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、-reject"><a href="#4、-reject" class="headerlink" title="4、 reject"></a>4、 reject</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// reject</span><br><span class="line">/* reject()方法返回一个带有拒绝原因的Promise对象。 */</span><br><span class="line">static reject(reason) &#123;</span><br><span class="line"><span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; reject(reason))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、-finally"><a href="#5、-finally" class="headerlink" title="5、 finally"></a>5、 finally</h4><p>finally 无论成功失败都会返回，该方法与状态无关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// finally 无论成功失败都会返回-该方法与状态无关</span><br><span class="line">finally(finallyFn) &#123;</span><br><span class="line"><span class="built_in">return</span> this.then(</span><br><span class="line">// resolve执行回调,并在<span class="keyword">then</span>中<span class="built_in">return</span>结果传递给后面的Promise</span><br><span class="line">value =&gt; MyPromise.resolve(callback()).<span class="keyword">then</span>(() =&gt; value),</span><br><span class="line">// resolve执行回调,并在then中return结果传递给后面的Promise</span><br><span class="line">reason =&gt; MyPromise.resolve(callback()).<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">throw reason</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、-all"><a href="#6、-all" class="headerlink" title="6、 all"></a>6、 all</h4><p><strong>Promise.all</strong>方法返回一个 <strong>Promise</strong> 实例，此实例在 <strong>iterable</strong> 参数内所有的 <strong>promise</strong> 都“完成<strong>（resolved）</strong><br>        或参数中不包含 <strong>promise</strong> 时回调完成（resolve）；如果参数中  <strong>promise</strong> 有一个失败（rejected），<br>        此实例回调失败（reject），失败原因的是第一个失败 <strong>promise</strong> 的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">       Promise.all(iterable)方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”</span><br><span class="line">或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），</span><br><span class="line">       此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。</span><br><span class="line">   */</span><br><span class="line">static all(promiseArr) &#123;</span><br><span class="line"><span class="built_in">let</span> index = 0</span><br><span class="line"><span class="built_in">let</span> result = []</span><br><span class="line"><span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">promiseArr.forEach((item, itemIndex) =&gt; &#123;</span><br><span class="line">//resolve(item)用于处理传入的值不为Promise的情况</span><br><span class="line">MyPromise.resolve(item).then(</span><br><span class="line">val =&gt; &#123;</span><br><span class="line">index++</span><br><span class="line">result[itemIndex] = value</span><br><span class="line">//所有then执行后, resolve结果</span><br><span class="line">if (index === promiseArr.length) &#123;</span><br><span class="line">resolve(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">//有一个Promise被reject时，MyPromise的状态变为reject</span><br><span class="line">err =&gt; reject(err)</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、-race"><a href="#7、-race" class="headerlink" title="7、 race"></a>7、 race</h4><p><strong>race</strong>方法返回一个 <strong>promise</strong>，<br>        一旦迭代器中的某个<strong>promise</strong>解决或拒绝，返回的 promise 状态为解决或拒绝。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    race(iterable)方法返回一个 promise，</span><br><span class="line">    一旦迭代器中的某个promise解决或拒绝，返回的 promise 状态为解决或拒绝。</span><br><span class="line">*/</span><br><span class="line">static race(promiseArr) &#123;</span><br><span class="line"><span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">//同时执行Promise,如果有一个Promise的状态发生改变,就变更新MyPromise的状态</span><br><span class="line">for (let item of promiseArr) &#123;</span><br><span class="line">MyPromise.resolve(item).then( //resolve(item)用于处理传入值不为Promise的情况</span><br><span class="line">value =&gt; resolve(value),</span><br><span class="line">err =&gt; reject(err)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、-关于修改状态"><a href="#二、-关于修改状态" class="headerlink" title="二、 关于修改状态"></a>二、 关于修改状态</h4><p>我这里是把修改状态单独拿出来的，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 修改状态</span><br><span class="line">modifyStatus(status) &#123;</span><br><span class="line">/* </span><br><span class="line">因为状态修改过后不可重新修改,所以我们要对当前状态进行判断,不是padding状态直接<span class="built_in">return</span>出去</span><br><span class="line">这里<span class="built_in">return</span> 为<span class="literal">true</span>是因为上面通过这个做过状态校验判断</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">if</span> (this.status !== Padding) <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">// 修改状态</span><br><span class="line">this.status = status</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、-完整代码"><a href="#三、-完整代码" class="headerlink" title="三、 完整代码"></a>三、 完整代码</h4><p>不想复制阅读的同学可以点击 -&gt; <a href="https://download.csdn.net/download/qq_44500360/85383149">Promise 原理/实现自己的Promise</a><br>进行下载。使用的时候就像我们日常使用<strong>Promise</strong>那样使用就OK了，只是我们需要导入这个js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line">//Promise/A+规定的三种状态</span><br><span class="line">const Padding = <span class="string">&#x27;Padding&#x27;</span> //等待</span><br><span class="line">const Fulfilled = <span class="string">&#x27;Fulfilled&#x27;</span> //成功</span><br><span class="line">const Rejected = <span class="string">&#x27;Rejected&#x27;</span> //拒绝</span><br><span class="line"></span><br><span class="line">// 声明类</span><br><span class="line">class MyPromise &#123;</span><br><span class="line">// 构造器</span><br><span class="line">constructor(executor) &#123;</span><br><span class="line">// 成功回调的队列</span><br><span class="line">this.resolveQueue = []</span><br><span class="line">// 拒绝/失败的回调队列</span><br><span class="line">this.rejectQueue = []</span><br><span class="line">// 储存当前队列的value</span><br><span class="line">this.currentValue = null</span><br><span class="line">// 判断executor是否是一个函数</span><br><span class="line"><span class="keyword">if</span> (typeof executor !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">throw new Error(<span class="string">&#x27;MyPromise is not a function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">// 修改状态为Padding</span><br><span class="line">this.status = Padding</span><br><span class="line">// 声明reslove 因为箭头函数没有自己的this, 所以这里我们需要使用箭头函数</span><br><span class="line"><span class="built_in">let</span> _resolve = value =&gt; &#123;</span><br><span class="line">/*</span><br><span class="line">    把resolve执行回调的操作封装成一个函数,</span><br><span class="line">    放进setTimeout里,以兼容executor是同步代码的情况,除了可以使用setTimeout,</span><br><span class="line">    我们还可以使用MutationObserver</span><br><span class="line">*/</span><br><span class="line"><span class="built_in">let</span> run = () =&gt; &#123;</span><br><span class="line">// 判断并修改状态</span><br><span class="line"><span class="keyword">if</span> (this.modifyStatus(Fulfilled)) <span class="built_in">return</span></span><br><span class="line">// 储存当前的value</span><br><span class="line">this.currentValue = value</span><br><span class="line">// 判断成功队列是否存在值,存在则进行循环弹出，直到this.resolveQueue为空</span><br><span class="line">/*</span><br><span class="line">    这里之所以使用一个队列来储存回调,是为了实现规范要求的&lt; <span class="keyword">then</span> 方法可以被同一个 promise 调用多次&gt;</span><br><span class="line">    如果使用一个变量而非队列来储存回调,那么即使多次 <span class="keyword">then</span>()也只会执行一次回调</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">while</span> (this.resolveQueue.length) &#123;</span><br><span class="line">// 弹出</span><br><span class="line"><span class="built_in">let</span> callback = this.resolveQueue.<span class="built_in">shift</span>()</span><br><span class="line">// 执行</span><br><span class="line">callback(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 调用</span><br><span class="line">setTimeout(run);</span><br><span class="line">&#125;</span><br><span class="line">// 声明reject 因为箭头函数没有自己的this, 所以这里我们需要使用箭头函数</span><br><span class="line"><span class="built_in">let</span> _reject = value =&gt; &#123;</span><br><span class="line">/*</span><br><span class="line">    把reject执行回调的操作封装成一个函数,</span><br><span class="line">    放进setTimeout里,以兼容executor是同步代码的情况,除了可以使用setTimeout,</span><br><span class="line">    我们还可以使用MutationObserver</span><br><span class="line">*/</span><br><span class="line"><span class="built_in">let</span> run = () =&gt; &#123;</span><br><span class="line">// 判断并修改状态</span><br><span class="line"><span class="keyword">if</span> (this.modifyStatus(Rejected)) <span class="built_in">return</span></span><br><span class="line">// 储存当前的value</span><br><span class="line">this.currentValue = value</span><br><span class="line">// 判断成功队列是否存在值,存在则进行循环弹出，直到this.rejectQueue为空</span><br><span class="line">/*</span><br><span class="line">    这里之所以使用一个队列来储存回调,是为了实现规范要求的&lt; catch 方法可以被同一个 promise 调用多次&gt;</span><br><span class="line">    如果使用一个变量而非队列来储存回调,那么即使多次 catch()也只会执行一次回调</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">while</span> (this.rejectQueue.length) &#123;</span><br><span class="line">// 弹出</span><br><span class="line"><span class="built_in">let</span> callback = this.rejectQueue.<span class="built_in">shift</span>()</span><br><span class="line">// 执行</span><br><span class="line">callback(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 调用</span><br><span class="line">setTimeout(run)</span><br><span class="line">&#125;</span><br><span class="line">// 执行</span><br><span class="line">executor(_resolve, _reject)</span><br><span class="line">&#125;</span><br><span class="line">// resolve/then/成功</span><br><span class="line"><span class="keyword">then</span>(resolvedFn, rejectedFn) &#123;</span><br><span class="line">/*</span><br><span class="line">    根据规范，如果 <span class="keyword">then</span>() 接收的参数不是<span class="keyword">function</span>，那么我们应该忽略它。</span><br><span class="line">    如果没有忽略，当<span class="keyword">then</span>()回调不为<span class="keyword">function</span>时将会抛出异常，导致链式调用中断</span><br><span class="line">*/</span><br><span class="line">// 判断resolvedFn是否是一个函数,不是函数则进行报错提醒</span><br><span class="line"><span class="keyword">if</span> (resolvedFn &amp;&amp; typeof resolvedFn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">throw new Error(<span class="string">&#x27;resolver is not a function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">// 判断rejectedFn是否是一个函数,不是函数则进行报错提醒</span><br><span class="line"><span class="keyword">if</span> (rejectedFn &amp;&amp; typeof rejectedFn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">throw new Error(<span class="string">&#x27;rejecter is not a function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">// 为了实现.<span class="keyword">then</span>的链式调用，此时需要返回一个promise</span><br><span class="line"><span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">/*</span><br><span class="line">    then</span><br><span class="line">*/</span><br><span class="line">//把resolvedFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论</span><br><span class="line">let fulfilledFn = value =&gt; &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//执行第一个(当前的)Promise的成功回调,并获取返回值</span><br><span class="line">let x = resolvedFn(value)</span><br><span class="line">//分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve</span><br><span class="line">//这里resolve之后，就能被下一个.then()的回调获取到返回值，从而实现链式调用</span><br><span class="line">x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">reject(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 设置对列</span><br><span class="line">this.resolveQueue.push(fulfilledFn)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">    reject</span><br><span class="line">    根据设置resolvedFn的原理，设置一下rejectFn</span><br><span class="line">*/</span><br><span class="line">//把resolvedFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论</span><br><span class="line">let rejectFn = value =&gt; &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//执行第一个(当前的)Promise的成功回调,并获取返回值</span><br><span class="line">let x = rejectedFn(value)</span><br><span class="line">//分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve</span><br><span class="line">//这里resolve之后，就能被下一个.then()的回调获取到返回值，从而实现链式调用</span><br><span class="line">x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">reject(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 设置对列</span><br><span class="line">this.rejectQueue.push(rejectFn)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">    处理状态为resolve/reject的情况：上边的写法是对应状态为padding的情况，</span><br><span class="line">    有些时候resolve/reject 在 then() 之前就被执行（比如Promise.resolve().then()），</span><br><span class="line">    如果这个时候还把then()回调push进resolve/reject的执行队列里，那么回调将不会被执行，</span><br><span class="line">    因此对于状态已经变为fulfilled或rejected的情况，我们直接执行then回调</span><br><span class="line">*/</span><br><span class="line">// 当前状态判断</span><br><span class="line">switch (this._status) &#123;</span><br><span class="line">// 当状态为pending时,把resolve和reject回调push进resolve/reject执行队列,等待执行</span><br><span class="line">case Padding:</span><br><span class="line">this.resolveQueue.push(fulfilledFn)</span><br><span class="line">this.rejectQueue.push(rejectFn)</span><br><span class="line">break;</span><br><span class="line">// 当状态已经变为resolve/reject时,直接执行then回调</span><br><span class="line">case Fulfilled:</span><br><span class="line">fulfilledFn(this.currentValue)</span><br><span class="line">break;</span><br><span class="line">case Rejected:</span><br><span class="line">rejectFn(this.currentValue)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// reject/catch 失败</span><br><span class="line">catch (rejectedFn) &#123;</span><br><span class="line">// 判断是否是一个函数</span><br><span class="line">if (typeof rejectedFn === &#x27;function&#x27;) &#123;</span><br><span class="line">return this.then(null, rejectedFn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// finally 无论成功失败都会返回-该方法与状态无关</span><br><span class="line">finally(finallyFn) &#123;</span><br><span class="line">return this.then(</span><br><span class="line">// resolve执行回调,并在then中return结果传递给后面的Promise</span><br><span class="line">value =&gt; MyPromise.resolve(callback()).<span class="keyword">then</span>(() =&gt; value),</span><br><span class="line">// resolve执行回调,并在then中return结果传递给后面的Promise</span><br><span class="line">reason =&gt; MyPromise.resolve(callback()).<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">throw reason</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">// resolve </span><br><span class="line">/*</span><br><span class="line">    resolve(resolver)方法返回一个以给定值解析后的Promise 对象。</span><br><span class="line">    如果该值为promise，返回这个promise；如果这个值是thenable（即带有&quot;then&quot; 方法)），</span><br><span class="line">    返回的promise会“跟随”这个thenable的对象，采用它的最终状态；</span><br><span class="line">    否则返回的promise将以此值完成。此函数将类promise对象的多层嵌套展平。</span><br><span class="line">*/</span><br><span class="line">static resolve(resolver) &#123;</span><br><span class="line">// 根据规范, 如果参数是Promise实例, 直接return这个实例</span><br><span class="line">if (resolver instanceof MyPromise) return resolver</span><br><span class="line">return new MyPromise(resolve =&gt; resolve(resolver))</span><br><span class="line">&#125;</span><br><span class="line">// reject</span><br><span class="line">/* reject()方法返回一个带有拒绝原因的Promise对象。 */</span><br><span class="line">static reject(reason) &#123;</span><br><span class="line"><span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; reject(reason))</span><br><span class="line">&#125;</span><br><span class="line">// all</span><br><span class="line">/*</span><br><span class="line">        Promise.all(iterable)方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”</span><br><span class="line">或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），</span><br><span class="line">        此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。</span><br><span class="line">    */</span><br><span class="line">static all(promiseArr) &#123;</span><br><span class="line"><span class="built_in">let</span> index = 0</span><br><span class="line"><span class="built_in">let</span> result = []</span><br><span class="line"><span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">promiseArr.forEach((item, itemIndex) =&gt; &#123;</span><br><span class="line">//resolve(item)用于处理传入的值不为Promise的情况</span><br><span class="line">MyPromise.resolve(item).then(</span><br><span class="line">val =&gt; &#123;</span><br><span class="line">index++</span><br><span class="line">result[itemIndex] = value</span><br><span class="line">//所有then执行后, resolve结果</span><br><span class="line">if (index === promiseArr.length) &#123;</span><br><span class="line">resolve(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">//有一个Promise被reject时，MyPromise的状态变为reject</span><br><span class="line">err =&gt; reject(err)</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">// race</span><br><span class="line">/*</span><br><span class="line">    race(iterable)方法返回一个 promise，</span><br><span class="line">    一旦迭代器中的某个promise解决或拒绝，返回的 promise 状态为解决或拒绝。</span><br><span class="line">*/</span><br><span class="line">static race(promiseArr) &#123;</span><br><span class="line">return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">//同时执行Promise,如果有一个Promise的状态发生改变,就变更新MyPromise的状态</span><br><span class="line">for (let item of promiseArr) &#123;</span><br><span class="line">MyPromise.resolve(item).then( //resolve(item)用于处理传入值不为Promise的情况</span><br><span class="line">value =&gt; resolve(value),</span><br><span class="line">err =&gt; reject(err)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 修改状态</span><br><span class="line">modifyStatus(status) &#123;</span><br><span class="line">/* </span><br><span class="line">因为状态修改过后不可重新修改,所以我们要对当前状态进行判断,不是padding状态直接return出去</span><br><span class="line">这里return 为true是因为上面通过这个做过状态校验判断</span><br><span class="line">*/</span><br><span class="line">if (this.status !== Padding) return true</span><br><span class="line">// 修改状态</span><br><span class="line">this.status = status</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你看到这里的时候，相信你已经对<code>promise</code>的原理有了一个浅影响的了解。好了，该进行总结了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇文章记录的内容只记录了手写一个简易的<code>promise</code>过程，真正的<code>promise</code>并不像本篇文章记录的这么简单。但相信爱学习的你，一定能通过本篇手写<code>promise</code>文章进行进一步的了解原生<code>promise</code>，熟练的掌握原生<code>promise</code>的相关技术。</p><p>最后，希望本篇文章对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise 链式调用原理-精简20行代码</title>
      <link href="/2022/11/23/202211231718/"/>
      <url>/2022/11/23/202211231718/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在面试的过程中，总有一些面试官会问你，手写一个简易版的<code>Promise</code>得行不，得行的话就写一个出来看看，啪一哈，就把纸和笔给了你。<br>我们思索半天就写出来了个下面这个。<br>哦豁，高薪张开了它的翅膀，远离了我们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (resolve, reject) &#123;&#125;</span><br><span class="line">    resolve () &#123;&#125;</span><br><span class="line">    reject ()&#123;&#125;</span><br><span class="line">    then () &#123;&#125;</span><br><span class="line">    <span class="keyword">catch</span> () &#123;&#125;</span><br><span class="line">    once () &#123;&#125;</span><br><span class="line">    all () &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本篇文章将不讲述手写出来一个简易的<code>Promise</code>，感兴趣的朋友可以去看我这篇文章 -&gt; <a href="https://blog.csdn.net/qq_44500360/article/details/124786256">Promise详解-手写Promise,实现一款自己的简易Promise</a></p><p>本篇文章记录的是如何实现<code>Promise</code>的核心功能之一的<code>.then 链式调用</code>，采用<code>构造函数</code>的写法，本篇文章的代码不考虑任何容错和异常处理，只单独说明其<code>链式调用</code>原理，方便理解。</p><p>先摆上完整代码，去掉注释和一些换行共20行有余。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CustomPromise</span> (fn) &#123;</span><br><span class="line">    <span class="comment">// 回调收集</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbackList</span> = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传递给Promise处理函数的resolve</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 注意promise的then函数需要异步执行</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 这里直接往实例上挂个data</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">data</span> = value;</span><br><span class="line">            <span class="comment">// 把callbackList数组里的函数依次执行一遍</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbackList</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">cb</span> =&gt;</span> <span class="title function_">cb</span>(value))</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        执行用户传入的函数 </span></span><br><span class="line"><span class="comment">        并且把resolve方法交给用户执行</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="title function_">fn</span>(resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    重点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 往构造函数的原型上挂载.then方法</span></span><br><span class="line"><span class="title class_">CustomPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onReaolved</span>) &#123;</span><br><span class="line">    <span class="comment">// return 一个promise 实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 往回调数组中插入回调</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbackList</span>.<span class="title function_">push</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> response = <span class="title function_">onReaolved</span>(<span class="variable language_">this</span>.<span class="property">data</span>)</span><br><span class="line">            <span class="comment">// 判断是否是一个 CustomPromise</span></span><br><span class="line">            <span class="keyword">if</span>(response <span class="keyword">instanceof</span> <span class="title class_">CustomPromise</span>)&#123;</span><br><span class="line">                <span class="comment">// resolve 的权力被交给了user promise</span></span><br><span class="line">                response.<span class="title function_">then</span>(resolve)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果是普通值,直接resolve</span></span><br><span class="line">                <span class="comment">// 依次执行callbackList里的函数 并且把值传递给callbackList</span></span><br><span class="line">                <span class="title function_">resolve</span>(response)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve1</span></span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="comment">// then1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="comment">// 返回一个 CustomPromise </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// resolve2</span></span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;<span class="comment">// then2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整的代码和例子已奉上，现在来进行解释。<br>固然结果很重要，但过程也很重要。我们要做到 知其然知其所以然。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先，我们我们先创建这样一个<code>Promise</code>, 这里需要使用<code>匿名函数</code>，不能使用<code>箭头函数</code>，或者你可以根据这个方法已<code>class</code> 类的方法进行实现。</p><p>大概步骤如下：</p><ul><li>声明构造函数/类</li><li>在内部声明一个数组名为<code>callbackList</code>用来装回调，并放到<code>this</code>里面</li><li>声明一个名<code>resolve</code>的方法，用来传递给<code>Promise</code>进行处理，<code>注意：resolve 内部需要为异步，这里可以采用 setTimeout 实现</code></li><li>循环<code>callbackList</code>并执行里面的方法</li></ul><p>写出来后的样子长这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CustomPromise</span> (fn) &#123;</span><br><span class="line">    <span class="comment">// 回调收集</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbackList</span> = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传递给Promise处理函数的resolve</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 注意promise的then函数需要异步执行</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 这里直接往实例上挂个data</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">data</span> = value;</span><br><span class="line">            <span class="comment">// 把callbackList数组里的函数依次执行一遍</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbackList</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">cb</span> =&gt;</span> <span class="title function_">cb</span>(value))</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - fn 为用户传进来的函数</span></span><br><span class="line"><span class="comment">        - 执行用户传入的函数 </span></span><br><span class="line"><span class="comment">        - 并且把resolve方法交给用户执行</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="title function_">fn</span>(resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><blockquote><p><code>注意：第二步是本篇文章的重点，也是这个核心功能的一个重点。</code></p></blockquote><p>我们需要往<code>CustomPromise</code>的原型上挂载一个<code>.then</code>的方法。并返回的是一个<code>Promise</code>实例，这里依旧使用的是<code>匿名函数</code>。</p><p>完整代码长这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 往构造函数的原型上挂载.then方法</span></span><br><span class="line"><span class="title class_">CustomPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onReaolved</span>) &#123;</span><br><span class="line">    <span class="comment">// return 一个promise 实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 往回调数组中插入回调</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbackList</span>.<span class="title function_">push</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> response = <span class="title function_">onReaolved</span>(<span class="variable language_">this</span>.<span class="property">data</span>)</span><br><span class="line">            <span class="comment">// 判断是否是一个 CustomPromise</span></span><br><span class="line">            <span class="keyword">if</span>(response <span class="keyword">instanceof</span> <span class="title class_">CustomPromise</span>)&#123;</span><br><span class="line">                <span class="comment">// resolve 的权力被交给了user promise</span></span><br><span class="line">                response.<span class="title function_">then</span>(resolve)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果是普通值,直接resolve</span></span><br><span class="line">                <span class="comment">// 依次执行callbackList里的函数 并且把值传递给callbackList</span></span><br><span class="line">                <span class="title function_">resolve</span>(response)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写出来过后，在结合上面的那个例子使用，不能说和原生<code>Promise</code>一模一样，但使用起来的<code>链式</code>效果却是一毛一样。</p><h3 id="分析说明，此过程需结合上文中的案例一起阅读"><a href="#分析说明，此过程需结合上文中的案例一起阅读" class="headerlink" title="分析说明，此过程需结合上文中的案例一起阅读"></a>分析说明，此过程需结合上文中的案例一起阅读</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> userPromise = <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>), <span class="number">300</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userPromise</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>我们把<code>new Promise</code>返回的实例叫做<code>promise1</code></li><li>在<code>Promise.prototype.then</code>的实现中，我们构造了一个新的<code>promise</code> 返回，叫它<code>promise2</code><br>在调用<code>then</code>方法的时候，用户手动构造了一个<code>promise</code>并且返回，用来做异步的操作，叫它<code>userPromise</code>，那么在<code>then</code>的实现中，内部的<code>this</code>其实就指向<code>promise1</code><br>而<code>promise2</code>的传入的<code>fn</code>函数执行了一个<code>this.cbs.push()</code>的操作，其实是往<code>promise1</code>的<code>callbackList</code>数组中<code>push</code>了一个函数，等待后续执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">CustomPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onReaolved</span>) &#123;</span><br><span class="line">    <span class="comment">// promise 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 往回调数组中插入回调</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbackList</span>.<span class="title function_">push</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用户传入给<code>then</code>的<code>onResolved</code>方法返回的是个<code>userPromise</code>，那么这个<code>userPromise</code>里用户会自己去在合适的时机 <code>resolvePromise2</code>，那么进而这里的<code>response.then(resolve)</code> 中的<code>resolve</code>就会被执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(response <span class="keyword">instanceof</span> <span class="title class_">CustomPromise</span>)&#123;</span><br><span class="line">    response.<span class="title function_">then</span>(resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再结合上面的经典案例看，我这里再放一遍</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve1</span></span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="comment">// then1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="comment">// userPromise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// resolve2</span></span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;<span class="comment">// then2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>then1</code>这一整块其实返回的是<code>promise2</code>，那么<code>then2</code> 其实本质上是<code>promise2.then(()=&gt;&#123;&#125;)</code>，<br>也就是说<code>then2</code>注册的回调函数，其实进入了<code>promise2</code>的<code>callbackList</code>回调数组里。<br>又因为我们刚刚知道，<code>resolve2</code>调用了之后，<code>userPromise </code>会被<code>resolve</code>，进而触发<code>promise2</code>被<code>resolve</code>，进而 <code>promise2</code>里的<code>callbackList</code>数组被依次触发。<br>这样就实现了用户自己写的<code>resolve2</code>执行完毕后，<code>then2</code>里的逻辑才会继续执行，也就是<code>异步链式调用</code>。</p><p>说句题外话，这个有点绕，当时还是看了好一会才看懂。</p><p>好了，当你看到这里的时候，这篇文章已经接近尾声了，是时候进行总结了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章只是根据其原理实现的一个简易链式调用的过程，真正的<code>Promise</code>并没有这么简单，和上文中的比起来复杂很多，而且涉及到很多的异常、容错、边界等情况的处理。</p><p>最后推荐一下<code>Promise A+规范</code> -&gt; <a href="https://promisesaplus.com/">点我查看规范</a>，很值得去看，相信看完后会对<code>Promise</code>有一个更深的了解。</p><p>希望本文对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Showing All Messages Command CompileSwiftSources failed with a nonzero exit code</title>
      <link href="/2022/11/21/202211211439/"/>
      <url>/2022/11/21/202211211439/</url>
      
        <content type="html"><![CDATA[<p><code>xCode</code> 错误运行提示： <code>Showing All Messages Command CompileSwiftSources failed with a nonzero exit code.</code></p><p>解决方法：</p><p>打开<code>xCode</code>在<code>Runner</code>中选择<code>PROJECT</code>中的<code>Runner</code>。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e088ea200c34a3398abedc23399b22d~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>在<code>Build Setting</code>里找到<code>user-defined</code>。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18c234b3dffa458cb313a230c1436b76~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>点击 + 号。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39f22126eed24d0d97aa332f6c50b421~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>添加一条属性为<code>SWIFT_ENABLE_BATCH_MODE</code>,值为<code>NO</code>的记录。就可以了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b08a994eb1244cd995a083615b0ef430~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>添加后的内容如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5f664b823f4483a8a1835c0653a0d39~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p>添加完后，重新运行项目。</p>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xcode提示debugserver is x86_64 binary running in translation, attached failed.</title>
      <link href="/2022/11/21/202211211440/"/>
      <url>/2022/11/21/202211211440/</url>
      
        <content type="html"><![CDATA[<p><code>Flutter</code> 项目运行 <code>xCode</code> 以下错误的解决方法。该方法适用于任何<code>xCode</code>项目。</p><blockquote><p>debugserver is x86_64 binary running in translation, attached failed.</p></blockquote><p>如图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f19d01a9be24530a9db76a2fe91e43d~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>解决办法：</p><p>找到 <code>Edit Scheme </code>-&gt; <code>Run</code> -&gt; <code>Debug excitable</code>，取消该选项即可运行成功。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8384c39098ab475a9b6198252e2641af~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端优化篇</title>
      <link href="/2022/11/21/202211211629/"/>
      <url>/2022/11/21/202211211629/</url>
      
        <content type="html"><![CDATA[<p>在开发的过程中，多多少少的都会有着优化的工作内容。可能在前期堆码过程中不会在意，但堆码结束后必干的事情就是优化。</p><p>优化千千万，要干就干正优化。不管是堆码优化还是性能、页面等优化。都是一个重要的事。<br>列举些常见的优化手段，不足之处或者您有其他的建议可评论在下方。</p><p>本篇文章不做过多的原理说明，只述优化方式。</p><h1 id="一、-图片优化"><a href="#一、-图片优化" class="headerlink" title="一、 图片优化"></a>一、 图片优化</h1><p>图片在前端是一个有点吃时间的东西，图片比较大的动不动就是1s起步，小的还好。</p><h3 id="1、-精灵图-雪碧图"><a href="#1、-精灵图-雪碧图" class="headerlink" title="1、 精灵图/雪碧图"></a>1、 精灵图/雪碧图</h3><p>我们可以使用精灵图来减少浏览器等对图片的加载，让其只请求加载一次。</p><ul><li>把所有需要的图片全部放在一张图上，根据<code>css</code>的背景图属性进行裁切渲染。<h3 id="2、转iconfont-推荐"><a href="#2、转iconfont-推荐" class="headerlink" title="2、转iconfont(推荐)"></a>2、转iconfont(推荐)</h3>可以将使用到的图标这些利用第三方工具或者使用<code>iconfont</code>官网将其转换成字体图标。<h3 id="3、图片预加载"><a href="#3、图片预加载" class="headerlink" title="3、图片预加载"></a>3、图片预加载</h3>在进入页面前，将下一页面所需的图片进行提前加载<h3 id="4、图片懒加载-推荐"><a href="#4、图片懒加载-推荐" class="headerlink" title="4、图片懒加载(推荐)"></a>4、图片懒加载(推荐)</h3>对图片资源较大的进行懒加载处理。</li></ul><p>原理：</p><ul><li>根据图片位置和屏幕可视化高度/宽度进行计算</li><li>将处于可视化屏幕内的图片进行请求加载</li><li>仅对未加载过的图片做处理，减少页面渲染时间</li></ul><h1 id="二、页面白屏-首页白屏优化"><a href="#二、页面白屏-首页白屏优化" class="headerlink" title="二、页面白屏/首页白屏优化"></a>二、页面白屏/首页白屏优化</h1><p>这个是项目中最常见的需要优化的场景。</p><ul><li>使用<code>loading</code>加载进行占位处理，当页面渲染完成关闭<code>loading</code>。这是项目中比较常见的一种优化方式。</li><li>减少页面请求和项目配置处理，分段请求、分段进行项目配置。减少首页渲染的内容。避免复杂的项目逻辑和资源较大的内容。(首页白屏优化)</li><li>缓存页面，对加载过的页面进行一段时间/一定数量的缓存，可减少二次进入相同页面的渲染时间</li><li>骨架图，这个和<code>loading</code>类似，也是一种常见的优化方式。对当前内容进行一个骨架屏渲染，待页面内容渲染完成后移出骨架屏。</li><li>页面进行预加载处理</li><li><code>ssr</code>服务端渲染</li></ul><h1 id="三、请求优化"><a href="#三、请求优化" class="headerlink" title="三、请求优化"></a>三、请求优化</h1><ul><li>对静态资源文件(图片、字体文件、css、js等)进行<code>CDN</code>加速处理</li><li>对请求进行防抖/节流处理</li><li>对一定时间内的请求结果进行缓存处理，可节省二次同一请求的资源</li><li>避免请求体过大的情况，对请求体进行一定的压缩，减少传输时间。通常采用<code>gzip</code>算法对请求进行压缩(感兴趣的朋友可以百度看看)。</li><li>使用<code>Http 2.0</code>代替<code>Http 1.0</code></li><li>减少不必要的<code>http</code>请求</li><li>合并请求</li><li>使用请求中间件，如：全局统一设置<code>cooke</code>、<code>token</code>等</li><li>多使用<code>get</code>请求方式，因为<code>浏览器</code>是可以缓存<code>get</code>请求的</li></ul><h1 id="四、代码优化"><a href="#四、代码优化" class="headerlink" title="四、代码优化"></a>四、代码优化</h1><ul><li>使用<code>webpack</code>、<code>vite</code>、<code>rollup</code>等打包工具对代码进行压缩</li><li>减少使用性能开支较大的<code>api</code></li><li>代码编写尽量精简，使用<code>api</code>替代复杂的逻辑，如果有原生<code>api</code>可实现需求，尽使用原生<code>api</code></li><li>开发使用可复用<code>组件</code>，<code>按需加载</code>，代码分割</li><li>减少<code>dom</code>操作</li><li>动画相关采用<code>css</code>实现</li><li>路由懒加载/预加载</li><li>逻辑后移，分段、分时处理逻辑</li><li>优化算法复杂度</li><li>减少 <code>if...else</code>的使用，不要靠它来处理复杂的逻辑</li><li>尽量减少iframe的使用</li></ul><h1 id="五、动画"><a href="#五、动画" class="headerlink" title="五、动画"></a>五、动画</h1><ul><li>动画尽量采用<code>css</code>方案进行替代<code>js</code>实现方式</li><li><code>css</code>动画开启<code>GPU</code>渲染，可以通过<code>transform: translateZ(0)</code>开启。如果仅为了开启硬件加速而随便乱用，是不合理的</li></ul><h1 id="六、-web-worker多线程任务"><a href="#六、-web-worker多线程任务" class="headerlink" title="六、 web worker多线程任务"></a>六、 web worker多线程任务</h1><p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><p>合理使用<code>web worker</code>可以优化复杂计算任务。这里直接抛阮一峰的入门文章：<a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">传送门</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在项目的开发过程中，优化的方式有很多，需根据项目实际情况进行一定的优化。负优化不如不优化。<br>尽量写高质量的代码，减少一些冗余且不必要的代码，提高复用率。</p><p>之所以写博客记录是因为：亦是记录也是学习。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 前端优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>var、let、const的区别</title>
      <link href="/2022/11/21/202211211441/"/>
      <url>/2022/11/21/202211211441/</url>
      
        <content type="html"><![CDATA[<p>话不多说，直接上干活，我们先来说说一直存在并使用的 <strong>var</strong>，虽然现在有let和const了，但还是有很多人在使用它</p><h2 id="一、-var"><a href="#一、-var" class="headerlink" title="一、 var"></a>一、 var</h2><h6 id="1-使用var声明的变量它并不属于一个块作用域的变量-它属于函数域变量"><a href="#1-使用var声明的变量它并不属于一个块作用域的变量-它属于函数域变量" class="headerlink" title="1. 使用var声明的变量它并不属于一个块作用域的变量,它属于函数域变量"></a>1. 使用<strong>var</strong>声明的变量它并不属于一个块作用域的变量,它属于函数域变量</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> //代码一</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">  console.log(age);</span><br><span class="line">  var age = 26;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test</span>();// undefined</span><br><span class="line">//没报错是因为上面的被浏览器运行时看做等价于下面的代码</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">  var age;</span><br><span class="line">  console.log(age);</span><br><span class="line">  age = 26;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test</span>()  //undefined</span><br></pre></td></tr></table></figure><h6 id="2-变量可重复声明"><a href="#2-变量可重复声明" class="headerlink" title="2. 变量可重复声明"></a>2. 变量可重复声明</h6><p>多次声明只算最后一次有效，因为<strong>var</strong>声明后的变量会提升，所以重复声明一个变量会合并成一个声明的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">     var age = 10;</span><br><span class="line">    age = 20,</span><br><span class="line">     age = 30,</span><br><span class="line">    age = 40,</span><br><span class="line">     console.log(age);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">test</span>()//40</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-全局声明挂载window"><a href="#3-全局声明挂载window" class="headerlink" title="3. 全局声明挂载window"></a>3. 全局声明挂载<strong>window</strong></h6><p>全局声明会挂载到<strong>window</strong>上面，成为<strong>window</strong>的一个属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">test</span> = 10</span><br><span class="line">console.log(window.test); //10</span><br></pre></td></tr></table></figure><h6 id="4-循环声明"><a href="#4-循环声明" class="headerlink" title="4. 循环声明"></a>4. 循环声明</h6><p>循环迭代定义的变量会在循环结束时，渗透到循环的外部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i = 0;i &lt; =5;i++)&#123;</span><br><span class="line">//循环逻辑</span><br><span class="line">&#125;</span><br><span class="line">console.log(i); //5</span><br></pre></td></tr></table></figure><h2 id="二、-let"><a href="#二、-let" class="headerlink" title="二、 let"></a>二、 let</h2><h6 id="1-使用let声明的变量它属于一个块作用域的变量"><a href="#1-使用let声明的变量它属于一个块作用域的变量" class="headerlink" title="1. 使用let声明的变量它属于一个块作用域的变量"></a>1. 使用<strong>let</strong>声明的变量它属于一个块作用域的变量</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> //代码一</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">  console.log(age);</span><br><span class="line">  <span class="built_in">let</span> age = 26;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test</span>();// 报错，age 未定义</span><br></pre></td></tr></table></figure><h6 id="2-变量不可重复声明"><a href="#2-变量不可重复声明" class="headerlink" title="2. 变量不可重复声明"></a>2. 变量不可重复声明</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">     <span class="built_in">let</span> age = 10;</span><br><span class="line">    age = 20,</span><br><span class="line">     age = 30,</span><br><span class="line">     console.log(age);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">test</span>()//报错，age 已声明过，不可重复声明</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-全局声明不挂载window"><a href="#3-全局声明不挂载window" class="headerlink" title="3. 全局声明不挂载window"></a>3. 全局声明不挂载<strong>window</strong></h6><p>全局声明不挂载<strong>window</strong>上面，也不会成为<strong>window</strong>的一个属性，不过<strong>let</strong>声明的变量仍然是存在于全局作用域中，声明的相应变量会保存在页面的声明周期内存中。因此，为了避免 SyntaxError，必须确保页面中不会重复声明同一个变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">test</span> = 10</span><br><span class="line">console.log(window.test); //undefined</span><br></pre></td></tr></table></figure><h6 id="4-循环声明-1"><a href="#4-循环声明-1" class="headerlink" title="4. 循环声明"></a>4. 循环声明</h6><p>循环迭代定义的变量不会在循环结束时，渗透到循环的外部，仅限在<strong>for</strong>循环中使用，因为<strong>let</strong>声明的变量属于 块级作用域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i = 0;i &lt; =5;i++)&#123;</span><br><span class="line">//循环逻辑</span><br><span class="line">&#125;</span><br><span class="line">console.log(i); // i 未定义</span><br></pre></td></tr></table></figure><h2 id="三、const"><a href="#三、const" class="headerlink" title="三、const"></a>三、const</h2><h6 id="1-声明行为"><a href="#1-声明行为" class="headerlink" title="1. 声明行为"></a>1. 声明行为</h6><p><strong>const</strong>声明和<strong>let</strong>声明的行为大同小异，不同之处在于，<strong>const</strong>声明变量的同时必须初始化变量(赋予一个有效值)，并且在程序运行时修改这个变量的时候会导致程序运行错误。<strong>const</strong>声明的变量属于常量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const age = 30</span><br><span class="line">age = 45//TypeError: 给常量赋值</span><br></pre></td></tr></table></figure><h6 id="2-const-的作用域"><a href="#2-const-的作用域" class="headerlink" title="2. const 的作用域"></a>2. const 的作用域</h6><p><strong>const</strong>属于块级作用域，和<strong>let</strong>一样，同样也不可重复声明变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const age = 30</span><br><span class="line">const age = 20//SynTaxError 重复声明</span><br></pre></td></tr></table></figure><h6 id="3-const-声明变量的修改"><a href="#3-const-声明变量的修改" class="headerlink" title="3. const 声明变量的修改"></a>3. const 声明变量的修改</h6><p><strong>const</strong>声明变量的限制只限制于它声明时指向的变量的引用。换句话说，如果<strong>const</strong>声明的是一个对象，而你修改对象里的属性并不会违背<strong>const</strong>的限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">name: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">console.log(person.name); // 张三</span><br><span class="line">//修改</span><br><span class="line">person.name = <span class="string">&quot;李四&quot;</span></span><br><span class="line">console.log(person.name); // 李四</span><br></pre></td></tr></table></figure><h6 id="3-for-循环中-const"><a href="#3-for-循环中-const" class="headerlink" title="3. for 循环中 const"></a>3. for 循环中 const</h6><p>虽然<strong>const</strong>和<strong>let</strong>很相似，但还是不能用<strong>const</strong>声明，因为迭代变量会自增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//错误代码</span><br><span class="line"><span class="keyword">for</span>(const i = 0;i &lt; 5;i++）&#123;&#125;//TypeError 给常量赋值</span><br><span class="line">//正确代码</span><br><span class="line"><span class="built_in">let</span> i = 0</span><br><span class="line"><span class="keyword">for</span>(const j = 7;i &lt; 5;i++）&#123;</span><br><span class="line">console.log(j)</span><br><span class="line">&#125;//7,7,7,7,7</span><br></pre></td></tr></table></figure><p>如果说你还是想用<strong>const ** 声明，你可以像下面这样做，但只对</strong>for-in<strong>和</strong>for-of**有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//代码一</span><br><span class="line">const person = &#123;</span><br><span class="line">a： 1,</span><br><span class="line">b: 2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(const key <span class="keyword">in</span> person)&#123;</span><br><span class="line">console.log(key)</span><br><span class="line">&#125;</span><br><span class="line">// a,b</span><br><span class="line">//代码二</span><br><span class="line">const arr = [1,2,3]</span><br><span class="line"><span class="keyword">for</span>(const item of arr)&#123;</span><br><span class="line">console.log(item)</span><br><span class="line">&#125;</span><br><span class="line">// 1,2,3</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ol><li> <strong>var</strong>声明属于函数作用域，<strong>会提升到函数作用域</strong>的顶部</li><li><strong>let</strong> 声明属于块级作用域，<strong>不会提升到函数作用域的顶部</strong>，在未声明前调用需要声明的<strong>变量</strong>会报错(xxx未定义)</li><li>在<strong>for</strong>循环中使用<strong>var</strong>声明会在<strong>for</strong>循环结束时渗透到外部，而使用<strong>let</strong>声明则不会出现这种情况</li><li><strong>const</strong>声明的变量属于常量，不可对其进行直接进行更改，可对其属性进行修改</li><li><strong>const</strong>和<strong>let</strong>一样属于块级作用域的声明，并且都不能重复声明</li></ol><h2 id="五、使用建议"><a href="#五、使用建议" class="headerlink" title="五、使用建议"></a>五、使用建议</h2><h6 id="1-不使用-var"><a href="#1-不使用-var" class="headerlink" title="1. 不使用 var"></a>1. 不使用 var</h6><p>有了<strong>const</strong>和<strong>let</strong>后，可以替代<strong>var</strong>，因为<strong>const</strong>和<strong>let</strong>没有<strong>var</strong>的那些副作用，<strong>const</strong>和<strong>let</strong>有自己的作用域，使用<strong>const</strong>和<strong>let</strong>久了你会发现自己的代码质量有了提升</p><h6 id="2-const-优先原则，let-次之"><a href="#2-const-优先原则，let-次之" class="headerlink" title="2. const 优先原则，let  次之"></a>2. const 优先原则，let  次之</h6><p>使用<strong>const</strong>声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具，提前发现不合法的赋值操作。因此，应该优先使用<strong>const</strong>来声明变量，只在提前知道未来会有修改时，再使用<strong>let</strong>。这样可以推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。</p><h6 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h6><p><strong>JavaSript</strong>的数据类型</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rollup简单使用</title>
      <link href="/2022/11/21/202211211755/"/>
      <url>/2022/11/21/202211211755/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>rollup</code> 是和<code>webpack</code>、 <code>vite</code>齐名的一种打包工具。但<code>webpack</code>和<code>vite</code>更适合打包应用，<code>rollup</code>偏向于打包<code>类</code>、<code>库</code>这样的工具项目。<br>支持多种格式(<code>es</code>、<code>umd</code>、<code>cjs</code>等)打包。详细配置可以看<code>rollup</code>官网</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>全局安装<code>rollup</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i rollup -g</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><code>rollup</code> 也有很多配套的生态工具，我这里就不举例并安装了，大家可以去<code>npm</code>上面看。</p><p>新建一个项目，并创建<code>rollop.config.js</code>，并添加配置</p><h4 id="rollop-config-js"><a href="#rollop-config-js" class="headerlink" title="rollop.config.js"></a>rollop.config.js</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 配置typescript</span><br><span class="line">import typescript from &#x27;rollup-plugin-typescript2&#x27;;</span><br><span class="line">// </span><br><span class="line">import clear from &#x27;rollup-plugin-clear&#x27;;</span><br><span class="line">// 简化引入路径</span><br><span class="line">import resolve from &#x27;rollup-plugin-node-resolve&#x27;;</span><br><span class="line">// 将commonJs模块转编es5</span><br><span class="line">import commonjs from &#x27;rollup-plugin-commonjs&#x27;;</span><br><span class="line">// 编译代码</span><br><span class="line">import babel from &#x27;rollup-plugin-babel&#x27;;</span><br><span class="line">// 压缩代码</span><br><span class="line">import &#123; terser &#125; from &#x27;rollup-plugin-terser&#x27;;</span><br><span class="line">// 静态文件存放</span><br><span class="line">import copy from &#x27;rollup-plugin-copy&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // 入口文件</span><br><span class="line">  input: [&#x27;./src/index.ts&#x27;],</span><br><span class="line">  // 输出目录</span><br><span class="line">  output: [</span><br><span class="line">    &#123;</span><br><span class="line">      dir: &#x27;bin&#x27;,//存放目录</span><br><span class="line">      format: &quot;es&quot;, // es模块导出，支持按需加载</span><br><span class="line">      name: &#x27;&#x27;,//名称</span><br><span class="line">      exports: &quot;named&quot;, // 指定导出模式（自动、默认、命名、无）</span><br><span class="line">      preserveModules: true, // 保留模块结构</span><br><span class="line">      preserveModulesRoot: &quot;src&quot;, // 将保留的模块放在根级别的此路径下</span><br><span class="line">   &#125;,</span><br><span class="line">  ],</span><br><span class="line">  // 插件目录</span><br><span class="line">  plugins: [</span><br><span class="line">    // 会自动读取 文件tsconfig.json配置</span><br><span class="line">    typescript(),</span><br><span class="line">    // 打包存放前，需要清除的目录</span><br><span class="line">    clear(&#123;</span><br><span class="line">      targets: [&#x27;bin&#x27;],</span><br><span class="line">    &#125;),</span><br><span class="line">    // 简化引入路径</span><br><span class="line">    /*</span><br><span class="line">      不配置：</span><br><span class="line">        export foo from &#x27;./foo/index.js&#x27;</span><br><span class="line">        import bar from &#x27;./bar/index.js&#x27;</span><br><span class="line">      配置：</span><br><span class="line">        export foo from &#x27;./foo&#x27;</span><br><span class="line">        import bar from &#x27;./bar&#x27;</span><br><span class="line">    */</span><br><span class="line">    resolve(),</span><br><span class="line">    // 将commonJs模块转编es5</span><br><span class="line">    commonjs(),</span><br><span class="line">    // 编译代码</span><br><span class="line">    babel(&#123;</span><br><span class="line">      exclude: &#x27;node_modules/**&#x27;,</span><br><span class="line">      runtimeHelpers: true,</span><br><span class="line">    &#125;),</span><br><span class="line">    // 压缩代码</span><br><span class="line">    terser(),</span><br><span class="line">    // 不打包的文件，直接copy放进我们指定的目录中</span><br><span class="line">    copy(&#123;</span><br><span class="line">      targets: [</span><br><span class="line">        &#123; </span><br><span class="line">          src: &#x27;./assets&#x27;, //静态文件</span><br><span class="line">          dest: &#x27;./bin/style/&#x27; //需要存放的目录</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  /*</span><br><span class="line">    比如我们在自己的库中需要使用第三方库，例如jquery等，</span><br><span class="line">    又不想在最终生成的打包文件中出现jquery。这个时候我们就需要使用external属性。作用：排除不希望打包进项目的库</span><br><span class="line">  */ </span><br><span class="line">  external: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="package-json-配置"><a href="#package-json-配置" class="headerlink" title="package.json 配置"></a>package.json 配置</h1><p>这里我只例举出了相关的配置，可以根据实际位置进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;main&quot;: &quot;bin/index.ts&quot;,</span><br><span class="line"> &quot;module&quot;: &quot;bin/index.js&quot;,</span><br><span class="line"> &quot;typings&quot;: &quot;bin/index.d.ts&quot;,</span><br><span class="line"> &quot;type&quot;: &quot;module&quot;,</span><br><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;build&quot;: &quot;rollup -c ./rollup.config.js&quot;,</span><br><span class="line">   &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>打包完成后的目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">项目名</span><br><span class="line">- bin</span><br><span class="line">- foo</span><br><span class="line">index.d.ts</span><br><span class="line">index.js</span><br><span class="line">- demo</span><br><span class="line">index.d.ts</span><br><span class="line">index.js</span><br><span class="line">- index.d.ts</span><br><span class="line">- index.js</span><br><span class="line">- src</span><br><span class="line">- foo</span><br><span class="line">- index.ts</span><br><span class="line">- demo</span><br><span class="line">index.ts</span><br><span class="line">- index.ts</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说<code>rollup</code>要比<code>webpack</code>的配置要简单一些，体积要小一些，没有那么复杂的配置，另外说一下，<code>rollup</code>本身就支持<code>es module</code>，<code>vite</code>也是基于<code>rollup</code>的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Rollup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter ios 配置 flavor / custom schemes</title>
      <link href="/2022/11/03/202211030915/"/>
      <url>/2022/11/03/202211030915/</url>
      
        <content type="html"><![CDATA[<p>最近写 <code>Flutter</code> 用 <code>Flavor</code> 做环境区分，<code>Android</code> 配置可视化很简单，我这里就不细说了，本篇博客主要记录的是<code>Ios</code> <code>Xcode</code> 配置 <code>Flavor</code> (custom schemes 自定义运行方案)。</p><p>亦是记录，也是学习。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p><code>mac</code>  系统的电脑、<code>xcode</code>、<code>Flutter</code></p><h3 id="一、创建配置文件"><a href="#一、创建配置文件" class="headerlink" title="一、创建配置文件"></a>一、创建配置文件</h3><p>用 <code>xcode</code> 打开 <code>Flutter</code> 项目的 <code>ios</code> 目录。<br>在 <code>Runner</code> -&gt; <code>Flutter</code> 新建配置文件，鼠标右键<code>Flutter</code>目录，在弹出来的菜单中选择新建文件即可。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5631b1b8b96a45afb3080580f05f1bee~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>搜索 <code>Configuration Setting File</code> 选择并创建<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/568898d080f34f4abe12c5cbf4f7348c~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>填写配置名称 并点击 <code>create</code> 创建<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0c971b140fa45be84d4ae25c3e5a8da~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>创建好后并打开该文件，如果创建的是<code>Debug</code> 相关的则将目录中的<code>Debug</code>文件中的内容复制到这个文件中<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f6188b5203a4ea09d32f9e8e1a4933a~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>并将下面这段代码放到文件的后面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bundle_suffix=.这里是对应的方案名称</span><br><span class="line">name_suffix=<span class="variable">$&#123;FLUTTER_BUILD_NUMBER&#125;</span></span><br></pre></td></tr></table></figure><h3 id="二、创建对应的-schemes"><a href="#二、创建对应的-schemes" class="headerlink" title="二、创建对应的 schemes"></a>二、创建对应的 <code>schemes</code></h3><p>点击模拟器菜单旁边的 <code>Runner</code> ，我这里已经创建过了一个。<br>点击 <code>New Schemes</code> 即可创建。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ccb1c037cdb34e90bfcc6d5b9a34ae2d~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d00da45dc864894acc427a0df6bbf70~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h3 id="三、添加变量"><a href="#三、添加变量" class="headerlink" title="三、添加变量"></a>三、添加变量</h3><p>并在<code> ios</code> -&gt; <code>Runner </code> -&gt; <code>Info.plist</code>文件中添加定义的变量。<br>变量代码可以看下面这段代码，<code>Value</code> 要和之前创建的配置文件中的一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;BundleDisplayName&lt;/key&gt;</span><br><span class="line">&lt;string&gt;$(name_suffix)&lt;/string&gt;</span><br></pre></td></tr></table></figure><h3 id="四、添加-修改配置"><a href="#四、添加-修改配置" class="headerlink" title="四、添加 修改配置"></a>四、添加 修改配置</h3><p>点击<code>Runner</code> 并选择 <code>PROJECT</code> 下面的 <code>Runner</code> ，添加您需要选择的配置作为之前创建的配置文件作为配置文件。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f41de8f6e2444bf489bc142b81eed1e6~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>注意，对于每个以<code>Release- [flavorName]</code>和<code>Debug- [flavorName]</code>命名的<code>Falvor </code> 或 <code>Schemes</code> 都有两个配置。这里注意名字不要重复。</p><p>选择方案并编辑方案。左侧四个菜单除 <code>build</code>外的所有 <code>build configuration</code> 需要选择相对应的配置。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d04c6ad662344da4a9f69bdfa3045b63~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>就可以根据项目配置的flavor 规则 进行运行了。</p><p>如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run --flavor=develop -t lib/public/develop.dart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Flavor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 基于 hooks 实现受控组件双向绑定</title>
      <link href="/2022/11/02/202211021241/"/>
      <url>/2022/11/02/202211021241/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解或会 <code>Vue</code> 的朋友都知道，在 <code>Vue</code> 中我们可以通过 <code>v-model</code> 实现 受控组件的数据双向绑定，而在     <code>React</code> 中则需要通过 <code>value</code> 和 <code>onChange</code> 实现数据的双向绑定，单个还可以接受，如多个呢。</p><p>看个例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [nickName, setNickName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> [age, setAge] = <span class="title function_">useState</span>(<span class="literal">null</span>)</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> handleNickNameChange = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setNickName</span>(value)</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleAgeChange = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setAge</span>(value)</span><br><span class="line">&#125;, [])</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">Input</span> <span class="attr">value</span>=<span class="string">&#123;nickName&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleNickNameChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">Input</span> <span class="attr">value</span>=<span class="string">&#123;age&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleAgeChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"> )</span><br></pre></td></tr></table></figure><p>根据上面得出结论，如果一个组件内有多个受控组件，那将会向上面一样写很多个。我们能不能封装一下只需要声明变量，不需要声明 <code>set</code> 方法呢。答案是OK的，可以看下面。</p><p><code>Tips：input 的 type 的值为 file 时为非受控组件，原因是因为 type 为 file 时的 value 处于可读状态。</code></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>我这里使用的是 <code>React</code> + <code>ts</code>，使用<code>js</code>的话需要删除变量后面的类型声明。</p><h2 id="withModel"><a href="#withModel" class="headerlink" title="withModel"></a>withModel</h2><p>我这里封装的方法组件为 <code>withModel</code> ，你们可以根据自身命名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//withModel.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; forwardRef, useMemo, useCallback, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向绑定工具方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withModel</span> = (<span class="params">Component: <span class="built_in">any</span></span>) =&gt; <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, outerRef</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> p =  &#123;</span><br><span class="line">      <span class="attr">models</span>: [],</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">onChange</span>: <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">      ...props,</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123; models = [], name, value, onChange, ...other &#125; = p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [modelValue, setModelValue] = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> models, [models])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> handleChange = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (setModelValue) &#123;</span><br><span class="line">              <span class="keyword">const</span> setValue = setModelValue <span class="keyword">as</span> <span class="title class_">Function</span>;</span><br><span class="line">              <span class="title function_">setValue</span>(event.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        </span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">typeof</span> onChange === <span class="string">&#x27;function&#x27;</span>) <span class="title function_">onChange</span>(event)</span><br><span class="line">    &#125;, [onChange])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...other</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;outerRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&#123;name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;modelValue</span> !== <span class="string">undefined</span> ? <span class="attr">modelValue</span> <span class="attr">:</span> <span class="attr">value</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withModel</span><br></pre></td></tr></table></figure><h2 id="input-tsx"><a href="#input-tsx" class="headerlink" title="input.tsx"></a>input.tsx</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> withModel <span class="keyword">from</span> <span class="string">&#x27;../utils/withModel&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> inputProps = <span class="title class_">React</span>.<span class="property">DetailedHTMLProps</span>&lt;</span><br><span class="line">  <span class="title class_">React</span>.<span class="property">InputHTMLAttributes</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;,</span><br><span class="line">  <span class="title class_">HTMLInputElement</span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Component</span> = forwardRef&lt;<span class="title class_">HTMLInputElement</span>, inputProps&gt;(<span class="function">(<span class="params">props, outerRef</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> p = &#123;...props&#125;;</span><br><span class="line">    <span class="keyword">let</span> &#123; <span class="keyword">type</span> &#125; = props;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">type</span>) <span class="keyword">type</span> = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;outerRef&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;![&#x27;checkbox&#x27;, &#x27;file&#x27;, &#x27;radio&#x27;].includes(type) &amp;&amp; element&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Component</span>.<span class="property">displayName</span> = <span class="string">&#x27;Input&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withModel</span>(<span class="title class_">Component</span> );</span><br></pre></td></tr></table></figure><h2 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&quot;./Input&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">useState</span>(<span class="string">&#x27;我是输入的内容&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Input</span> <span class="attr">models</span>=<span class="string">&#123;data&#125;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/*  */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;`我是输入的内容： $&#123;data[0]&#125;`&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原理：使用 <code>forwardRef</code> 将当前受控组件的 <code>ref</code> 引用进行传递，通过 <code>withModel</code> 组件方法进行修改。</p><p>搞定收工。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app 监听电话状态</title>
      <link href="/2021/08/20/202108200742/"/>
      <url>/2021/08/20/202108200742/</url>
      
        <content type="html"><![CDATA[<p>对于uni-app的开发，很多地方都需要h5+接口去实现，对于需要切入原生方式开发的，因为对Android 原生开发不了解，所以就显得很无奈。因业务需求，需要监听电话状态，找了好久天才找到，特意来分享一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> maintest = plus.<span class="property">android</span>.<span class="title function_">runtimeMainActivity</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Contexttest</span> = plus.<span class="property">android</span>.importClass(<span class="string">&quot;android.content.Context&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> telephonyManager = plus.<span class="property">android</span>.importClass(<span class="string">&quot;android.telephony.TelephonyManager&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> telManager=plus.<span class="property">android</span>.<span class="title function_">runtimeMainActivity</span>().<span class="title function_">getSystemService</span>(<span class="title class_">Contexttest</span>.<span class="property">TELEPHONY_SERVICE</span>);</span><br><span class="line"><span class="keyword">let</span> receiver=plus.<span class="property">android</span>.<span class="title function_">implements</span>(<span class="string">&#x27;io.dcloud.android.content.BroadcastReceiver&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">onReceive</span>: <span class="keyword">function</span>(<span class="params">Contexttest, intent</span>) &#123;</span><br><span class="line">plus.<span class="property">android</span>.importClass(intent);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intent.<span class="title function_">getAction</span>());</span><br><span class="line"><span class="comment">// let telephonyManager = plus.android.importClass(&quot;android.telephony.TelephonyManager&quot;);</span></span><br><span class="line"><span class="comment">// let telephonyManager=plus.android.runtimeMainActivity().getSystemService(Contexttest.TELEPHONY_SERVICE);</span></span><br><span class="line"><span class="keyword">let</span> phonetype=telManager.<span class="title function_">getCallState</span>();</span><br><span class="line"><span class="keyword">let</span> phoneNumber = intent.<span class="title function_">getStringExtra</span>(telephonyManager.<span class="property">EXTRA_INCOMING_NUMBER</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;phonetype:&quot;</span>+phonetype); <span class="comment">//电话状态 0-&gt;空闲状态 1-&gt;振铃状态 2-&gt;通话存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(); <span class="comment">//电话号</span></span><br><span class="line"><span class="keyword">switch</span> (phonetype) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">_this.<span class="title function_">getCallLog</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// _t.state.push(&#123;state:phonetype == 0?&#x27;空闲状态&#x27;:phonetype == 1?&#x27;振铃状态&#x27;:&#x27;通话存在&#x27;, time:dateFormat(&#x27;hh:mm:ss&#x27;)&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">IntentFilter</span> = plus.<span class="property">android</span>.importClass(<span class="string">&#x27;android.content.IntentFilter&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> filter = <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">filter.<span class="title function_">addAction</span>(telephonyManager.<span class="property">ACTION_PHONE_STATE_CHANGED</span>);</span><br><span class="line">maintest.<span class="title function_">registerReceiver</span>(receiver, filter);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Uni-app </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
